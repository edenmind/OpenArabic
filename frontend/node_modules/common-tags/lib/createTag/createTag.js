"use strict";

exports.__esModule = true;
exports["default"] = createTag;

var _utils = require("../utils");

var tagTransformersSymbol = 'COMMON_TAGS_TAG_TRANSFORMERS_SYMBOL';

function isTag(fn) {
  return typeof fn === 'function' && fn[tagTransformersSymbol];
}

function cleanTransformers(transformers) {
  return (0, _utils.flat)(transformers).reduce(function (transformers, transformer) {
    return isTag(transformer) ? [].concat(transformers, transformer[tagTransformersSymbol]) : [].concat(transformers, [transformer]);
  }, []);
}
/**
 * An intermediary template tag that receives a template tag and passes the result of calling the template with the received
 * template tag to our own template tag.
 * @param  {Function}        nextTag          - The received template tag
 * @param  {Array<String>}   template         - The template to process
 * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template
 * @return {*}                                - The final processed value
 */


function getInterimTag(originalTag, extraTag) {
  return function tag() {
    return originalTag(['', ''], extraTag.apply(void 0, arguments));
  };
}

function getTagCallInfo(transformers) {
  return {
    transformers: transformers,
    context: transformers.map(function (transformer) {
      return transformer.getInitialContext ? transformer.getInitialContext() : {};
    })
  };
}
/**
 * Iterate through each transformer, calling the transformer's specified hook.
 * @param {Array<Function>} transformers - The transformer functions
 * @param {String} hookName              - The name of the hook
 * @param {String} initialString         - The input string
 * @return {String}                      - The final results of applying each transformer
 */


function applyHook0(_ref, hookName, initialString) {
  var transformers = _ref.transformers,
      context = _ref.context;
  return transformers.reduce(function (result, transformer, index) {
    return transformer[hookName] ? transformer[hookName](result, context[index]) : result;
  }, initialString);
}
/**
 * Iterate through each transformer, calling the transformer's specified hook.
 * @param {Array<Function>} transformers - The transformer functions
 * @param {String} hookName              - The name of the hook
 * @param {String} initialString         - The input string
 * @param {*} arg1                       - An additional argument passed to the hook
 * @return {String}                      - The final results of applying each transformer
 */


function applyHook1(_ref2, hookName, initialString, arg1) {
  var transformers = _ref2.transformers,
      context = _ref2.context;
  return transformers.reduce(function (result, transformer, index) {
    return transformer[hookName] ? transformer[hookName](result, arg1, context[index]) : result;
  }, initialString);
}
/**
 * Consumes a pipeline of composable transformer plugins and produces a template tag.
 * @param  {...Object} [...rawTransformers] - An array or arguments list of transformers
 * @return {Function}                       - A template tag
 */


function createTag() {
  for (var _len = arguments.length, rawTransformers = new Array(_len), _key = 0; _key < _len; _key++) {
    rawTransformers[_key] = arguments[_key];
  }

  var transformers = cleanTransformers(rawTransformers);

  function tag(strings) {
    for (var _len2 = arguments.length, expressions = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      expressions[_key2 - 1] = arguments[_key2];
    }

    if (typeof strings === 'function') {
      // if the first argument passed is a function, assume it is a template tag and return
      // an intermediary tag that processes the template using the aforementioned tag, passing the
      // result to our tag
      return getInterimTag(tag, strings);
    }

    if (!Array.isArray(strings)) {
      return tag([strings]);
    }

    var tagCallInfo = getTagCallInfo(transformers); // if the first argument is an array, return a transformed end result of processing the template with our tag

    var processedTemplate = strings.map(function (string) {
      return applyHook0(tagCallInfo, 'onString', string);
    }).reduce(function (result, string, index) {
      return ''.concat(result, applyHook1(tagCallInfo, 'onSubstitution', expressions[index - 1], result), string);
    });
    return applyHook0(tagCallInfo, 'onEndResult', processedTemplate);
  }

  tag[tagTransformersSymbol] = transformers;
  return tag;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,