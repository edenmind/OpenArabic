/** @license MUI v5.1.0
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.MaterialUI = {}, global.React, global.ReactDOM));
})(this, (function (exports, React, ReactDOM) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var React__namespace = /*#__PURE__*/_interopNamespace(React);
  var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

  const common = {
    black: '#000',
    white: '#fff'
  };
  var common$1 = common;

  const red = {
    50: '#ffebee',
    100: '#ffcdd2',
    200: '#ef9a9a',
    300: '#e57373',
    400: '#ef5350',
    500: '#f44336',
    600: '#e53935',
    700: '#d32f2f',
    800: '#c62828',
    900: '#b71c1c',
    A100: '#ff8a80',
    A200: '#ff5252',
    A400: '#ff1744',
    A700: '#d50000'
  };
  var red$1 = red;

  const pink = {
    50: '#fce4ec',
    100: '#f8bbd0',
    200: '#f48fb1',
    300: '#f06292',
    400: '#ec407a',
    500: '#e91e63',
    600: '#d81b60',
    700: '#c2185b',
    800: '#ad1457',
    900: '#880e4f',
    A100: '#ff80ab',
    A200: '#ff4081',
    A400: '#f50057',
    A700: '#c51162'
  };
  var pink$1 = pink;

  const purple = {
    50: '#f3e5f5',
    100: '#e1bee7',
    200: '#ce93d8',
    300: '#ba68c8',
    400: '#ab47bc',
    500: '#9c27b0',
    600: '#8e24aa',
    700: '#7b1fa2',
    800: '#6a1b9a',
    900: '#4a148c',
    A100: '#ea80fc',
    A200: '#e040fb',
    A400: '#d500f9',
    A700: '#aa00ff'
  };
  var purple$1 = purple;

  const deepPurple = {
    50: '#ede7f6',
    100: '#d1c4e9',
    200: '#b39ddb',
    300: '#9575cd',
    400: '#7e57c2',
    500: '#673ab7',
    600: '#5e35b1',
    700: '#512da8',
    800: '#4527a0',
    900: '#311b92',
    A100: '#b388ff',
    A200: '#7c4dff',
    A400: '#651fff',
    A700: '#6200ea'
  };
  var deepPurple$1 = deepPurple;

  const indigo = {
    50: '#e8eaf6',
    100: '#c5cae9',
    200: '#9fa8da',
    300: '#7986cb',
    400: '#5c6bc0',
    500: '#3f51b5',
    600: '#3949ab',
    700: '#303f9f',
    800: '#283593',
    900: '#1a237e',
    A100: '#8c9eff',
    A200: '#536dfe',
    A400: '#3d5afe',
    A700: '#304ffe'
  };
  var indigo$1 = indigo;

  const blue = {
    50: '#e3f2fd',
    100: '#bbdefb',
    200: '#90caf9',
    300: '#64b5f6',
    400: '#42a5f5',
    500: '#2196f3',
    600: '#1e88e5',
    700: '#1976d2',
    800: '#1565c0',
    900: '#0d47a1',
    A100: '#82b1ff',
    A200: '#448aff',
    A400: '#2979ff',
    A700: '#2962ff'
  };
  var blue$1 = blue;

  const lightBlue = {
    50: '#e1f5fe',
    100: '#b3e5fc',
    200: '#81d4fa',
    300: '#4fc3f7',
    400: '#29b6f6',
    500: '#03a9f4',
    600: '#039be5',
    700: '#0288d1',
    800: '#0277bd',
    900: '#01579b',
    A100: '#80d8ff',
    A200: '#40c4ff',
    A400: '#00b0ff',
    A700: '#0091ea'
  };
  var lightBlue$1 = lightBlue;

  const cyan = {
    50: '#e0f7fa',
    100: '#b2ebf2',
    200: '#80deea',
    300: '#4dd0e1',
    400: '#26c6da',
    500: '#00bcd4',
    600: '#00acc1',
    700: '#0097a7',
    800: '#00838f',
    900: '#006064',
    A100: '#84ffff',
    A200: '#18ffff',
    A400: '#00e5ff',
    A700: '#00b8d4'
  };
  var cyan$1 = cyan;

  const teal = {
    50: '#e0f2f1',
    100: '#b2dfdb',
    200: '#80cbc4',
    300: '#4db6ac',
    400: '#26a69a',
    500: '#009688',
    600: '#00897b',
    700: '#00796b',
    800: '#00695c',
    900: '#004d40',
    A100: '#a7ffeb',
    A200: '#64ffda',
    A400: '#1de9b6',
    A700: '#00bfa5'
  };
  var teal$1 = teal;

  const green = {
    50: '#e8f5e9',
    100: '#c8e6c9',
    200: '#a5d6a7',
    300: '#81c784',
    400: '#66bb6a',
    500: '#4caf50',
    600: '#43a047',
    700: '#388e3c',
    800: '#2e7d32',
    900: '#1b5e20',
    A100: '#b9f6ca',
    A200: '#69f0ae',
    A400: '#00e676',
    A700: '#00c853'
  };
  var green$1 = green;

  const lightGreen = {
    50: '#f1f8e9',
    100: '#dcedc8',
    200: '#c5e1a5',
    300: '#aed581',
    400: '#9ccc65',
    500: '#8bc34a',
    600: '#7cb342',
    700: '#689f38',
    800: '#558b2f',
    900: '#33691e',
    A100: '#ccff90',
    A200: '#b2ff59',
    A400: '#76ff03',
    A700: '#64dd17'
  };
  var lightGreen$1 = lightGreen;

  const lime = {
    50: '#f9fbe7',
    100: '#f0f4c3',
    200: '#e6ee9c',
    300: '#dce775',
    400: '#d4e157',
    500: '#cddc39',
    600: '#c0ca33',
    700: '#afb42b',
    800: '#9e9d24',
    900: '#827717',
    A100: '#f4ff81',
    A200: '#eeff41',
    A400: '#c6ff00',
    A700: '#aeea00'
  };
  var lime$1 = lime;

  const yellow = {
    50: '#fffde7',
    100: '#fff9c4',
    200: '#fff59d',
    300: '#fff176',
    400: '#ffee58',
    500: '#ffeb3b',
    600: '#fdd835',
    700: '#fbc02d',
    800: '#f9a825',
    900: '#f57f17',
    A100: '#ffff8d',
    A200: '#ffff00',
    A400: '#ffea00',
    A700: '#ffd600'
  };
  var yellow$1 = yellow;

  const amber = {
    50: '#fff8e1',
    100: '#ffecb3',
    200: '#ffe082',
    300: '#ffd54f',
    400: '#ffca28',
    500: '#ffc107',
    600: '#ffb300',
    700: '#ffa000',
    800: '#ff8f00',
    900: '#ff6f00',
    A100: '#ffe57f',
    A200: '#ffd740',
    A400: '#ffc400',
    A700: '#ffab00'
  };
  var amber$1 = amber;

  const orange = {
    50: '#fff3e0',
    100: '#ffe0b2',
    200: '#ffcc80',
    300: '#ffb74d',
    400: '#ffa726',
    500: '#ff9800',
    600: '#fb8c00',
    700: '#f57c00',
    800: '#ef6c00',
    900: '#e65100',
    A100: '#ffd180',
    A200: '#ffab40',
    A400: '#ff9100',
    A700: '#ff6d00'
  };
  var orange$1 = orange;

  const deepOrange = {
    50: '#fbe9e7',
    100: '#ffccbc',
    200: '#ffab91',
    300: '#ff8a65',
    400: '#ff7043',
    500: '#ff5722',
    600: '#f4511e',
    700: '#e64a19',
    800: '#d84315',
    900: '#bf360c',
    A100: '#ff9e80',
    A200: '#ff6e40',
    A400: '#ff3d00',
    A700: '#dd2c00'
  };
  var deepOrange$1 = deepOrange;

  const brown = {
    50: '#efebe9',
    100: '#d7ccc8',
    200: '#bcaaa4',
    300: '#a1887f',
    400: '#8d6e63',
    500: '#795548',
    600: '#6d4c41',
    700: '#5d4037',
    800: '#4e342e',
    900: '#3e2723',
    A100: '#d7ccc8',
    A200: '#bcaaa4',
    A400: '#8d6e63',
    A700: '#5d4037'
  };
  var brown$1 = brown;

  const grey = {
    50: '#fafafa',
    100: '#f5f5f5',
    200: '#eeeeee',
    300: '#e0e0e0',
    400: '#bdbdbd',
    500: '#9e9e9e',
    600: '#757575',
    700: '#616161',
    800: '#424242',
    900: '#212121',
    A100: '#f5f5f5',
    A200: '#eeeeee',
    A400: '#bdbdbd',
    A700: '#616161'
  };
  var grey$1 = grey;

  const blueGrey = {
    50: '#eceff1',
    100: '#cfd8dc',
    200: '#b0bec5',
    300: '#90a4ae',
    400: '#78909c',
    500: '#607d8b',
    600: '#546e7a',
    700: '#455a64',
    800: '#37474f',
    900: '#263238',
    A100: '#cfd8dc',
    A200: '#b0bec5',
    A400: '#78909c',
    A700: '#455a64'
  };
  var blueGrey$1 = blueGrey;

  var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    common: common$1,
    red: red$1,
    pink: pink$1,
    purple: purple$1,
    deepPurple: deepPurple$1,
    indigo: indigo$1,
    blue: blue$1,
    lightBlue: lightBlue$1,
    cyan: cyan$1,
    teal: teal$1,
    green: green$1,
    lightGreen: lightGreen$1,
    lime: lime$1,
    yellow: yellow$1,
    amber: amber$1,
    orange: orange$1,
    deepOrange: deepOrange$1,
    brown: brown$1,
    grey: grey$1,
    blueGrey: blueGrey$1
  });

  var global$1 = (typeof global !== "undefined" ? global :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

  if (typeof global$1.setTimeout === 'function') ;
  if (typeof global$1.clearTimeout === 'function') ;

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global$1.performance || {};
  performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _extends_1 = createCommonjsModule(function (module) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
  module.exports["default"] = module.exports, module.exports.__esModule = true;
  });

  unwrapExports(_extends_1);

  function memoize$1(fn) {
    var cache = Object.create(null);
    return function (arg) {
      if (cache[arg] === undefined) cache[arg] = fn(arg);
      return cache[arg];
    };
  }

  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

  var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
    /* o */
    && prop.charCodeAt(1) === 110
    /* n */
    && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
  );

  /*

  Based off glamor's StyleSheet, thanks Sunil ❤️

  high performance StyleSheet for css-in-js systems

  - uses multiple style tags behind the scenes for millions of rules
  - uses `insertRule` for appending in production for *much* faster performance

  // usage

  import { StyleSheet } from '@emotion/sheet'

  let styleSheet = new StyleSheet({ key: '', container: document.head })

  styleSheet.insert('#box { border: 1px solid red; }')
  - appends a css rule into the stylesheet

  styleSheet.flush()
  - empties the stylesheet of all its contents

  */
  // $FlowFixMe
  function sheetForTag(tag) {
    if (tag.sheet) {
      // $FlowFixMe
      return tag.sheet;
    } // this weirdness brought to you by firefox

    /* istanbul ignore next */


    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        // $FlowFixMe
        return document.styleSheets[i];
      }
    }
  }

  function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);

    if (options.nonce !== undefined) {
      tag.setAttribute('nonce', options.nonce);
    }

    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
  }

  var StyleSheet = /*#__PURE__*/function () {
    function StyleSheet(options) {
      var _this = this;

      this._insertTag = function (tag) {
        var before;

        if (_this.tags.length === 0) {
          before = _this.prepend ? _this.container.firstChild : _this.before;
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }

        _this.container.insertBefore(tag, before);

        _this.tags.push(tag);
      };

      this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.before = null;
    }

    var _proto = StyleSheet.prototype;

    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };

    _proto.insert = function insert(rule) {
      // the max length is how many rules we have per style tag, it's 65000 in speedy mode
      // it's 1 in dev because we insert source maps that map a single rule to a location
      // and you can only have one source map per style tag
      if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }

      var tag = this.tags[this.tags.length - 1];

      {
        var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

        if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
          // this would only cause problem in speedy mode
          // but we don't want enabling speedy to affect the observable behavior
          // so we report this error at all times
          console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
      }

      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);

        try {
          // this is the ultrafast version, works across browsers
          // the big drawback is that the css won't be editable in devtools
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
            console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }

      this.ctr++;
    };

    _proto.flush = function flush() {
      // $FlowFixMe
      this.tags.forEach(function (tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;

      {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };

    return StyleSheet;
  }();

  var e="-ms-";var r="-moz-";var a="-webkit-";var c="comm";var n="rule";var t="decl";var i="@import";var p="@keyframes";var k=Math.abs;var d=String.fromCharCode;function m(e,r){return (((r<<2^z(e,0))<<2^z(e,1))<<2^z(e,2))<<2^z(e,3)}function g(e){return e.trim()}function x$1(e,r){return (e=r.exec(e))?e[0]:e}function y(e,r,a){return e.replace(r,a)}function j(e,r){return e.indexOf(r)}function z(e,r){return e.charCodeAt(r)|0}function C(e,r,a){return e.slice(r,a)}function A(e){return e.length}function M(e){return e.length}function O(e,r){return r.push(e),e}function S(e,r){return e.map(r).join("")}var q=1;var B=1;var D=0;var E=0;var F=0;var G="";function H(e,r,a,c,n,t,s){return {value:e,root:r,parent:a,type:c,props:n,children:t,line:q,column:B,length:s,return:""}}function I(e,r,a){return H(e,r.root,r.parent,a,r.props,r.children,0)}function J(){return F}function K(){F=E>0?z(G,--E):0;if(B--,F===10)B=1,q--;return F}function L(){F=E<D?z(G,E++):0;if(B++,F===10)B=1,q++;return F}function N(){return z(G,E)}function P(){return E}function Q(e,r){return C(G,e,r)}function R(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function T(e){return q=B=1,D=A(G=e),E=0,[]}function U(e){return G="",e}function V(e){return g(Q(E-1,_$4(e===91?e+2:e===40?e+1:e)))}function X(e){while(F=N())if(F<33)L();else break;return R(e)>2||R(F)>3?"":" "}function Z(e,r){while(--r&&L())if(F<48||F>102||F>57&&F<65||F>70&&F<97)break;return Q(e,P()+(r<6&&N()==32&&L()==32))}function _$4(e){while(L())switch(F){case e:return E;case 34:case 39:return _$4(e===34||e===39?e:F);case 40:if(e===41)_$4(e);break;case 92:L();break}return E}function ee(e,r){while(L())if(e+F===47+10)break;else if(e+F===42+42&&N()===47)break;return "/*"+Q(r,E-1)+"*"+d(e===47?e:L())}function re(e){while(!R(N()))L();return Q(e,E)}function ae(e){return U(ce("",null,null,null,[""],e=T(e),0,[0],e))}function ce(e,r,a,c,n,t,s,u,i){var f=0;var o=0;var l=s;var v=0;var h=0;var p=0;var b=1;var w=1;var $=1;var k=0;var m="";var g=n;var x=t;var j=c;var z=m;while(w)switch(p=k,k=L()){case 34:case 39:case 91:case 40:z+=V(k);break;case 9:case 10:case 13:case 32:z+=X(p);break;case 92:z+=Z(P()-1,7);continue;case 47:switch(N()){case 42:case 47:O(te(ee(L(),P()),r,a),i);break;default:z+="/";}break;case 123*b:u[f++]=A(z)*$;case 125*b:case 59:case 0:switch(k){case 0:case 125:w=0;case 59+o:if(h>0&&A(z)-l)O(h>32?se(z+";",c,a,l-1):se(y(z," ","")+";",c,a,l-2),i);break;case 59:z+=";";default:O(j=ne(z,r,a,f,o,n,u,m,g=[],x=[],l),t);if(k===123)if(o===0)ce(z,r,j,j,g,t,l,u,x);else switch(v){case 100:case 109:case 115:ce(e,j,j,c&&O(ne(e,j,j,0,0,n,u,m,n,g=[],l),x),n,x,l,u,c?g:x);break;default:ce(z,j,j,j,[""],x,l,u,x);}}f=o=h=0,b=$=1,m=z="",l=s;break;case 58:l=1+A(z),h=p;default:if(b<1)if(k==123)--b;else if(k==125&&b++==0&&K()==125)continue;switch(z+=d(k),k*b){case 38:$=o>0?1:(z+="\f",-1);break;case 44:u[f++]=(A(z)-1)*$,$=1;break;case 64:if(N()===45)z+=V(L());v=N(),o=A(m=z+=re(P())),k++;break;case 45:if(p===45&&A(z)==2)b=0;}}return t}function ne(e,r,a,c,t,s,u,i,f,o,l){var v=t-1;var h=t===0?s:[""];var p=M(h);for(var b=0,w=0,$=0;b<c;++b)for(var d=0,m=C(e,v+1,v=k(w=u[b])),x=e;d<p;++d)if(x=g(w>0?h[d]+" "+m:y(m,/&\f/g,h[d])))f[$++]=x;return H(e,r,a,t===0?n:i,f,o,l)}function te(e,r,a){return H(e,r,a,c,d(J()),C(e,2,-2),0)}function se(e,r,a,c){return H(e,r,a,t,C(e,0,c),C(e,c+1,-1),c)}function ue(c,n){switch(m(c,n)){case 5103:return a+"print-"+c+c;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return a+c+c;case 5349:case 4246:case 4810:case 6968:case 2756:return a+c+r+c+e+c+c;case 6828:case 4268:return a+c+e+c+c;case 6165:return a+c+e+"flex-"+c+c;case 5187:return a+c+y(c,/(\w+).+(:[^]+)/,a+"box-$1$2"+e+"flex-$1$2")+c;case 5443:return a+c+e+"flex-item-"+y(c,/flex-|-self/,"")+c;case 4675:return a+c+e+"flex-line-pack"+y(c,/align-content|flex-|-self/,"")+c;case 5548:return a+c+e+y(c,"shrink","negative")+c;case 5292:return a+c+e+y(c,"basis","preferred-size")+c;case 6060:return a+"box-"+y(c,"-grow","")+a+c+e+y(c,"grow","positive")+c;case 4554:return a+y(c,/([^-])(transform)/g,"$1"+a+"$2")+c;case 6187:return y(y(y(c,/(zoom-|grab)/,a+"$1"),/(image-set)/,a+"$1"),c,"")+c;case 5495:case 3959:return y(c,/(image-set\([^]*)/,a+"$1"+"$`$1");case 4968:return y(y(c,/(.+:)(flex-)?(.*)/,a+"box-pack:$3"+e+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+a+c+c;case 4095:case 3583:case 4068:case 2532:return y(c,/(.+)-inline(.+)/,a+"$1$2")+c;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(A(c)-1-n>6)switch(z(c,n+1)){case 109:if(z(c,n+4)!==45)break;case 102:return y(c,/(.+:)(.+)-([^]+)/,"$1"+a+"$2-$3"+"$1"+r+(z(c,n+3)==108?"$3":"$2-$3"))+c;case 115:return ~j(c,"stretch")?ue(y(c,"stretch","fill-available"),n)+c:c}break;case 4949:if(z(c,n+1)!==115)break;case 6444:switch(z(c,A(c)-3-(~j(c,"!important")&&10))){case 107:return y(c,":",":"+a)+c;case 101:return y(c,/(.+:)([^;!]+)(;|!.+)?/,"$1"+a+(z(c,14)===45?"inline-":"")+"box$3"+"$1"+a+"$2$3"+"$1"+e+"$2box$3")+c}break;case 5936:switch(z(c,n+11)){case 114:return a+c+e+y(c,/[svh]\w+-[tblr]{2}/,"tb")+c;case 108:return a+c+e+y(c,/[svh]\w+-[tblr]{2}/,"tb-rl")+c;case 45:return a+c+e+y(c,/[svh]\w+-[tblr]{2}/,"lr")+c}return a+c+e+c+c}return c}function ie(e,r){var a="";var c=M(e);for(var n=0;n<c;n++)a+=r(e[n],n,e,r)||"";return a}function fe(e,r,a,s){switch(e.type){case i:case t:return e.return=e.return||e.value;case c:return "";case n:e.value=e.props.join(",");}return A(a=ie(e.children,s))?e.return=e.value+"{"+a+"}":""}function oe(e){var r=M(e);return function(a,c,n,t){var s="";for(var u=0;u<r;u++)s+=e[u](a,c,n,t)||"";return s}}function ve(c,s,u,i){if(!c.return)switch(c.type){case t:c.return=ue(c.value,c.length);break;case p:return ie([I(y(c.value,"@","@"+a),c,"")],i);case n:if(c.length)return S(c.props,(function(n){switch(x$1(n,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return ie([I(y(n,/:(read-\w+)/,":"+r+"$1"),c,"")],i);case"::placeholder":return ie([I(y(n,/:(plac\w+)/,":"+a+"input-$1"),c,""),I(y(n,/:(plac\w+)/,":"+r+"$1"),c,""),I(y(n,/:(plac\w+)/,e+"input-$1"),c,"")],i)}return ""}))}}

  var weakMemoize = function weakMemoize(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function (arg) {
      if (cache.has(arg)) {
        // $FlowFixMe
        return cache.get(arg);
      }

      var ret = func(arg);
      cache.set(arg, ret);
      return ret;
    };
  };

  var last = function last(arr) {
    return arr.length ? arr[arr.length - 1] : null;
  }; // based on https://github.com/thysultan/stylis.js/blob/e6843c373ebcbbfade25ebcc23f540ed8508da0a/src/Tokenizer.js#L239-L244


  var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;

    while (true) {
      previous = character;
      character = N(); // &\f

      if (previous === 38 && character === 12) {
        points[index] = 1;
      }

      if (R(character)) {
        break;
      }

      L();
    }

    return Q(begin, E);
  };

  var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;

    do {
      switch (R(character)) {
        case 0:
          // &\f
          if (character === 38 && N() === 12) {
            // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
          }

          parsed[index] += identifierWithPointTracking(E - 1, points, index);
          break;

        case 2:
          parsed[index] += V(character);
          break;

        case 4:
          // comma
          if (character === 44) {
            // colon
            parsed[++index] = N() === 58 ? '&\f' : '';
            points[index] = parsed[index].length;
            break;
          }

        // fallthrough

        default:
          parsed[index] += d(character);
      }
    } while (character = L());

    return parsed;
  };

  var getRules = function getRules(value, points) {
    return U(toRules(T(value), points));
  }; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


  var fixedElements = /* #__PURE__ */new WeakMap();
  var compat = function compat(element) {
    if (element.type !== 'rule' || !element.parent || // .length indicates if this rule contains pseudo or not
    !element.length) {
      return;
    }

    var value = element.value,
        parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;

    while (parent.type !== 'rule') {
      parent = parent.parent;
      if (!parent) return;
    } // short-circuit for the simplest case


    if (element.props.length === 1 && value.charCodeAt(0) !== 58
    /* colon */
    && !fixedElements.get(parent)) {
      return;
    } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


    if (isImplicitRule) {
      return;
    }

    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;

    for (var i = 0, k = 0; i < rules.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
      }
    }
  };
  var removeLabel = function removeLabel(element) {
    if (element.type === 'decl') {
      var value = element.value;

      if ( // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98) {
        // this ignores label
        element["return"] = '';
        element.value = '';
      }
    }
  };
  var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

  var isIgnoringComment = function isIgnoringComment(element) {
    return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
  };

  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
    return function (element, index, children) {
      if (element.type !== 'rule') return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

      if (unsafePseudoClasses && cache.compat !== true) {
        var prevElement = index > 0 ? children[index - 1] : null;

        if (prevElement && isIgnoringComment(last(prevElement.children))) {
          return;
        }

        unsafePseudoClasses.forEach(function (unsafePseudoClass) {
          console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
        });
      }
    };
  };

  var isImportRule = function isImportRule(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };

  var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
    for (var i = index - 1; i >= 0; i--) {
      if (!isImportRule(children[i])) {
        return true;
      }
    }

    return false;
  }; // use this to remove incorrect elements from further processing
  // so they don't get handed to the `sheet` (or anything else)
  // as that could potentially lead to additional logs which in turn could be overhelming to the user


  var nullifyElement = function nullifyElement(element) {
    element.type = '';
    element.value = '';
    element["return"] = '';
    element.children = '';
    element.props = '';
  };

  var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
    if (!isImportRule(element)) {
      return;
    }

    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };

  var isBrowser$4 = typeof document !== 'undefined';
  var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
    return memoize$1(function () {
      var cache = {};
      return function (name) {
        return cache[name];
      };
    });
  });
  var defaultStylisPlugins = [ve];

  var createCache = function createCache(options) {
    var key = options.key;

    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
    }

    if (isBrowser$4 && key === 'css') {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
      // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
      // note this very very intentionally targets all style elements regardless of the key to ensure
      // that creating a cache works inside of render of a React component

      Array.prototype.forEach.call(ssrStyles, function (node) {
        // we want to only move elements which have a space in the data-emotion attribute value
        // because that indicates that it is an Emotion 11 server-side rendered style elements
        // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
        // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
        // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
        // will not result in the Emotion 10 styles being destroyed
        var dataEmotionAttribute = node.getAttribute('data-emotion');

        if (dataEmotionAttribute.indexOf(' ') === -1) {
          return;
        }
        document.head.appendChild(node);
        node.setAttribute('data-s', '');
      });
    }

    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

    {
      // $FlowFixMe
      if (/[^a-z-]/.test(key)) {
        throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
      }
    }

    var inserted = {}; // $FlowFixMe

    var container;
    var nodesToHydrate = [];

    if (isBrowser$4) {
      container = options.container || document.head;
      Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
        var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }

        nodesToHydrate.push(node);
      });
    }

    var _insert;

    var omnipresentPlugins = [compat, removeLabel];

    {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache.compat;
        }

      }), incorrectImportAlarm);
    }

    if (isBrowser$4) {
      var currentSheet;
      var finalizingPlugins = [fe, function (element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== c) {
            // insert empty rule in non-production environments
            // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
            currentSheet.insert(element.value + "{}");
          }
        }
      } ];
      var serializer = oe(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

      var stylis = function stylis(styles) {
        return ie(ae(styles), serializer);
      };

      _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;

        if (serialized.map !== undefined) {
          currentSheet = {
            insert: function insert(rule) {
              sheet.insert(rule + serialized.map);
            }
          };
        }

        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

        if (shouldCache) {
          cache.inserted[serialized.name] = true;
        }
      };
    } else {
      var _finalizingPlugins = [fe];

      var _serializer = oe(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

      var _stylis = function _stylis(styles) {
        return ie(ae(styles), _serializer);
      }; // $FlowFixMe


      var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

      var getRules = function getRules(selector, serialized) {
        var name = serialized.name;

        if (serverStylisCache[name] === undefined) {
          serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        }

        return serverStylisCache[name];
      };

      _insert = function _insert(selector, serialized, sheet, shouldCache) {
        var name = serialized.name;
        var rules = getRules(selector, serialized);

        {
          // in regular mode, we don't set the styles on the inserted cache
          // since we don't need to and that would be wasting memory
          // we return them so that they are rendered in a style tag
          if (shouldCache) {
            cache.inserted[name] = true;
          }

          if ( // using === development instead of !== production
          // because if people do ssr in tests, the source maps showing up would be annoying
          serialized.map !== undefined) {
            return rules + serialized.map;
          }

          return rules;
        }
      };
    }

    var cache = {
      key: key,
      sheet: new StyleSheet({
        key: key,
        container: container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend
      }),
      nonce: options.nonce,
      inserted: inserted,
      registered: {},
      insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
  };

  var createCache$1 = createCache;

  /** @license React v17.0.2
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  if("function"===typeof Symbol&&Symbol.for){var x=Symbol.for;x("react.element");x("react.portal");x("react.fragment");x("react.strict_mode");x("react.profiler");x("react.provider");x("react.context");x("react.forward_ref");x("react.suspense");x("react.suspense_list");x("react.memo");x("react.lazy");x("react.block");x("react.server.block");x("react.fundamental");x("react.debug_trace_mode");x("react.legacy_hidden");}

  var reactIs_development = createCommonjsModule(function (module, exports) {

  {
    (function() {

  // ATTENTION
  // When adding new symbols to this file,
  // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var REACT_ELEMENT_TYPE = 0xeac7;
  var REACT_PORTAL_TYPE = 0xeaca;
  var REACT_FRAGMENT_TYPE = 0xeacb;
  var REACT_STRICT_MODE_TYPE = 0xeacc;
  var REACT_PROFILER_TYPE = 0xead2;
  var REACT_PROVIDER_TYPE = 0xeacd;
  var REACT_CONTEXT_TYPE = 0xeace;
  var REACT_FORWARD_REF_TYPE = 0xead0;
  var REACT_SUSPENSE_TYPE = 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = 0xead8;
  var REACT_MEMO_TYPE = 0xead3;
  var REACT_LAZY_TYPE = 0xead4;
  var REACT_BLOCK_TYPE = 0xead9;
  var REACT_SERVER_BLOCK_TYPE = 0xeada;
  var REACT_FUNDAMENTAL_TYPE = 0xead5;
  var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
  var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

  if (typeof Symbol === 'function' && Symbol.for) {
    var symbolFor = Symbol.for;
    REACT_ELEMENT_TYPE = symbolFor('react.element');
    REACT_PORTAL_TYPE = symbolFor('react.portal');
    REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
    REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
    REACT_PROFILER_TYPE = symbolFor('react.profiler');
    REACT_PROVIDER_TYPE = symbolFor('react.provider');
    REACT_CONTEXT_TYPE = symbolFor('react.context');
    REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
    REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
    REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
    REACT_MEMO_TYPE = symbolFor('react.memo');
    REACT_LAZY_TYPE = symbolFor('react.lazy');
    REACT_BLOCK_TYPE = symbolFor('react.block');
    REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
    REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
    symbolFor('react.scope');
    symbolFor('react.opaque.id');
    REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
    symbolFor('react.offscreen');
    REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
  }

  // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

  var enableScopeAPI = false; // Experimental Create Event Handle API.

  function isValidElementType(type) {
    if (typeof type === 'string' || typeof type === 'function') {
      return true;
    } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


    if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
      return true;
    }

    if (typeof type === 'object' && type !== null) {
      if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
        return true;
      }
    }

    return false;
  }

  function typeOf(object) {
    if (typeof object === 'object' && object !== null) {
      var $$typeof = object.$$typeof;

      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          var type = object.type;

          switch (type) {
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
            case REACT_SUSPENSE_LIST_TYPE:
              return type;

            default:
              var $$typeofType = type && type.$$typeof;

              switch ($$typeofType) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_LAZY_TYPE:
                case REACT_MEMO_TYPE:
                case REACT_PROVIDER_TYPE:
                  return $$typeofType;

                default:
                  return $$typeof;
              }

          }

        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }

    return undefined;
  }
  var ContextConsumer = REACT_CONTEXT_TYPE;
  var ContextProvider = REACT_PROVIDER_TYPE;
  var Element = REACT_ELEMENT_TYPE;
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Fragment = REACT_FRAGMENT_TYPE;
  var Lazy = REACT_LAZY_TYPE;
  var Memo = REACT_MEMO_TYPE;
  var Portal = REACT_PORTAL_TYPE;
  var Profiler = REACT_PROFILER_TYPE;
  var StrictMode = REACT_STRICT_MODE_TYPE;
  var Suspense = REACT_SUSPENSE_TYPE;
  var hasWarnedAboutDeprecatedIsAsyncMode = false;
  var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

  function isAsyncMode(object) {
    {
      if (!hasWarnedAboutDeprecatedIsAsyncMode) {
        hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

        console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
      }
    }

    return false;
  }
  function isConcurrentMode(object) {
    {
      if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
        hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

        console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
      }
    }

    return false;
  }
  function isContextConsumer(object) {
    return typeOf(object) === REACT_CONTEXT_TYPE;
  }
  function isContextProvider(object) {
    return typeOf(object) === REACT_PROVIDER_TYPE;
  }
  function isElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function isForwardRef(object) {
    return typeOf(object) === REACT_FORWARD_REF_TYPE;
  }
  function isFragment(object) {
    return typeOf(object) === REACT_FRAGMENT_TYPE;
  }
  function isLazy(object) {
    return typeOf(object) === REACT_LAZY_TYPE;
  }
  function isMemo(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  }
  function isPortal(object) {
    return typeOf(object) === REACT_PORTAL_TYPE;
  }
  function isProfiler(object) {
    return typeOf(object) === REACT_PROFILER_TYPE;
  }
  function isStrictMode(object) {
    return typeOf(object) === REACT_STRICT_MODE_TYPE;
  }
  function isSuspense(object) {
    return typeOf(object) === REACT_SUSPENSE_TYPE;
  }

  exports.ContextConsumer = ContextConsumer;
  exports.ContextProvider = ContextProvider;
  exports.Element = Element;
  exports.ForwardRef = ForwardRef;
  exports.Fragment = Fragment;
  exports.Lazy = Lazy;
  exports.Memo = Memo;
  exports.Portal = Portal;
  exports.Profiler = Profiler;
  exports.StrictMode = StrictMode;
  exports.Suspense = Suspense;
  exports.isAsyncMode = isAsyncMode;
  exports.isConcurrentMode = isConcurrentMode;
  exports.isContextConsumer = isContextConsumer;
  exports.isContextProvider = isContextProvider;
  exports.isElement = isElement;
  exports.isForwardRef = isForwardRef;
  exports.isFragment = isFragment;
  exports.isLazy = isLazy;
  exports.isMemo = isMemo;
  exports.isPortal = isPortal;
  exports.isProfiler = isProfiler;
  exports.isStrictMode = isStrictMode;
  exports.isSuspense = isSuspense;
  exports.isValidElementType = isValidElementType;
  exports.typeOf = typeOf;
    })();
  }
  });
  reactIs_development.ContextConsumer;
  reactIs_development.ContextProvider;
  reactIs_development.Element;
  reactIs_development.ForwardRef;
  reactIs_development.Fragment;
  reactIs_development.Lazy;
  reactIs_development.Memo;
  reactIs_development.Portal;
  reactIs_development.Profiler;
  reactIs_development.StrictMode;
  reactIs_development.Suspense;
  reactIs_development.isAsyncMode;
  reactIs_development.isConcurrentMode;
  reactIs_development.isContextConsumer;
  reactIs_development.isContextProvider;
  reactIs_development.isElement;
  reactIs_development.isForwardRef;
  reactIs_development.isFragment;
  reactIs_development.isLazy;
  reactIs_development.isMemo;
  reactIs_development.isPortal;
  reactIs_development.isProfiler;
  reactIs_development.isStrictMode;
  reactIs_development.isSuspense;
  reactIs_development.isValidElementType;
  reactIs_development.typeOf;

  var reactIs = createCommonjsModule(function (module) {

  {
    module.exports = reactIs_development;
  }
  });
  var reactIs_1 = reactIs.ForwardRef;
  var reactIs_2 = reactIs.isFragment;
  reactIs.isLazy;
  reactIs.isMemo;
  var reactIs_5 = reactIs.Memo;
  reactIs.isValidElementType;

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above


    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }

  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols$1) {
        keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
      }

      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            // Avoid failures from read-only properties
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }

    return targetComponent;
  }

  var hoistNonReactStatics_cjs = hoistNonReactStatics;

  var isBrowser$3 = typeof document !== 'undefined';
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function (className) {
      if (registered[className] !== undefined) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;

    if ( // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
      cache.registered[className] = serialized.styles;
    }

    if (cache.inserted[serialized.name] === undefined) {
      var stylesForSSR = '';
      var current = serialized;

      do {
        var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

        if (!isBrowser$3 && maybeStyles !== undefined) {
          stylesForSSR += maybeStyles;
        }

        current = current.next;
      } while (current !== undefined);

      if (!isBrowser$3 && stylesForSSR.length !== 0) {
        return stylesForSSR;
      }
    }
  };

  /* eslint-disable */
  // Inspired by https://github.com/garycourt/murmurhash-js
  // Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
  function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash

    var k,
        i = 0,
        len = str.length;

    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
      k =
      /* Math.imul(k, m): */
      (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
      k ^=
      /* k >>> r: */
      k >>> 24;
      h =
      /* Math.imul(k, m): */
      (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Handle the last few bytes of the input array


    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

      case 2:
        h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

      case 1:
        h ^= str.charCodeAt(i) & 0xff;
        h =
        /* Math.imul(h, m): */
        (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.


    h ^= h >>> 13;
    h =
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }

  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };

  var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

  var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
  };

  var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== 'boolean';
  };

  var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
  });

  var processStyleValue = function processStyleValue(key, value) {
    switch (key) {
      case 'animation':
      case 'animationName':
        {
          if (typeof value === 'string') {
            return value.replace(animationRegex, function (match, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
    }

    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
      return value + 'px';
    }

    return value;
  };

  {
    var contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
    var oldProcessStyleValue = processStyleValue;
    var msPattern = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    var hyphenatedCache = {};

    processStyleValue = function processStyleValue(key, value) {
      if (key === 'content') {
        if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }

      var processed = oldProcessStyleValue(key, value);

      if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }

      return processed;
    };
  }

  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return '';
    }

    if (interpolation.__emotion_styles !== undefined) {
      if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
        throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
      }

      return interpolation;
    }

    switch (typeof interpolation) {
      case 'boolean':
        {
          return '';
        }

      case 'object':
        {
          if (interpolation.anim === 1) {
            cursor = {
              name: interpolation.name,
              styles: interpolation.styles,
              next: cursor
            };
            return interpolation.name;
          }

          if (interpolation.styles !== undefined) {
            var next = interpolation.next;

            if (next !== undefined) {
              // not the most efficient thing ever but this is a pretty rare case
              // and there will be very few iterations of this generally
              while (next !== undefined) {
                cursor = {
                  name: next.name,
                  styles: next.styles,
                  next: cursor
                };
                next = next.next;
              }
            }

            var styles = interpolation.styles + ";";

            if (interpolation.map !== undefined) {
              styles += interpolation.map;
            }

            return styles;
          }

          return createStringFromObject(mergedProps, registered, interpolation);
        }

      case 'function':
        {
          if (mergedProps !== undefined) {
            var previousCursor = cursor;
            var result = interpolation(mergedProps);
            cursor = previousCursor;
            return handleInterpolation(mergedProps, registered, result);
          } else {
            console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
          }

          break;
        }

      case 'string':
        {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
            return "${" + fakeVarName + "}";
          });

          if (matched.length) {
            console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
          }
        }

        break;
    } // finalize string values (regular strings and functions interpolated into css calls)


    if (registered == null) {
      return interpolation;
    }

    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
  }

  function createStringFromObject(mergedProps, registered, obj) {
    var string = '';

    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];

        if (typeof value !== 'object') {
          if (registered != null && registered[value] !== undefined) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
            throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
          }

          if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);

            switch (_key) {
              case 'animation':
              case 'animationName':
                {
                  string += processStyleName(_key) + ":" + interpolated + ";";
                  break;
                }

              default:
                {
                  if (_key === 'undefined') {
                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                  }

                  string += _key + "{" + interpolated + "}";
                }
            }
          }
        }
      }
    }

    return string;
  }

  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;

  {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  } // this is the cursor for keyframes
  // keyframes are stored on the SerializedStyles object as a linked list


  var cursor;
  var serializeStyles = function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
      return args[0];
    }

    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];

    if (strings == null || strings.raw === undefined) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === undefined) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
      }

      styles += strings[0];
    } // we start at 1 since we've already handled the first arg


    for (var i = 1; i < args.length; i++) {
      styles += handleInterpolation(mergedProps, registered, args[i]);

      if (stringMode) {
        if (strings[i] === undefined) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
        }

        styles += strings[i];
      }
    }

    var sourceMap;

    {
      styles = styles.replace(sourceMapPattern, function (match) {
        sourceMap = match;
        return '';
      });
    } // using a global regex with .exec is stateful so lastIndex has to be reset each time


    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

    while ((match = labelPattern.exec(styles)) !== null) {
      identifierName += '-' + // $FlowFixMe we know it's not null
      match[1];
    }

    var name = murmur2(styles) + identifierName;

    {
      // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
      return {
        name: name,
        styles: styles,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
  };

  var isBrowser$2 = typeof document !== 'undefined';
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

  var EmotionCacheContext = /* #__PURE__ */React.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache$1({
    key: 'css'
  }) : null);

  {
    EmotionCacheContext.displayName = 'EmotionCacheContext';
  }

  var CacheProvider = EmotionCacheContext.Provider;

  var withEmotionCache = function withEmotionCache(func) {
    // $FlowFixMe
    return /*#__PURE__*/React.forwardRef(function (props, ref) {
      // the cache will never be null in the browser
      var cache = React.useContext(EmotionCacheContext);
      return func(props, cache, ref);
    });
  };

  if (!isBrowser$2) {
    withEmotionCache = function withEmotionCache(func) {
      return function (props) {
        var cache = React.useContext(EmotionCacheContext);

        if (cache === null) {
          // yes, we're potentially creating this on every render
          // it doesn't actually matter though since it's only on the server
          // so there will only every be a single render
          // that could change in the future because of suspense and etc. but for now,
          // this works and i don't want to optimise for a future thing that we aren't sure about
          cache = createCache$1({
            key: 'css'
          });
          return /*#__PURE__*/React.createElement(EmotionCacheContext.Provider, {
            value: cache
          }, func(props, cache));
        } else {
          return func(props, cache);
        }
      };
    };
  }

  var ThemeContext$2 = /* #__PURE__ */React.createContext({});

  {
    ThemeContext$2.displayName = 'EmotionThemeContext';
  }

  var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
  var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
  var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible

    if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
      cssProp = cache.registered[cssProp];
    }

    var type = props[typePropName];
    var registeredStyles = [cssProp];
    var className = '';

    if (typeof props.className === 'string') {
      className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }

    var serialized = serializeStyles(registeredStyles, undefined, React.useContext(ThemeContext$2));

    if (serialized.name.indexOf('-') === -1) {
      var labelFromStack = props[labelPropName];

      if (labelFromStack) {
        serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);
      }
    }

    var rules = insertStyles(cache, serialized, typeof type === 'string');
    className += cache.key + "-" + serialized.name;
    var newProps = {};

    for (var key in props) {
      if (hasOwnProperty$1.call(props, key) && key !== 'css' && key !== typePropName && (key !== labelPropName)) {
        newProps[key] = props[key];
      }
    }

    newProps.ref = ref;
    newProps.className = className;
    var ele = /*#__PURE__*/React.createElement(type, newProps);

    if (!isBrowser$2 && rules !== undefined) {
      var _ref;

      var serializedNames = serialized.name;
      var next = serialized.next;

      while (next !== undefined) {
        serializedNames += ' ' + next.name;
        next = next.next;
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + " " + serializedNames, _ref.dangerouslySetInnerHTML = {
        __html: rules
      }, _ref.nonce = cache.sheet.nonce, _ref)), ele);
    }

    return ele;
  });

  {
    Emotion.displayName = 'EmotionCssPropInternal';
  }

  var pkg = {
  	name: "@emotion/react",
  	version: "11.5.0",
  	main: "dist/emotion-react.cjs.js",
  	module: "dist/emotion-react.esm.js",
  	browser: {
  		"./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
  		"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  	},
  	types: "types/index.d.ts",
  	files: [
  		"src",
  		"dist",
  		"jsx-runtime",
  		"jsx-dev-runtime",
  		"isolated-hoist-non-react-statics-do-not-use-this-in-your-code",
  		"types/*.d.ts",
  		"macro.js",
  		"macro.d.ts",
  		"macro.js.flow"
  	],
  	sideEffects: false,
  	author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
  	license: "MIT",
  	scripts: {
  		"test:typescript": "dtslint types"
  	},
  	dependencies: {
  		"@babel/runtime": "^7.13.10",
  		"@emotion/cache": "^11.5.0",
  		"@emotion/serialize": "^1.0.2",
  		"@emotion/sheet": "^1.0.3",
  		"@emotion/utils": "^1.0.0",
  		"@emotion/weak-memoize": "^0.2.5",
  		"hoist-non-react-statics": "^3.3.1"
  	},
  	peerDependencies: {
  		"@babel/core": "^7.0.0",
  		react: ">=16.8.0"
  	},
  	peerDependenciesMeta: {
  		"@babel/core": {
  			optional: true
  		},
  		"@types/react": {
  			optional: true
  		}
  	},
  	devDependencies: {
  		"@babel/core": "^7.13.10",
  		"@emotion/css": "11.5.0",
  		"@emotion/css-prettifier": "1.0.0",
  		"@emotion/server": "11.4.0",
  		"@emotion/styled": "11.3.0",
  		"@types/react": "^16.9.11",
  		dtslint: "^0.3.0",
  		"html-tag-names": "^1.1.2",
  		react: "16.14.0",
  		"svg-tag-names": "^1.1.1"
  	},
  	repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  	publishConfig: {
  		access: "public"
  	},
  	"umd:main": "dist/emotion-react.umd.min.js",
  	preconstruct: {
  		entrypoints: [
  			"./index.js",
  			"./jsx-runtime.js",
  			"./jsx-dev-runtime.js",
  			"./isolated-hoist-non-react-statics-do-not-use-this-in-your-code.js"
  		],
  		umdName: "emotionReact"
  	}
  };

  var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
  // initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
  // initial client-side render from SSR, use place of hydrating tag

  var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
    if (!warnedAboutCssPropForGlobal && ( // check for className as well since the user is
    // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }

    var styles = props.styles;
    var serialized = serializeStyles([styles], undefined, React.useContext(ThemeContext$2));

    if (!isBrowser$2) {
      var _ref;

      var serializedNames = serialized.name;
      var serializedStyles = serialized.styles;
      var next = serialized.next;

      while (next !== undefined) {
        serializedNames += ' ' + next.name;
        serializedStyles += next.styles;
        next = next.next;
      }

      var shouldCache = cache.compat === true;
      var rules = cache.insert("", {
        name: serializedNames,
        styles: serializedStyles
      }, cache.sheet, shouldCache);

      if (shouldCache) {
        return null;
      }

      return /*#__PURE__*/React.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
        __html: rules
      }, _ref.nonce = cache.sheet.nonce, _ref));
    } // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything


    var sheetRef = React.useRef();
    React.useLayoutEffect(function () {
      var key = cache.key + "-global";
      var sheet = new StyleSheet({
        key: key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      });
      var rehydrating = false; // $FlowFixMe

      var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

      if (cache.sheet.tags.length) {
        sheet.before = cache.sheet.tags[0];
      }

      if (node !== null) {
        rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

        node.setAttribute('data-emotion', key);
        sheet.hydrate([node]);
      }

      sheetRef.current = [sheet, rehydrating];
      return function () {
        sheet.flush();
      };
    }, [cache]);
    React.useLayoutEffect(function () {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0],
          rehydrating = sheetRefCurrent[1];

      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }

      if (serialized.next !== undefined) {
        // insert keyframes
        insertStyles(cache, serialized.next, true);
      }

      if (sheet.tags.length) {
        // if this doesn't exist then it will be null so the style element will be appended
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }

      cache.insert("", serialized, sheet, false);
    }, [cache, serialized.name]);
    return null;
  });

  {
    Global.displayName = 'EmotionGlobal';
  }

  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return serializeStyles(args);
  }

  var keyframes = function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe

    return {
      name: name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };

  var classnames = function classnames(args) {
    var len = args.length;
    var i = 0;
    var cls = '';

    for (; i < len; i++) {
      var arg = args[i];
      if (arg == null) continue;
      var toAdd = void 0;

      switch (typeof arg) {
        case 'boolean':
          break;

        case 'object':
          {
            if (Array.isArray(arg)) {
              toAdd = classnames(arg);
            } else {
              if (arg.styles !== undefined && arg.name !== undefined) {
                console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
              }

              toAdd = '';

              for (var k in arg) {
                if (arg[k] && k) {
                  toAdd && (toAdd += ' ');
                  toAdd += k;
                }
              }
            }

            break;
          }

        default:
          {
            toAdd = arg;
          }
      }

      if (toAdd) {
        cls && (cls += ' ');
        cls += toAdd;
      }
    }

    return cls;
  };

  function merge$1(registered, css, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

    if (registeredStyles.length < 2) {
      return className;
    }

    return rawClassName + css(registeredStyles);
  }

  var ClassNames = /* #__PURE__ */withEmotionCache(function (props, cache) {
    var rules = '';
    var serializedHashes = '';
    var hasRendered = false;

    var css = function css() {
      if (hasRendered && "development" !== 'production') {
        throw new Error('css can only be used during render');
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var serialized = serializeStyles(args, cache.registered);

      if (isBrowser$2) {
        insertStyles(cache, serialized, false);
      } else {
        var res = insertStyles(cache, serialized, false);

        if (res !== undefined) {
          rules += res;
        }
      }

      if (!isBrowser$2) {
        serializedHashes += " " + serialized.name;
      }

      return cache.key + "-" + serialized.name;
    };

    var cx = function cx() {
      if (hasRendered && "development" !== 'production') {
        throw new Error('cx can only be used during render');
      }

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return merge$1(cache.registered, css, classnames(args));
    };

    var content = {
      css: css,
      cx: cx,
      theme: React.useContext(ThemeContext$2)
    };
    var ele = props.children(content);
    hasRendered = true;

    if (!isBrowser$2 && rules.length !== 0) {
      var _ref;

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + " " + serializedHashes.substring(1), _ref.dangerouslySetInnerHTML = {
        __html: rules
      }, _ref.nonce = cache.sheet.nonce, _ref)), ele);
    }

    return ele;
  });

  {
    ClassNames.displayName = 'EmotionClassNames';
  }

  {
    var isBrowser$1 = typeof document !== 'undefined'; // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock

    var isJest = typeof jest !== 'undefined';

    if (isBrowser$1 && !isJest) {
      // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
      var globalContext = // $FlowIgnore
      typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
      : isBrowser$1 ? window : global$1;
      var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

      if (globalContext[globalKey]) {
        console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
      }

      globalContext[globalKey] = true;
    }
  }

  var testOmitPropsOnStringTag = isPropValid;

  var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
    return key !== 'theme';
  };

  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
    return typeof tag === 'string' && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
    var shouldForwardProp;

    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }

    if (typeof shouldForwardProp !== 'function' && isReal) {
      shouldForwardProp = tag.__emotion_forwardProp;
    }

    return shouldForwardProp;
  };

  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
  var isBrowser = typeof document !== 'undefined';

  var createStyled$1 = function createStyled(tag, options) {
    {
      if (tag === undefined) {
        throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
      }
    }

    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;

    if (options !== undefined) {
      identifierName = options.label;
      targetClassName = options.target;
    }

    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp('as');
    return function () {
      var args = arguments;
      var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

      if (identifierName !== undefined) {
        styles.push("label:" + identifierName + ";");
      }

      if (args[0] == null || args[0].raw === undefined) {
        styles.push.apply(styles, args);
      } else {
        if (args[0][0] === undefined) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }

        styles.push(args[0][0]);
        var len = args.length;
        var i = 1;

        for (; i < len; i++) {
          if (args[0][i] === undefined) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }

          styles.push(args[i], args[0][i]);
        }
      } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


      var Styled = withEmotionCache(function (props, cache, ref) {
        var finalTag = shouldUseAs && props.as || baseTag;
        var className = '';
        var classInterpolations = [];
        var mergedProps = props;

        if (props.theme == null) {
          mergedProps = {};

          for (var key in props) {
            mergedProps[key] = props[key];
          }

          mergedProps.theme = React.useContext(ThemeContext$2);
        }

        if (typeof props.className === 'string') {
          className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }

        var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
        var rules = insertStyles(cache, serialized, typeof finalTag === 'string');
        className += cache.key + "-" + serialized.name;

        if (targetClassName !== undefined) {
          className += " " + targetClassName;
        }

        var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
        var newProps = {};

        for (var _key in props) {
          if (shouldUseAs && _key === 'as') continue;

          if ( // $FlowFixMe
          finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }

        newProps.className = className;
        newProps.ref = ref;
        var ele = /*#__PURE__*/React.createElement(finalTag, newProps);

        if (!isBrowser && rules !== undefined) {
          var _ref;

          var serializedNames = serialized.name;
          var next = serialized.next;

          while (next !== undefined) {
            serializedNames += ' ' + next.name;
            next = next.next;
          }

          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + " " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache.sheet.nonce, _ref)), ele);
        }

        return ele;
      });
      Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles;
      Styled.__emotion_forwardProp = shouldForwardProp;
      Object.defineProperty(Styled, 'toString', {
        value: function value() {
          if (targetClassName === undefined && "development" !== 'production') {
            return 'NO_COMPONENT_SELECTOR';
          } // $FlowFixMe: coerce undefined to string


          return "." + targetClassName;
        }
      });

      Styled.withComponent = function (nextTag, nextOptions) {
        return createStyled(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles);
      };

      return Styled;
    };
  };

  var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
  'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

  var newStyled = createStyled$1.bind();
  tags.forEach(function (tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
  });

  var emStyled = newStyled;

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

  var printWarning$1 = function() {};

  {
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);

    printWarning$1 = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$1(typeSpecs, typeSpecName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error(
                (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
              );
              err.name = 'Invariant Violation';
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning$1(
              (componentName || 'React class') + ': type specification of ' +
              location + ' `' + typeSpecName + '` is invalid; the type checker ' +
              'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
              'You may have forgotten to pass an argument to the type checker ' +
              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
              'shape all require an argument).'
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;

            var stack = getStack ? getStack() : '';

            printWarning$1(
              'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
            );
          }
        }
      }
    }
  }

  /**
   * Resets warning cache when testing.
   *
   * @private
   */
  checkPropTypes.resetWarningCache = function() {
    {
      loggedTypeFailures = {};
    }
  };

  var checkPropTypes_1 = checkPropTypes;

  var has = Function.call.bind(Object.prototype.hasOwnProperty);
  var printWarning = function() {};

  {
    printWarning = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>';

    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker,
    };

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret_1) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
              'Use `PropTypes.checkPropTypes()` to call them. ' +
              'Read more at http://fb.me/use-check-prop-types'
            );
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;
            if (
              !manualPropTypeCallCache[cacheKey] &&
              // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3
            ) {
              printWarning(
                'You are manually calling a React.PropTypes validation ' +
                'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                'and will throw in the standalone `prop-types` package. ' +
                'You may be seeing this warning due to a third-party PropTypes ' +
                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);

      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!reactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning(
              'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
              'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
            );
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }
        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);
          if (type === 'symbol') {
            return String(value);
          }
          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          printWarning(
            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
            'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
          );
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        // We need to check all keys in case some are required but missing from
        // props.
        var allKeys = objectAssign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (!checker) {
            return new PropTypeError(
              'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
              '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
              '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error) {
            return error;
          }
        }
        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;
        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      }

      // falsy value can't be a Symbol
      if (!propValue) {
        return false;
      }

      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }

    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes_1;
    ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };

  var propTypes = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var ReactIs = reactIs;

    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }
  });
  propTypes.elementType;
  propTypes.bool;
  propTypes.func;
  propTypes.object;
  propTypes.oneOfType;
  propTypes.element;

  var reactJsxRuntime_production_min = createCommonjsModule(function (module, exports) {
  var g=60103;exports.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element");exports.Fragment=h("react.fragment");}var m=React__default["default"].__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};
  function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;
  });
  reactJsxRuntime_production_min.Fragment;
  reactJsxRuntime_production_min.jsx;
  reactJsxRuntime_production_min.jsxs;

  var reactJsxRuntime_development = createCommonjsModule(function (module, exports) {

  {
    (function() {

  var React = React__default["default"];
  var _assign = objectAssign;

  // ATTENTION
  // When adding new symbols to this file,
  // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var REACT_ELEMENT_TYPE = 0xeac7;
  var REACT_PORTAL_TYPE = 0xeaca;
  exports.Fragment = 0xeacb;
  var REACT_STRICT_MODE_TYPE = 0xeacc;
  var REACT_PROFILER_TYPE = 0xead2;
  var REACT_PROVIDER_TYPE = 0xeacd;
  var REACT_CONTEXT_TYPE = 0xeace;
  var REACT_FORWARD_REF_TYPE = 0xead0;
  var REACT_SUSPENSE_TYPE = 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = 0xead8;
  var REACT_MEMO_TYPE = 0xead3;
  var REACT_LAZY_TYPE = 0xead4;
  var REACT_BLOCK_TYPE = 0xead9;
  var REACT_SERVER_BLOCK_TYPE = 0xeada;
  var REACT_FUNDAMENTAL_TYPE = 0xead5;
  var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
  var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

  if (typeof Symbol === 'function' && Symbol.for) {
    var symbolFor = Symbol.for;
    REACT_ELEMENT_TYPE = symbolFor('react.element');
    REACT_PORTAL_TYPE = symbolFor('react.portal');
    exports.Fragment = symbolFor('react.fragment');
    REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
    REACT_PROFILER_TYPE = symbolFor('react.profiler');
    REACT_PROVIDER_TYPE = symbolFor('react.provider');
    REACT_CONTEXT_TYPE = symbolFor('react.context');
    REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
    REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
    REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
    REACT_MEMO_TYPE = symbolFor('react.memo');
    REACT_LAZY_TYPE = symbolFor('react.lazy');
    REACT_BLOCK_TYPE = symbolFor('react.block');
    REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
    REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
    symbolFor('react.scope');
    symbolFor('react.opaque.id');
    REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
    symbolFor('react.offscreen');
    REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
  }

  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    if (maybeIterable === null || typeof maybeIterable !== 'object') {
      return null;
    }

    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

    if (typeof maybeIterator === 'function') {
      return maybeIterator;
    }

    return null;
  }

  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  function error(format) {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }

  function printWarning(level, format, args) {
    // When changing this logic, you might want to also
    // update consoleWithStackDev.www.js as well.
    {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }

      var argsWithFormat = args.map(function (item) {
        return '' + item;
      }); // Careful: RN currently depends on this prefix

      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610
      // eslint-disable-next-line react-internal/no-production-logging

      Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
  }

  // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

  var enableScopeAPI = false; // Experimental Create Event Handle API.

  function isValidElementType(type) {
    if (typeof type === 'string' || typeof type === 'function') {
      return true;
    } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


    if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
      return true;
    }

    if (typeof type === 'object' && type !== null) {
      if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
        return true;
      }
    }

    return false;
  }

  function getWrappedName(outerType, innerType, wrapperName) {
    var functionName = innerType.displayName || innerType.name || '';
    return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
  }

  function getContextName(type) {
    return type.displayName || 'Context';
  }

  function getComponentName(type) {
    if (type == null) {
      // Host root, text node or just invalid type.
      return null;
    }

    {
      if (typeof type.tag === 'number') {
        error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
      }
    }

    if (typeof type === 'function') {
      return type.displayName || type.name || null;
    }

    if (typeof type === 'string') {
      return type;
    }

    switch (type) {
      case exports.Fragment:
        return 'Fragment';

      case REACT_PORTAL_TYPE:
        return 'Portal';

      case REACT_PROFILER_TYPE:
        return 'Profiler';

      case REACT_STRICT_MODE_TYPE:
        return 'StrictMode';

      case REACT_SUSPENSE_TYPE:
        return 'Suspense';

      case REACT_SUSPENSE_LIST_TYPE:
        return 'SuspenseList';
    }

    if (typeof type === 'object') {
      switch (type.$$typeof) {
        case REACT_CONTEXT_TYPE:
          var context = type;
          return getContextName(context) + '.Consumer';

        case REACT_PROVIDER_TYPE:
          var provider = type;
          return getContextName(provider._context) + '.Provider';

        case REACT_FORWARD_REF_TYPE:
          return getWrappedName(type, type.render, 'ForwardRef');

        case REACT_MEMO_TYPE:
          return getComponentName(type.type);

        case REACT_BLOCK_TYPE:
          return getComponentName(type._render);

        case REACT_LAZY_TYPE:
          {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;

            try {
              return getComponentName(init(payload));
            } catch (x) {
              return null;
            }
          }
      }
    }

    return null;
  }

  // Helpers to patch console.logs to avoid logging during side-effect free
  // replaying on render function. This currently only patches the object
  // lazily which won't cover if the log function was extracted eagerly.
  // We could also eagerly patch the method.
  var disabledDepth = 0;
  var prevLog;
  var prevInfo;
  var prevWarn;
  var prevError;
  var prevGroup;
  var prevGroupCollapsed;
  var prevGroupEnd;

  function disabledLog() {}

  disabledLog.__reactDisabledLog = true;
  function disableLogs() {
    {
      if (disabledDepth === 0) {
        /* eslint-disable react-internal/no-production-logging */
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

        var props = {
          configurable: true,
          enumerable: true,
          value: disabledLog,
          writable: true
        }; // $FlowFixMe Flow thinks console is immutable.

        Object.defineProperties(console, {
          info: props,
          log: props,
          warn: props,
          error: props,
          group: props,
          groupCollapsed: props,
          groupEnd: props
        });
        /* eslint-enable react-internal/no-production-logging */
      }

      disabledDepth++;
    }
  }
  function reenableLogs() {
    {
      disabledDepth--;

      if (disabledDepth === 0) {
        /* eslint-disable react-internal/no-production-logging */
        var props = {
          configurable: true,
          enumerable: true,
          writable: true
        }; // $FlowFixMe Flow thinks console is immutable.

        Object.defineProperties(console, {
          log: _assign({}, props, {
            value: prevLog
          }),
          info: _assign({}, props, {
            value: prevInfo
          }),
          warn: _assign({}, props, {
            value: prevWarn
          }),
          error: _assign({}, props, {
            value: prevError
          }),
          group: _assign({}, props, {
            value: prevGroup
          }),
          groupCollapsed: _assign({}, props, {
            value: prevGroupCollapsed
          }),
          groupEnd: _assign({}, props, {
            value: prevGroupEnd
          })
        });
        /* eslint-enable react-internal/no-production-logging */
      }

      if (disabledDepth < 0) {
        error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
      }
    }
  }

  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  var prefix;
  function describeBuiltInComponentFrame(name, source, ownerFn) {
    {
      if (prefix === undefined) {
        // Extract the VM specific prefix used by each line.
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = match && match[1] || '';
        }
      } // We use the prefix to ensure our stacks line up with native stack frames.


      return '\n' + prefix + name;
    }
  }
  var reentry = false;
  var componentFrameCache;

  {
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
  }

  function describeNativeComponentFrame(fn, construct) {
    // If something asked for a stack inside a fake render, it should get ignored.
    if (!fn || reentry) {
      return '';
    }

    {
      var frame = componentFrameCache.get(fn);

      if (frame !== undefined) {
        return frame;
      }
    }

    var control;
    reentry = true;
    var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

    Error.prepareStackTrace = undefined;
    var previousDispatcher;

    {
      previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
      // for warnings.

      ReactCurrentDispatcher.current = null;
      disableLogs();
    }

    try {
      // This should throw.
      if (construct) {
        // Something should be setting the props in the constructor.
        var Fake = function () {
          throw Error();
        }; // $FlowFixMe


        Object.defineProperty(Fake.prototype, 'props', {
          set: function () {
            // We use a throwing setter instead of frozen or non-writable props
            // because that won't throw in a non-strict mode function.
            throw Error();
          }
        });

        if (typeof Reflect === 'object' && Reflect.construct) {
          // We construct a different control for this case to include any extra
          // frames added by the construct call.
          try {
            Reflect.construct(Fake, []);
          } catch (x) {
            control = x;
          }

          Reflect.construct(fn, [], Fake);
        } else {
          try {
            Fake.call();
          } catch (x) {
            control = x;
          }

          fn.call(Fake.prototype);
        }
      } else {
        try {
          throw Error();
        } catch (x) {
          control = x;
        }

        fn();
      }
    } catch (sample) {
      // This is inlined manually because closure doesn't do it for us.
      if (sample && control && typeof sample.stack === 'string') {
        // This extracts the first frame from the sample that isn't also in the control.
        // Skipping one frame that we assume is the frame that calls the two.
        var sampleLines = sample.stack.split('\n');
        var controlLines = control.stack.split('\n');
        var s = sampleLines.length - 1;
        var c = controlLines.length - 1;

        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
          // We expect at least one stack frame to be shared.
          // Typically this will be the root most one. However, stack frames may be
          // cut off due to maximum stack limits. In this case, one maybe cut off
          // earlier than the other. We assume that the sample is longer or the same
          // and there for cut off earlier. So we should find the root most frame in
          // the sample somewhere in the control.
          c--;
        }

        for (; s >= 1 && c >= 0; s--, c--) {
          // Next we find the first one that isn't the same which should be the
          // frame that called our sample function and the control.
          if (sampleLines[s] !== controlLines[c]) {
            // In V8, the first line is describing the message but other VMs don't.
            // If we're about to return the first line, and the control is also on the same
            // line, that's a pretty good indicator that our sample threw at same line as
            // the control. I.e. before we entered the sample frame. So we ignore this result.
            // This can happen if you passed a class to function component, or non-function.
            if (s !== 1 || c !== 1) {
              do {
                s--;
                c--; // We may still have similar intermediate frames from the construct call.
                // The next one that isn't the same should be our match though.

                if (c < 0 || sampleLines[s] !== controlLines[c]) {
                  // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                  var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                  {
                    if (typeof fn === 'function') {
                      componentFrameCache.set(fn, _frame);
                    }
                  } // Return the line we found.


                  return _frame;
                }
              } while (s >= 1 && c >= 0);
            }

            break;
          }
        }
      }
    } finally {
      reentry = false;

      {
        ReactCurrentDispatcher.current = previousDispatcher;
        reenableLogs();
      }

      Error.prepareStackTrace = previousPrepareStackTrace;
    } // Fallback to just using the name if we couldn't make it throw.


    var name = fn ? fn.displayName || fn.name : '';
    var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

    {
      if (typeof fn === 'function') {
        componentFrameCache.set(fn, syntheticFrame);
      }
    }

    return syntheticFrame;
  }
  function describeFunctionComponentFrame(fn, source, ownerFn) {
    {
      return describeNativeComponentFrame(fn, false);
    }
  }

  function shouldConstruct(Component) {
    var prototype = Component.prototype;
    return !!(prototype && prototype.isReactComponent);
  }

  function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

    if (type == null) {
      return '';
    }

    if (typeof type === 'function') {
      {
        return describeNativeComponentFrame(type, shouldConstruct(type));
      }
    }

    if (typeof type === 'string') {
      return describeBuiltInComponentFrame(type);
    }

    switch (type) {
      case REACT_SUSPENSE_TYPE:
        return describeBuiltInComponentFrame('Suspense');

      case REACT_SUSPENSE_LIST_TYPE:
        return describeBuiltInComponentFrame('SuspenseList');
    }

    if (typeof type === 'object') {
      switch (type.$$typeof) {
        case REACT_FORWARD_REF_TYPE:
          return describeFunctionComponentFrame(type.render);

        case REACT_MEMO_TYPE:
          // Memo may contain any component type so we recursively resolve it.
          return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

        case REACT_BLOCK_TYPE:
          return describeFunctionComponentFrame(type._render);

        case REACT_LAZY_TYPE:
          {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;

            try {
              // Lazy may contain any component type so we recursively resolve it.
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {}
          }
      }
    }

    return '';
  }

  var loggedTypeFailures = {};
  var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

  function setCurrentlyValidatingElement(element) {
    {
      if (element) {
        var owner = element._owner;
        var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame.setExtraStackFrame(stack);
      } else {
        ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
    }
  }

  function checkPropTypes(typeSpecs, values, location, componentName, element) {
    {
      // $FlowFixMe This is okay but Flow doesn't know it.
      var has = Function.call.bind(Object.prototype.hasOwnProperty);

      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.

          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
          } catch (ex) {
            error$1 = ex;
          }

          if (error$1 && !(error$1 instanceof Error)) {
            setCurrentlyValidatingElement(element);

            error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

            setCurrentlyValidatingElement(null);
          }

          if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error$1.message] = true;
            setCurrentlyValidatingElement(element);

            error('Failed %s type: %s', location, error$1.message);

            setCurrentlyValidatingElement(null);
          }
        }
      }
    }
  }

  var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };
  var specialPropKeyWarningShown;
  var specialPropRefWarningShown;
  var didWarnAboutStringRefs;

  {
    didWarnAboutStringRefs = {};
  }

  function hasValidRef(config) {
    {
      if (hasOwnProperty.call(config, 'ref')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }

    return config.ref !== undefined;
  }

  function hasValidKey(config) {
    {
      if (hasOwnProperty.call(config, 'key')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }

    return config.key !== undefined;
  }

  function warnIfStringRefCannotBeAutoConverted(config, self) {
    {
      if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
        var componentName = getComponentName(ReactCurrentOwner.current.type);

        if (!didWarnAboutStringRefs[componentName]) {
          error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }
  }

  function defineKeyPropWarningGetter(props, displayName) {
    {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;

          error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
  }

  function defineRefPropWarningGetter(props, displayName) {
    {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;

          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
  }
  /**
   * Factory method to create a new React element. This no longer adheres to
   * the class pattern, so do not use new to call it. Also, instanceof check
   * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
   * if something is a React Element.
   *
   * @param {*} type
   * @param {*} props
   * @param {*} key
   * @param {string|object} ref
   * @param {*} owner
   * @param {*} self A *temporary* helper to detect places where `this` is
   * different from the `owner` when React.createElement is called, so that we
   * can warn. We want to get rid of owner and replace string `ref`s with arrow
   * functions, and as long as `this` and owner are the same, there will be no
   * change in behavior.
   * @param {*} source An annotation object (added by a transpiler or otherwise)
   * indicating filename, line number, and/or other information.
   * @internal
   */


  var ReactElement = function (type, key, ref, self, source, owner, props) {
    var element = {
      // This tag allows us to uniquely identify this as a React Element
      $$typeof: REACT_ELEMENT_TYPE,
      // Built-in properties that belong on the element
      type: type,
      key: key,
      ref: ref,
      props: props,
      // Record the component responsible for creating this element.
      _owner: owner
    };

    {
      // The validation flag is currently mutative. We put it on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
      // the validation flag non-enumerable (where possible, which should
      // include every environment we run tests in), so the test framework
      // ignores it.

      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      }); // self and source are DEV only properties.

      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      }); // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.

      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });

      if (Object.freeze) {
        Object.freeze(element.props);
        Object.freeze(element);
      }
    }

    return element;
  };
  /**
   * https://github.com/reactjs/rfcs/pull/107
   * @param {*} type
   * @param {object} props
   * @param {string} key
   */

  function jsxDEV(type, config, maybeKey, source, self) {
    {
      var propName; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null; // Currently, key can be spread in as a prop. This causes a potential
      // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
      // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
      // but as an intermediary step, we will use jsxDEV for everything except
      // <div {...props} key="Hi" />, because we aren't currently able to tell if
      // key is explicitly declared to be undefined or not.

      if (maybeKey !== undefined) {
        key = '' + maybeKey;
      }

      if (hasValidKey(config)) {
        key = '' + config.key;
      }

      if (hasValidRef(config)) {
        ref = config.ref;
        warnIfStringRefCannotBeAutoConverted(config, self);
      } // Remaining properties are added to a new props object


      for (propName in config) {
        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      if (key || ref) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }

        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }

      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
  }

  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
  var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

  function setCurrentlyValidatingElement$1(element) {
    {
      if (element) {
        var owner = element._owner;
        var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
      } else {
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
    }
  }

  var propTypesMisspellWarningShown;

  {
    propTypesMisspellWarningShown = false;
  }
  /**
   * Verifies the object is a ReactElement.
   * See https://reactjs.org/docs/react-api.html#isvalidelement
   * @param {?object} object
   * @return {boolean} True if `object` is a ReactElement.
   * @final
   */

  function isValidElement(object) {
    {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
  }

  function getDeclarationErrorAddendum() {
    {
      if (ReactCurrentOwner$1.current) {
        var name = getComponentName(ReactCurrentOwner$1.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }
  }

  function getSourceInfoErrorAddendum(source) {
    {
      if (source !== undefined) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
  }
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */


  var ownerHasKeyUseWarning = {};

  function getCurrentComponentErrorInfo(parentType) {
    {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
      }

      return info;
    }
  }
  /**
   * Warn if the element doesn't have an explicit key assigned to it.
   * This element is in an array. The array could grow and shrink or be
   * reordered. All children that haven't already been validated are required to
   * have a "key" property assigned to it. Error statuses are cached so a warning
   * will only be shown once.
   *
   * @internal
   * @param {ReactElement} element Element that requires a key.
   * @param {*} parentType element's parent's type.
   */


  function validateExplicitKey(element, parentType) {
    {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
        // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
      }

      setCurrentlyValidatingElement$1(element);

      error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

      setCurrentlyValidatingElement$1(null);
    }
  }
  /**
   * Ensure that every element either is passed in a static location, in an
   * array with an explicit keys property defined, or in an object literal
   * with valid key property.
   *
   * @internal
   * @param {ReactNode} node Statically passed child of any type.
   * @param {*} parentType node's parent's type.
   */


  function validateChildKeys(node, parentType) {
    {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
  }
  /**
   * Given an element, validate that its props follow the propTypes definition,
   * provided by the type.
   *
   * @param {ReactElement} element
   */


  function validatePropTypes(element) {
    {
      var type = element.type;

      if (type === null || type === undefined || typeof type === 'string') {
        return;
      }

      var propTypes;

      if (typeof type === 'function') {
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
      // Inner props are checked in the reconciler.
      type.$$typeof === REACT_MEMO_TYPE)) {
        propTypes = type.propTypes;
      } else {
        return;
      }

      if (propTypes) {
        // Intentionally inside to avoid triggering lazy initializers:
        var name = getComponentName(type);
        checkPropTypes(propTypes, element.props, 'prop', name, element);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

        var _name = getComponentName(type);

        error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
      }

      if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
        error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
      }
    }
  }
  /**
   * Given a fragment, validate that it can only be provided with fragment props
   * @param {ReactElement} fragment
   */


  function validateFragmentProps(fragment) {
    {
      var keys = Object.keys(fragment.props);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key !== 'children' && key !== 'key') {
          setCurrentlyValidatingElement$1(fragment);

          error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

          setCurrentlyValidatingElement$1(null);
          break;
        }
      }

      if (fragment.ref !== null) {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid attribute `ref` supplied to `React.Fragment`.');

        setCurrentlyValidatingElement$1(null);
      }
    }
  }

  function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
    {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(source);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        var children = props.children;

        if (children !== undefined) {
          if (isStaticChildren) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                validateChildKeys(children[i], type);
              }

              if (Object.freeze) {
                Object.freeze(children);
              }
            } else {
              error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
            }
          } else {
            validateChildKeys(children, type);
          }
        }
      }

      if (type === exports.Fragment) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }
  } // These two functions exist to still get child warnings in dev
  // even with the prod transform. This means that jsxDEV is purely
  // opt-in behavior for better messages but that we won't stop
  // giving you warnings if you use production apis.

  function jsxWithValidationStatic(type, props, key) {
    {
      return jsxWithValidation(type, props, key, true);
    }
  }
  function jsxWithValidationDynamic(type, props, key) {
    {
      return jsxWithValidation(type, props, key, false);
    }
  }

  var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
  // for now we can ship identical prod functions

  var jsxs =  jsxWithValidationStatic ;

  exports.jsx = jsx;
  exports.jsxs = jsxs;
    })();
  }
  });
  reactJsxRuntime_development.Fragment;
  reactJsxRuntime_development.jsx;
  reactJsxRuntime_development.jsxs;

  var jsxRuntime = createCommonjsModule(function (module) {

  {
    module.exports = reactJsxRuntime_development;
  }
  });
  var jsxRuntime_1 = jsxRuntime.jsx;
  var jsxRuntime_2 = jsxRuntime.jsxs;

  const cache = createCache$1({
    key: 'css',
    prepend: true
  });
  function StyledEngineProvider(props) {
    const {
      injectFirst,
      children
    } = props;
    return injectFirst ? /*#__PURE__*/jsxRuntime_1(CacheProvider, {
      value: cache,
      children: children
    }) : children;
  }
  StyledEngineProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: propTypes.node,

    /**
     * By default, the styles are injected last in the <head> element of the page.
     * As a result, they gain more specificity than any other style sheet.
     * If you want to override MUI's styles, set this prop.
     */
    injectFirst: propTypes.bool
  } ;

  function isEmpty$3(obj) {
    return obj === undefined || obj === null || Object.keys(obj).length === 0;
  }

  function GlobalStyles$1(props) {
    const {
      styles,
      defaultTheme = {}
    } = props;
    const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$3(themeInput) ? defaultTheme : themeInput) : styles;
    return /*#__PURE__*/jsxRuntime_1(Global, {
      styles: globalStyles
    });
  }
  GlobalStyles$1.propTypes = {
    defaultTheme: propTypes.object,
    styles: propTypes.oneOfType([propTypes.string, propTypes.object, propTypes.func])
  } ;

  function styled$2(tag, options) {
    const stylesFactory = emStyled(tag, options);

    {
      return (...styles) => {
        const component = typeof tag === 'string' ? `"${tag}"` : 'component';

        if (styles.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
        } else if (styles.some(style => style === undefined)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }

        return stylesFactory(...styles);
      };
    }
  }

  const responsivePropType = propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.object, propTypes.array]) ;
  var responsivePropType$1 = responsivePropType;

  function chainPropTypes(propType1, propType2) {

    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  function isPlainObject(item) {
    return item !== null && typeof item === 'object' && // TS thinks `item is possibly null` even though this was our first guard.
    // @ts-expect-error
    item.constructor === Object;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? _extends({}, target) : target;

    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach(key => {
        // Avoid prototype pollution
        if (key === '__proto__') {
          return;
        }

        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
          // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
          output[key] = deepmerge(target[key], source[key], options);
        } else {
          output[key] = source[key];
        }
      });
    }

    return output;
  }

  function isClassComponent$1(elementType) {
    // elementType.prototype?.isReactComponent
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }

  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;

    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') {
      return null;
    }

    let warningHint;
    const elementType = element.type;
    /**
     * Blacklisting instead of whitelisting
     *
     * Blacklisting will miss some components, such as React.Fragment. Those will at least
     * trigger a warning in React.
     * We can't whitelist because there is no safe way to detect React.forwardRef
     * or class components. "Safe" means there's no public API.
     *
     */

    if (typeof elementType === 'function' && !isClassComponent$1(elementType)) {
      warningHint = 'Did you accidentally use a plain function component for an element instead?';
    }

    if (warningHint !== undefined) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    }

    return null;
  }

  const elementAcceptingRef = chainPropTypes(propTypes.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(propTypes.element.isRequired, acceptingRef);
  var elementAcceptingRef$1 = elementAcceptingRef;

  function isClassComponent(elementType) {
    // elementType.prototype?.isReactComponent
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }

  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;

    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === 'undefined') {
      return null;
    }

    let warningHint;
    /**
     * Blacklisting instead of whitelisting
     *
     * Blacklisting will miss some components, such as React.Fragment. Those will at least
     * trigger a warning in React.
     * We can't whitelist because there is no safe way to detect React.forwardRef
     * or class components. "Safe" means there's no public API.
     *
     */

    if (typeof propValue === 'function' && !isClassComponent(propValue)) {
      warningHint = 'Did you accidentally provide a plain function component instead?';
    }

    if (warningHint !== undefined) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
    }

    return null;
  }

  var elementTypeAcceptingRef$1 = chainPropTypes(propTypes.elementType, elementTypeAcceptingRef);

  // This module is based on https://github.com/airbnb/prop-types-exact repository.
  // However, in order to reduce the number of dependencies and to remove some extra safe checks
  // the module was forked.
  const specialProperty = 'exact-prop: \u200b';
  function exactProp(propTypes) {

    return _extends({}, propTypes, {
      [specialProperty]: props => {
        const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));

        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
        }

        return null;
      }
    });
  }

  // https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3

  const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    const match = `${fn}`.match(fnNameMatchRegex);
    const name = match && match[1];
    return name || '';
  }

  function getFunctionComponentName(Component, fallback = '') {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
  }

  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
  }
  /**
   * cherry-pick from
   * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
   * originally forked from recompose/getDisplayName with added IE11 support
   */


  function getDisplayName(Component) {
    if (Component == null) {
      return undefined;
    }

    if (typeof Component === 'string') {
      return Component;
    }

    if (typeof Component === 'function') {
      return getFunctionComponentName(Component, 'Component');
    } // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`


    if (typeof Component === 'object') {
      switch (Component.$$typeof) {
        case reactIs_1:
          return getWrappedName(Component, Component.render, 'ForwardRef');

        case reactIs_5:
          return getWrappedName(Component, Component.type, 'memo');

        default:
          return undefined;
      }
    }

    return undefined;
  }

  function HTMLElementType(props, propName, componentName, location, propFullName) {

    const propValue = props[propName];
    const safePropName = propFullName || propName;

    if (propValue == null) {
      return null;
    }

    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
    }

    return null;
  }

  const refType = propTypes.oneOfType([propTypes.func, propTypes.object]);
  var refType$1 = refType;

  // It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
  //
  // A strict capitalization should uppercase the first letter of each word in the sentence.
  // We only handle the first word.
  function capitalize(string) {
    if (typeof string !== 'string') {
      throw new Error(`MUI: \`capitalize(string)\` expects a string argument.` );
    }

    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  /**
   * Safe chained function.
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   */
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }

      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {});
  }

  // Corresponds to 10 frames at 60 Hz.
  // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
  function debounce$1(func, wait = 166) {
    let timeout;

    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };

      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }

    debounced.clear = () => {
      clearTimeout(timeout);
    };

    return debounced;
  }

  function deprecatedPropType(validator, reason) {

    return (props, propName, componentName, location, propFullName) => {
      const componentNameSafe = componentName || '<<anonymous>>';
      const propFullNameSafe = propFullName || propName;

      if (typeof props[propName] !== 'undefined') {
        return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
      }

      return null;
    };
  }

  function isMuiElement(element, muiNames) {
    return /*#__PURE__*/React__namespace.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  function ownerWindow(node) {
    const doc = ownerDocument(node);
    return doc.defaultView || window;
  }

  function requirePropFactory(componentNameInError, Component) {


    const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;

    const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];

      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);

        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }

      if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }

      return null;
    };

    return requireProp;
  }

  /**
   * TODO v5: consider making it private
   *
   * passes {value} to {ref}
   *
   * WARNING: Be sure to only call this inside a callback that is passed as a ref.
   * Otherwise, make sure to cleanup the previous {ref} if it changes. See
   * https://github.com/mui-org/material-ui/issues/13539
   *
   * Useful if you want to expose the ref of an inner component to the public API
   * while still using it inside the component.
   * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
   */
  function setRef(ref, value) {
    if (typeof ref === 'function') {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  const useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
  var useEnhancedEffect$1 = useEnhancedEffect;

  function useId(idOverride) {
    const [defaultId, setDefaultId] = React__namespace.useState(idOverride);
    const id = idOverride || defaultId;
    React__namespace.useEffect(() => {
      if (defaultId == null) {
        // Fallback to this default id when possible.
        // Use the random value for client-side rendering only.
        // We can't use it server-side.
        setDefaultId(`mui-${Math.round(Math.random() * 1e9)}`);
      }
    }, [defaultId]);
    return id;
  }

  function unsupportedProp(props, propName, componentName, location, propFullName) {

    const propFullNameSafe = propFullName || propName;

    if (typeof props[propName] !== 'undefined') {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }

    return null;
  }

  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = 'value'
  }) {
    // isControlled is ignored in the hook dependency lists as it should never change.
    const {
      current: isControlled
    } = React__namespace.useRef(controlled !== undefined);
    const [valueState, setValue] = React__namespace.useState(defaultProp);
    const value = isControlled ? controlled : valueState;

    {
      React__namespace.useEffect(() => {
        if (isControlled !== (controlled !== undefined)) {
          console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React__namespace.useRef(defaultProp);
      React__namespace.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
        }
      }, [JSON.stringify(defaultProp)]);
    }

    const setValueIfUncontrolled = React__namespace.useCallback(newValue => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  /**
   * https://github.com/facebook/react/issues/14099#issuecomment-440013892
   */

  function useEventCallback(fn) {
    const ref = React__namespace.useRef(fn);
    useEnhancedEffect$1(() => {
      ref.current = fn;
    });
    return React__namespace.useCallback((...args) => // @ts-expect-error hide `this`
    // tslint:disable-next-line:ban-comma-operator
    (0, ref.current)(...args), []);
  }

  function useForkRef(refA, refB) {
    /**
     * This will create a new function if the ref props change and are defined.
     * This means react will call the old forkRef with `null` and the new forkRef
     * with the ref. Cleanup naturally emerges from this behavior.
     */
    return React__namespace.useMemo(() => {
      if (refA == null && refB == null) {
        return null;
      }

      return refValue => {
        setRef(refA, refValue);
        setRef(refB, refValue);
      };
    }, [refA, refB]);
  }

  // based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
  let hadKeyboardEvent = true;
  let hadFocusVisibleRecently = false;
  let hadFocusVisibleRecentlyTimeout = null;
  const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    'datetime-local': true
  };
  /**
   * Computes whether the given element should automatically trigger the
   * `focus-visible` class being added, i.e. whether it should always match
   * `:focus-visible` when focused.
   * @param {Element} node
   * @returns {boolean}
   */

  function focusTriggersKeyboardModality(node) {
    const {
      type,
      tagName
    } = node;

    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
      return true;
    }

    if (tagName === 'TEXTAREA' && !node.readOnly) {
      return true;
    }

    if (node.isContentEditable) {
      return true;
    }

    return false;
  }
  /**
   * Keep track of our keyboard modality state with `hadKeyboardEvent`.
   * If the most recent user interaction was via the keyboard;
   * and the key press did not include a meta, alt/option, or control key;
   * then the modality is keyboard. Otherwise, the modality is not keyboard.
   * @param {KeyboardEvent} event
   */


  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }

    hadKeyboardEvent = true;
  }
  /**
   * If at any point a user clicks with a pointing device, ensure that we change
   * the modality away from keyboard.
   * This avoids the situation where a user presses a key on an already focused
   * element, and then clicks on a different element, focusing it with a
   * pointing device, while we still think we're in keyboard modality.
   */


  function handlePointerDown() {
    hadKeyboardEvent = false;
  }

  function handleVisibilityChange() {
    if (this.visibilityState === 'hidden') {
      // If the tab becomes active again, the browser will handle calling focus
      // on the element (Safari actually calls it twice).
      // If this tab change caused a blur on an element with focus-visible,
      // re-apply the class when the user switches back to the tab.
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }

  function prepare(doc) {
    doc.addEventListener('keydown', handleKeyDown, true);
    doc.addEventListener('mousedown', handlePointerDown, true);
    doc.addEventListener('pointerdown', handlePointerDown, true);
    doc.addEventListener('touchstart', handlePointerDown, true);
    doc.addEventListener('visibilitychange', handleVisibilityChange, true);
  }

  function isFocusVisible(event) {
    const {
      target
    } = event;

    try {
      return target.matches(':focus-visible');
    } catch (error) {// Browsers not implementing :focus-visible will throw a SyntaxError.
      // We use our own heuristic for those browsers.
      // Rethrow might be better if it's not the expected error but do we really
      // want to crash if focus-visible malfunctioned?
    } // No need for validFocusTarget check. The user does that by attaching it to
    // focusable events only.


    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }

  function useIsFocusVisible() {
    const ref = React__namespace.useCallback(node => {
      if (node != null) {
        prepare(node.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React__namespace.useRef(false);
    /**
     * Should be called if a blur event is fired
     */

    function handleBlurVisible() {
      // checking against potential state variable does not suffice if we focus and blur synchronously.
      // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
      // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
      // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
      // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
      if (isFocusVisibleRef.current) {
        // To detect a tab/window switch, we look for a blur event followed
        // rapidly by a visibility change.
        // If we don't see a visibility change within 100ms, it's probably a
        // regular focus change.
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
          hadFocusVisibleRecently = false;
        }, 100);
        isFocusVisibleRef.current = false;
        return true;
      }

      return false;
    }
    /**
     * Should be called if a blur event is fired
     */


    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }

      return false;
    }

    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }

  // A change of the browser zoom change the scrollbar size.
  // Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
  function getScrollbarSize(doc) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // Source from https://github.com/alitaheri/normalize-scroll-left
  let cachedType;
  /**
   * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
   *
   * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
   *
   * Type             | <- Most Left | Most Right -> | Initial
   * ---------------- | ------------ | ------------- | -------
   * default          | 0            | 100           | 100
   * negative (spec*) | -100         | 0             | 0
   * reverse          | 100          | 0             | 0
   *
   * Edge 85: default
   * Safari 14: negative
   * Chrome 85: negative
   * Firefox 81: negative
   * IE11: reverse
   *
   * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
   */

  function detectScrollType() {
    if (cachedType) {
      return cachedType;
    }

    const dummy = document.createElement('div');
    const container = document.createElement('div');
    container.style.width = '10px';
    container.style.height = '1px';
    dummy.appendChild(container);
    dummy.dir = 'rtl';
    dummy.style.fontSize = '14px';
    dummy.style.width = '4px';
    dummy.style.height = '1px';
    dummy.style.position = 'absolute';
    dummy.style.top = '-1000px';
    dummy.style.overflow = 'scroll';
    document.body.appendChild(dummy);
    cachedType = 'reverse';

    if (dummy.scrollLeft > 0) {
      cachedType = 'default';
    } else {
      dummy.scrollLeft = 1;

      if (dummy.scrollLeft === 0) {
        cachedType = 'negative';
      }
    }

    document.body.removeChild(dummy);
    return cachedType;
  } // Based on https://stackoverflow.com/a/24394376

  function getNormalizedScrollLeft(element, direction) {
    const scrollLeft = element.scrollLeft; // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior

    if (direction !== 'rtl') {
      return scrollLeft;
    }

    const type = detectScrollType();

    switch (type) {
      case 'negative':
        return element.scrollWidth - element.clientWidth + scrollLeft;

      case 'reverse':
        return element.scrollWidth - element.clientWidth - scrollLeft;

      default:
        return scrollLeft;
    }
  }

  const usePreviousProps = value => {
    const ref = React__namespace.useRef({});
    React__namespace.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };

  var usePreviousProps$1 = usePreviousProps;

  const visuallyHidden = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: -1,
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    whiteSpace: 'nowrap',
    width: '1px'
  };
  var visuallyHidden$1 = visuallyHidden;

  function getTypeByValue(value) {
    const valueType = typeof value;

    switch (valueType) {
      case 'number':
        if (Number.isNaN(value)) {
          return 'NaN';
        }

        if (!Number.isFinite(value)) {
          return 'Infinity';
        }

        if (value !== Math.floor(value)) {
          return 'float';
        }

        return 'number';

      case 'object':
        if (value === null) {
          return 'null';
        }

        return value.constructor.name;

      default:
        return valueType;
    }
  } // IE 11 support

  function ponyfillIsInteger(x) {
    // eslint-disable-next-line no-restricted-globals
    return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
  }

  const isInteger = Number.isInteger || ponyfillIsInteger;

  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];

    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }

    return null;
  }

  function validator(props, propName, ...other) {
    const propValue = props[propName];

    if (propValue === undefined) {
      return null;
    }

    return requiredInteger(props, propName, ...other);
  }

  validator.isRequired = requiredInteger;
  var integerPropType = validator;

  function merge(acc, item) {
    if (!item) {
      return acc;
    }

    return deepmerge(acc, item, {
      clone: false // No need to clone deep, it's way faster.

    });
  }

  // For instance with the first breakpoint xs: [xs, sm[.

  const values$1 = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536 // large screen

  };
  const defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ['xs', 'sm', 'md', 'lg', 'xl'],
    up: key => `@media (min-width:${values$1[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};

    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }

    if (typeof propValue === 'object') {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        // key is breakpoint
        if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }

        return acc;
      }, {});
    }

    const output = styleFromPropValue(propValue);
    return output;
  }

  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;

    const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = Object.keys(breakpointOutput).length === 0;

      if (isBreakpointUnused) {
        delete acc[key];
      }

      return acc;
    }, style);
  }
  // [1,2,3] => {xs: true, sm: true, md: true}
  // {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}

  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    // fixed value
    if (typeof breakpointValues !== 'object') {
      return {};
    }

    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);

    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i) => {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach(breakpoint => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }

    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);

    if (keys.length === 0) {
      return breakpointValues;
    }

    let previous;
    return keys.reduce((acc, breakpoint, i) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous] || breakpointValues;
        previous = breakpoint;
      }

      return acc;
    }, {});
  }

  function getPath(obj, path) {
    if (!path || typeof path !== 'string') {
      return null;
    }

    return path.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
  }

  function getValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;

    if (typeof themeMapping === 'function') {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }

    if (transform) {
      value = transform(value);
    }

    return value;
  }

  function style$2(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;

    const fn = props => {
      if (props[prop] == null) {
        return null;
      }

      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};

      const styleFromPropValue = propValueFinal => {
        let value = getValue$1(themeMapping, transform, propValueFinal);

        if (propValueFinal === value && typeof propValueFinal === 'string') {
          // Haven't found value
          value = getValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
        }

        if (cssProperty === false) {
          return value;
        }

        return {
          [cssProperty]: value
        };
      };

      return handleBreakpoints(props, propValue, styleFromPropValue);
    };

    fn.propTypes = {
      [prop]: responsivePropType$1
    } ;
    fn.filterProps = [prop];
    return fn;
  }

  function compose(...styles) {
    const handlers = styles.reduce((acc, style) => {
      style.filterProps.forEach(prop => {
        acc[prop] = style;
      });
      return acc;
    }, {});

    const fn = props => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge(acc, handlers[prop](props));
        }

        return acc;
      }, {});
    };

    fn.propTypes = styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) ;
    fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
    return fn;
  }

  function memoize(fn) {
    const cache = {};
    return arg => {
      if (cache[arg] === undefined) {
        cache[arg] = fn(arg);
      }

      return cache[arg];
    };
  }

  const properties = {
    m: 'margin',
    p: 'padding'
  };
  const directions = {
    t: 'Top',
    r: 'Right',
    b: 'Bottom',
    l: 'Left',
    x: ['Left', 'Right'],
    y: ['Top', 'Bottom']
  };
  const aliases = {
    marginX: 'mx',
    marginY: 'my',
    paddingX: 'px',
    paddingY: 'py'
  }; // memoize() impact:
  // From 300,000 ops/sec
  // To 350,000 ops/sec

  const getCssProperties = memoize(prop => {
    // It's not a shorthand notation.
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }

    const [a, b] = prop.split('');
    const property = properties[a];
    const direction = directions[b] || '';
    return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
  });
  const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
  const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
  const spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    const themeSpacing = getPath(theme, themeKey) || defaultValue;

    if (typeof themeSpacing === 'number') {
      return abs => {
        if (typeof abs === 'string') {
          return abs;
        }

        {
          if (typeof abs !== 'number') {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
          }
        }

        return themeSpacing * abs;
      };
    }

    if (Array.isArray(themeSpacing)) {
      return abs => {
        if (typeof abs === 'string') {
          return abs;
        }

        {
          if (!Number.isInteger(abs)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
          } else if (abs > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
          }
        }

        return themeSpacing[abs];
      };
    }

    if (typeof themeSpacing === 'function') {
      return themeSpacing;
    }

    {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
    }

    return () => undefined;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, 'spacing', 8, 'spacing');
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === 'string' || propValue == null) {
      return propValue;
    }

    const abs = Math.abs(propValue);
    const transformed = transformer(abs);

    if (propValue >= 0) {
      return transformed;
    }

    if (typeof transformed === 'number') {
      return -transformed;
    }

    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return propValue => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }

  function resolveCssProperty(props, keys, prop, transformer) {
    // Using a hash computation over an array iteration could be faster, but with only 28 items,
    // it's doesn't worth the bundle size.
    if (keys.indexOf(prop) === -1) {
      return null;
    }

    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }

  function style$1(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
  }
  marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType$1;
    return obj;
  }, {}) ;
  paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType$1;
    return obj;
  }, {}) ;

  function spacing(props) {
    return style$1(props, spacingKeys);
  }

  spacing.propTypes = spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType$1;
    return obj;
  }, {}) ;
  spacing.filterProps = spacingKeys;

  function getBorder(value) {
    if (typeof value !== 'number') {
      return value;
    }

    return `${value}px solid`;
  }

  const border = style$2({
    prop: 'border',
    themeKey: 'borders',
    transform: getBorder
  });
  const borderTop = style$2({
    prop: 'borderTop',
    themeKey: 'borders',
    transform: getBorder
  });
  const borderRight = style$2({
    prop: 'borderRight',
    themeKey: 'borders',
    transform: getBorder
  });
  const borderBottom = style$2({
    prop: 'borderBottom',
    themeKey: 'borders',
    transform: getBorder
  });
  const borderLeft = style$2({
    prop: 'borderLeft',
    themeKey: 'borders',
    transform: getBorder
  });
  const borderColor = style$2({
    prop: 'borderColor',
    themeKey: 'palette'
  });
  const borderTopColor = style$2({
    prop: 'borderTopColor',
    themeKey: 'palette'
  });
  const borderRightColor = style$2({
    prop: 'borderRightColor',
    themeKey: 'palette'
  });
  const borderBottomColor = style$2({
    prop: 'borderBottomColor',
    themeKey: 'palette'
  });
  const borderLeftColor = style$2({
    prop: 'borderLeftColor',
    themeKey: 'palette'
  });
  const borderRadius = props => {
    if (props.borderRadius !== undefined && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4, 'borderRadius');

      const styleFromPropValue = propValue => ({
        borderRadius: getValue(transformer, propValue)
      });

      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }

    return null;
  };
  borderRadius.propTypes = {
    borderRadius: responsivePropType$1
  } ;
  borderRadius.filterProps = ['borderRadius'];
  const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
  var borders$1 = borders;

  const displayPrint = style$2({
    prop: 'displayPrint',
    cssProperty: false,
    transform: value => ({
      '@media print': {
        display: value
      }
    })
  });
  const displayRaw = style$2({
    prop: 'display'
  });
  const overflow = style$2({
    prop: 'overflow'
  });
  const textOverflow = style$2({
    prop: 'textOverflow'
  });
  const visibility = style$2({
    prop: 'visibility'
  });
  const whiteSpace = style$2({
    prop: 'whiteSpace'
  });
  var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

  const flexBasis = style$2({
    prop: 'flexBasis'
  });
  const flexDirection = style$2({
    prop: 'flexDirection'
  });
  const flexWrap = style$2({
    prop: 'flexWrap'
  });
  const justifyContent = style$2({
    prop: 'justifyContent'
  });
  const alignItems = style$2({
    prop: 'alignItems'
  });
  const alignContent = style$2({
    prop: 'alignContent'
  });
  const order$1 = style$2({
    prop: 'order'
  });
  const flex = style$2({
    prop: 'flex'
  });
  const flexGrow = style$2({
    prop: 'flexGrow'
  });
  const flexShrink = style$2({
    prop: 'flexShrink'
  });
  const alignSelf = style$2({
    prop: 'alignSelf'
  });
  const justifyItems = style$2({
    prop: 'justifyItems'
  });
  const justifySelf = style$2({
    prop: 'justifySelf'
  });
  const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$1, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  var flexbox$1 = flexbox;

  const gap = props => {
    if (props.gap !== undefined && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');

      const styleFromPropValue = propValue => ({
        gap: getValue(transformer, propValue)
      });

      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }

    return null;
  };
  gap.propTypes = {
    gap: responsivePropType$1
  } ;
  gap.filterProps = ['gap'];
  const columnGap = props => {
    if (props.columnGap !== undefined && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'columnGap');

      const styleFromPropValue = propValue => ({
        columnGap: getValue(transformer, propValue)
      });

      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }

    return null;
  };
  columnGap.propTypes = {
    columnGap: responsivePropType$1
  } ;
  columnGap.filterProps = ['columnGap'];
  const rowGap = props => {
    if (props.rowGap !== undefined && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'rowGap');

      const styleFromPropValue = propValue => ({
        rowGap: getValue(transformer, propValue)
      });

      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }

    return null;
  };
  rowGap.propTypes = {
    rowGap: responsivePropType$1
  } ;
  rowGap.filterProps = ['rowGap'];
  const gridColumn = style$2({
    prop: 'gridColumn'
  });
  const gridRow = style$2({
    prop: 'gridRow'
  });
  const gridAutoFlow = style$2({
    prop: 'gridAutoFlow'
  });
  const gridAutoColumns = style$2({
    prop: 'gridAutoColumns'
  });
  const gridAutoRows = style$2({
    prop: 'gridAutoRows'
  });
  const gridTemplateColumns = style$2({
    prop: 'gridTemplateColumns'
  });
  const gridTemplateRows = style$2({
    prop: 'gridTemplateRows'
  });
  const gridTemplateAreas = style$2({
    prop: 'gridTemplateAreas'
  });
  const gridArea = style$2({
    prop: 'gridArea'
  });
  const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  var grid$1 = grid;

  const color = style$2({
    prop: 'color',
    themeKey: 'palette'
  });
  const bgcolor = style$2({
    prop: 'bgcolor',
    cssProperty: 'backgroundColor',
    themeKey: 'palette'
  });
  const backgroundColor = style$2({
    prop: 'backgroundColor',
    themeKey: 'palette'
  });
  const palette = compose(color, bgcolor, backgroundColor);
  var palette$1 = palette;

  const position = style$2({
    prop: 'position'
  });
  const zIndex$2 = style$2({
    prop: 'zIndex',
    themeKey: 'zIndex'
  });
  const top$1 = style$2({
    prop: 'top'
  });
  const right$1 = style$2({
    prop: 'right'
  });
  const bottom$1 = style$2({
    prop: 'bottom'
  });
  const left$1 = style$2({
    prop: 'left'
  });
  var positions = compose(position, zIndex$2, top$1, right$1, bottom$1, left$1);

  const boxShadow = style$2({
    prop: 'boxShadow',
    themeKey: 'shadows'
  });
  var shadows$2 = boxShadow;

  function transform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }

  const width = style$2({
    prop: 'width',
    transform
  });
  const maxWidth = props => {
    if (props.maxWidth !== undefined && props.maxWidth !== null) {
      const styleFromPropValue = propValue => {
        var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;

        const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
        return {
          maxWidth: breakpoint || transform(propValue)
        };
      };

      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }

    return null;
  };
  maxWidth.filterProps = ['maxWidth'];
  const minWidth = style$2({
    prop: 'minWidth',
    transform
  });
  const height = style$2({
    prop: 'height',
    transform
  });
  const maxHeight = style$2({
    prop: 'maxHeight',
    transform
  });
  const minHeight = style$2({
    prop: 'minHeight',
    transform
  });
  style$2({
    prop: 'size',
    cssProperty: 'width',
    transform
  });
  style$2({
    prop: 'size',
    cssProperty: 'height',
    transform
  });
  const boxSizing = style$2({
    prop: 'boxSizing'
  });
  const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  var sizing$1 = sizing;

  const fontFamily = style$2({
    prop: 'fontFamily',
    themeKey: 'typography'
  });
  const fontSize = style$2({
    prop: 'fontSize',
    themeKey: 'typography'
  });
  const fontStyle = style$2({
    prop: 'fontStyle',
    themeKey: 'typography'
  });
  const fontWeight = style$2({
    prop: 'fontWeight',
    themeKey: 'typography'
  });
  const letterSpacing = style$2({
    prop: 'letterSpacing'
  });
  const lineHeight = style$2({
    prop: 'lineHeight'
  });
  const textAlign = style$2({
    prop: 'textAlign'
  });
  const typographyVariant = style$2({
    prop: 'typography',
    cssProperty: false,
    themeKey: 'typography'
  });
  const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
  var typography$1 = typography;

  const filterPropsMapping = {
    borders: borders$1.filterProps,
    display: display.filterProps,
    flexbox: flexbox$1.filterProps,
    grid: grid$1.filterProps,
    positions: positions.filterProps,
    palette: palette$1.filterProps,
    shadows: shadows$2.filterProps,
    sizing: sizing$1.filterProps,
    spacing: spacing.filterProps,
    typography: typography$1.filterProps
  };
  const styleFunctionMapping = {
    borders: borders$1,
    display,
    flexbox: flexbox$1,
    grid: grid$1,
    positions,
    palette: palette$1,
    shadows: shadows$2,
    sizing: sizing$1,
    spacing,
    typography: typography$1
  };
  const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
    filterPropsMapping[styleFnName].forEach(propName => {
      acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
  }, {});

  function getThemeValue(prop, value, theme) {
    const inputProps = {
      [prop]: value,
      theme
    };
    const styleFunction = propToStyleFunction[prop];
    return styleFunction ? styleFunction(inputProps) : {
      [prop]: value
    };
  }

  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every(object => union.size === Object.keys(object).length);
  }

  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
  }

  function styleFunctionSx(props) {
    const {
      sx,
      theme = {}
    } = props || {};

    if (!sx) {
      return null; // emotion & styled-components will neglect null
    }
    /*
     * Receive `sxInput` as object or callback
     * and then recursively check keys & values to create media query object styles.
     * (the result will be used in `styled`)
     */


    function traverse(sxInput) {
      let sxObject = sxInput;

      if (typeof sxInput === 'function') {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== 'object') {
        // value
        return sxInput;
      }

      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css = emptyBreakpoints;
      Object.keys(sxObject).forEach(styleKey => {
        const value = callIfFn(sxObject[styleKey], theme);

        if (typeof value === 'object') {
          if (propToStyleFunction[styleKey]) {
            css = merge(css, getThemeValue(styleKey, value, theme));
          } else {
            const breakpointsValues = handleBreakpoints({
              theme
            }, value, x => ({
              [styleKey]: x
            }));

            if (objectsHaveSameKeys(breakpointsValues, value)) {
              css[styleKey] = styleFunctionSx({
                sx: value,
                theme
              });
            } else {
              css = merge(css, breakpointsValues);
            }
          }
        } else {
          css = merge(css, getThemeValue(styleKey, value, theme));
        }
      });
      return removeUnusedBreakpoints(breakpointsKeys, css);
    }

    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }

  styleFunctionSx.filterProps = ['sx'];

  const _excluded$2o = ["sx"];

  const splitProps = props => {
    const result = {
      systemProps: {},
      otherProps: {}
    };
    Object.keys(props).forEach(prop => {
      if (propToStyleFunction[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };

  function extendSxProp(props) {
    const {
      sx: inSx
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2o);

    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;

    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === 'function') {
      finalSx = (...args) => {
        const result = inSx(...args);

        if (!isPlainObject(result)) {
          return systemProps;
        }

        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }

    return _extends({}, otherProps, {
      sx: finalSx
    });
  }

  function toVal(mix) {
  	var k, y, str='';

  	if (typeof mix === 'string' || typeof mix === 'number') {
  		str += mix;
  	} else if (typeof mix === 'object') {
  		if (Array.isArray(mix)) {
  			for (k=0; k < mix.length; k++) {
  				if (mix[k]) {
  					if (y = toVal(mix[k])) {
  						str && (str += ' ');
  						str += y;
  					}
  				}
  			}
  		} else {
  			for (k in mix) {
  				if (mix[k]) {
  					str && (str += ' ');
  					str += k;
  				}
  			}
  		}
  	}

  	return str;
  }

  function clsx () {
  	var i=0, tmp, x, str='';
  	while (i < arguments.length) {
  		if (tmp = arguments[i++]) {
  			if (x = toVal(tmp)) {
  				str && (str += ' ');
  				str += x;
  			}
  		}
  	}
  	return str;
  }

  const _excluded$2n = ["values", "unit", "step"];

  function createBreakpoints(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536 // large screen

      },
      unit = 'px',
      step = 5
    } = breakpoints,
          other = _objectWithoutPropertiesLoose(breakpoints, _excluded$2n);

    const keys = Object.keys(values);

    function up(key) {
      const value = typeof values[key] === 'number' ? values[key] : key;
      return `@media (min-width:${value}${unit})`;
    }

    function down(key) {
      const value = typeof values[key] === 'number' ? values[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }

    function between(start, end) {
      const endIndex = keys.indexOf(end);
      return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
    }

    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }

      return up(key);
    }

    return _extends({
      keys,
      values,
      up,
      down,
      between,
      only,
      unit
    }, other);
  }

  const shape = {
    borderRadius: 4
  };
  var shape$1 = shape;

  /* tslint:enable:unified-signatures */
  function createSpacing(spacingInput = 8) {
    // Already transformed.
    if (spacingInput.mui) {
      return spacingInput;
    } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
    // Smaller components, such as icons, can align to a 4dp grid.
    // https://material.io/design/layout/understanding-layout.html#usage


    const transform = createUnarySpacing({
      spacing: spacingInput
    });

    const spacing = (...argsInput) => {
      {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }

      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map(argument => {
        const output = transform(argument);
        return typeof output === 'number' ? `${output}px` : output;
      }).join(' ');
    };

    spacing.mui = true;
    return spacing;
  }

  const _excluded$2m = ["breakpoints", "palette", "spacing", "shape"];

  function createTheme$1(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options,
          other = _objectWithoutPropertiesLoose(options, _excluded$2m);

    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints,
      direction: 'ltr',
      components: {},
      // Inject component definitions.
      palette: _extends({
        mode: 'light'
      }, paletteInput),
      spacing,
      shape: _extends({}, shape$1, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    return muiTheme;
  }

  const ThemeContext = /*#__PURE__*/React__namespace.createContext(null);

  {
    ThemeContext.displayName = 'ThemeContext';
  }

  var ThemeContext$1 = ThemeContext;

  function useTheme$3() {
    const theme = React__namespace.useContext(ThemeContext$1);

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useDebugValue(theme);
    }

    return theme;
  }

  const hasSymbol = typeof Symbol === 'function' && Symbol.for;
  var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === 'function') {
      const mergedTheme = localTheme(outerTheme);

      {
        if (!mergedTheme) {
          console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
        }
      }

      return mergedTheme;
    }

    return _extends({}, outerTheme, localTheme);
  }
  /**
   * This component takes a `theme` prop.
   * It makes the `theme` available down the React tree thanks to React context.
   * This component should preferably be used at **the root of your component tree**.
   */


  function ThemeProvider$1(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme$3();

    {
      if (outerTheme === null && typeof localTheme === 'function') {
        console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
      }
    }

    const theme = React__namespace.useMemo(() => {
      const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

      if (output != null) {
        output[nested] = outerTheme !== null;
      }

      return output;
    }, [localTheme, outerTheme]);
    return /*#__PURE__*/jsxRuntime_1(ThemeContext$1.Provider, {
      value: theme,
      children: children
    });
  }

  ThemeProvider$1.propTypes = {
    /**
     * Your component tree.
     */
    children: propTypes.node,

    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired
  } ;

  {
    ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes) ;
  }

  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }

  function useTheme$2(defaultTheme = null) {
    const contextTheme = useTheme$3();
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
  }

  const systemDefaultTheme$1 = createTheme$1();

  function useTheme$1(defaultTheme = systemDefaultTheme$1) {
    return useTheme$2(defaultTheme);
  }

  const _excluded$2l = ["className", "component"];
  function createBox(options = {}) {
    const {
      defaultTheme,
      defaultClassName = 'MuiBox-root',
      generateClassName
    } = options;
    const BoxRoot = styled$2('div')(styleFunctionSx);
    const Box = /*#__PURE__*/React__namespace.forwardRef(function Box(inProps, ref) {
      const theme = useTheme$1(defaultTheme);

      const _extendSxProp = extendSxProp(inProps),
            {
        className,
        component = 'div'
      } = _extendSxProp,
            other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded$2l);

      return /*#__PURE__*/jsxRuntime_1(BoxRoot, _extends({
        as: component,
        ref: ref,
        className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: theme
      }, other));
    });
    Box.propTypes
    /* remove-proptypes */
    = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------

      /**
       * @ignore
       */
      children: propTypes.node,

      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: propTypes.elementType,

      /**
       * @ignore
       */
      sx: propTypes.oneOfType([propTypes.object, propTypes.array])
    } ;
    return Box;
  }

  const _excluded$2k = ["variant"];

  function isEmpty$2(string) {
    return string.length === 0;
  }
  /**
   * Generates string classKey based on the properties provided. It starts with the
   * variant if defined, and then it appends all other properties in alphabetical order.
   * @param {object} props - the properties for which the classKey should be created.
   */


  function propsToClassKey(props) {
    const {
      variant
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2k);

    let classKey = variant || '';
    Object.keys(other).sort().forEach(key => {
      if (key === 'color') {
        classKey += isEmpty$2(classKey) ? props[key] : capitalize(props[key]);
      } else {
        classKey += `${isEmpty$2(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
      }
    });
    return classKey;
  }

  const _excluded$2j = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
        _excluded2$c = ["theme"],
        _excluded3$1 = ["theme"];

  function isEmpty$1(obj) {
    return Object.keys(obj).length === 0;
  }

  const getStyleOverrides = (name, theme) => {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }

    return null;
  };

  const getVariantStyles = (name, theme) => {
    let variants = [];

    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }

    const variantsStyles = {};
    variants.forEach(definition => {
      const key = propsToClassKey(definition.props);
      variantsStyles[key] = definition.style;
    });
    return variantsStyles;
  };

  const variantsResolver = (props, styles, theme, name) => {
    var _theme$components, _theme$components$nam;

    const {
      ownerState = {}
    } = props;
    const variantsStyles = [];
    const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;

    if (themeVariants) {
      themeVariants.forEach(themeVariant => {
        let isMatch = true;
        Object.keys(themeVariant.props).forEach(key => {
          if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
            isMatch = false;
          }
        });

        if (isMatch) {
          variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
        }
      });
    }

    return variantsStyles;
  };

  function shouldForwardProp(prop) {
    return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
  }
  const systemDefaultTheme = createTheme$1();

  const lowercaseFirstLetter = string => {
    return string.charAt(0).toLowerCase() + string.slice(1);
  };

  function createStyled(input = {}) {
    const {
      defaultTheme = systemDefaultTheme,
      rootShouldForwardProp = shouldForwardProp,
      slotShouldForwardProp = shouldForwardProp
    } = input;
    return (tag, inputOptions = {}) => {
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        overridesResolver
      } = inputOptions,
            options = _objectWithoutPropertiesLoose(inputOptions, _excluded$2j); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.


      const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
      const skipSx = inputSkipSx || false;
      let label;

      {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
        }
      }

      let shouldForwardPropOption = shouldForwardProp;

      if (componentSlot === 'Root') {
        shouldForwardPropOption = rootShouldForwardProp;
      } else if (componentSlot) {
        // any other slot specified
        shouldForwardPropOption = slotShouldForwardProp;
      }

      const defaultStyledResolver = styled$2(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));

      const muiStyledResolver = (styleArg, ...expressions) => {
        const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
          // On the server emotion doesn't use React.forwardRef for creating components, so the created
          // component stays as a function. This condition makes sure that we do not interpolate functions
          // which are basically components used as a selectors.
          // eslint-disable-next-line no-underscore-dangle
          return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {
            let {
              theme: themeInput
            } = _ref,
                other = _objectWithoutPropertiesLoose(_ref, _excluded2$c);

            return stylesArg(_extends({
              theme: isEmpty$1(themeInput) ? defaultTheme : themeInput
            }, other));
          } : stylesArg;
        }) : [];
        let transformedStyleArg = styleArg;

        if (componentName && overridesResolver) {
          expressionsWithDefaultTheme.push(props => {
            const theme = isEmpty$1(props.theme) ? defaultTheme : props.theme;
            const styleOverrides = getStyleOverrides(componentName, theme);

            if (styleOverrides) {
              return overridesResolver(props, styleOverrides);
            }

            return null;
          });
        }

        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push(props => {
            const theme = isEmpty$1(props.theme) ? defaultTheme : props.theme;
            return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }

        if (!skipSx) {
          expressionsWithDefaultTheme.push(props => {
            const theme = isEmpty$1(props.theme) ? defaultTheme : props.theme;
            return styleFunctionSx(_extends({}, props, {
              theme
            }));
          });
        }

        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;

        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        } else if (typeof styleArg === 'function') {
          // If the type is function, we need to define the default theme.
          transformedStyleArg = _ref2 => {
            let {
              theme: themeInput
            } = _ref2,
                other = _objectWithoutPropertiesLoose(_ref2, _excluded3$1);

            return styleArg(_extends({
              theme: isEmpty$1(themeInput) ? defaultTheme : themeInput
            }, other));
          };
        }

        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);

        {
          let displayName;

          if (componentName) {
            displayName = `${componentName}${componentSlot || ''}`;
          }

          if (displayName === undefined) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }

          Component.displayName = displayName;
        }

        return Component;
      };

      return muiStyledResolver;
    };
  }

  /* eslint-disable no-restricted-syntax */
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;

    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }

    const output = _extends({}, props); // Resolve default props, code borrow from React source.
    // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221


    const defaultProps = theme.components[name].defaultProps;
    let propName;

    for (propName in defaultProps) {
      if (output[propName] === undefined) {
        output[propName] = defaultProps[propName];
      }
    }

    return output;
  }

  function useThemeProps$1({
    props,
    name,
    defaultTheme
  }) {
    const theme = useTheme$1(defaultTheme);
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }

  /**
   * Returns a number whose value is limited to the given range.
   * @param {number} value The value to be clamped
   * @param {number} min The lower boundary of the output range
   * @param {number} max The upper boundary of the output range
   * @returns {number} A number in the range [min, max]
   */
  function clamp$3(value, min = 0, max = 1) {
    {
      if (value < min || value > max) {
        console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
      }
    }

    return Math.min(Math.max(min, value), max);
  }
  /**
   * Converts a color from CSS hex format to CSS rgb format.
   * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
   * @returns {string} A CSS rgb color string
   */


  function hexToRgb(color) {
    color = color.substr(1);
    const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
    let colors = color.match(re);

    if (colors && colors[0].length === 1) {
      colors = colors.map(n => n + n);
    }

    return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
  }

  function intToHex(int) {
    const hex = int.toString(16);
    return hex.length === 1 ? `0${hex}` : hex;
  }
  /**
   * Returns an object with the type and values of a color.
   *
   * Note: Does not support rgb % values.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {object} - A MUI color object: {type: string, values: number[]}
   */


  function decomposeColor(color) {
    // Idempotent
    if (color.type) {
      return color;
    }

    if (color.charAt(0) === '#') {
      return decomposeColor(hexToRgb(color));
    }

    const marker = color.indexOf('(');
    const type = color.substring(0, marker);

    if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
      throw new Error(`MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` );
    }

    let values = color.substring(marker + 1, color.length - 1);
    let colorSpace;

    if (type === 'color') {
      values = values.split(' ');
      colorSpace = values.shift();

      if (values.length === 4 && values[3].charAt(0) === '/') {
        values[3] = values[3].substr(1);
      }

      if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
        throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` );
      }
    } else {
      values = values.split(',');
    }

    values = values.map(value => parseFloat(value));
    return {
      type,
      values,
      colorSpace
    };
  }
  /**
   * Converts a color object with type and values to a string.
   * @param {object} color - Decomposed color
   * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
   * @param {array} color.values - [n,n,n] or [n,n,n,n]
   * @returns {string} A CSS color string
   */

  function recomposeColor(color) {
    const {
      type,
      colorSpace
    } = color;
    let {
      values
    } = color;

    if (type.indexOf('rgb') !== -1) {
      // Only convert the first 3 values to int (i.e. not alpha)
      values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf('hsl') !== -1) {
      values[1] = `${values[1]}%`;
      values[2] = `${values[2]}%`;
    }

    if (type.indexOf('color') !== -1) {
      values = `${colorSpace} ${values.join(' ')}`;
    } else {
      values = `${values.join(', ')}`;
    }

    return `${type}(${values})`;
  }
  /**
   * Converts a color from CSS rgb format to CSS hex format.
   * @param {string} color - RGB color, i.e. rgb(n, n, n)
   * @returns {string} A CSS rgb color string, i.e. #nnnnnn
   */

  function rgbToHex(color) {
    // Idempotent
    if (color.indexOf('#') === 0) {
      return color;
    }

    const {
      values
    } = decomposeColor(color);
    return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;
  }
  /**
   * Converts a color from hsl format to rgb format.
   * @param {string} color - HSL color values
   * @returns {string} rgb color values
   */

  function hslToRgb(color) {
    color = decomposeColor(color);
    const {
      values
    } = color;
    const h = values[0];
    const s = values[1] / 100;
    const l = values[2] / 100;
    const a = s * Math.min(l, 1 - l);

    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);

    let type = 'rgb';
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

    if (color.type === 'hsla') {
      type += 'a';
      rgb.push(values[3]);
    }

    return recomposeColor({
      type,
      values: rgb
    });
  }
  /**
   * The relative brightness of any point in a color space,
   * normalized to 0 for darkest black and 1 for lightest white.
   *
   * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @returns {number} The relative brightness of the color in the range 0 - 1
   */

  function getLuminance(color) {
    color = decomposeColor(color);
    let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
    rgb = rgb.map(val => {
      if (color.type !== 'color') {
        val /= 255; // normalized
      }

      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    }); // Truncate at 3 digits

    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  /**
   * Calculates the contrast ratio between two colors.
   *
   * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {number} A contrast ratio value in the range 0 - 21.
   */

  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  /**
   * Sets the absolute transparency of a color.
   * Any existing alpha values are overwritten.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} value - value to set the alpha channel to in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function alpha(color, value) {
    color = decomposeColor(color);
    value = clamp$3(value);

    if (color.type === 'rgb' || color.type === 'hsl') {
      color.type += 'a';
    }

    if (color.type === 'color') {
      color.values[3] = `/${value}`;
    } else {
      color.values[3] = value;
    }

    return recomposeColor(color);
  }
  /**
   * Darkens a color.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} coefficient - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function darken(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp$3(coefficient);

    if (color.type.indexOf('hsl') !== -1) {
      color.values[2] *= 1 - coefficient;
    } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color.values[i] *= 1 - coefficient;
      }
    }

    return recomposeColor(color);
  }
  /**
   * Lightens a color.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} coefficient - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function lighten(color, coefficient) {
    color = decomposeColor(color);
    coefficient = clamp$3(coefficient);

    if (color.type.indexOf('hsl') !== -1) {
      color.values[2] += (100 - color.values[2]) * coefficient;
    } else if (color.type.indexOf('rgb') !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color.values[i] += (255 - color.values[i]) * coefficient;
      }
    } else if (color.type.indexOf('color') !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color.values[i] += (1 - color.values[i]) * coefficient;
      }
    }

    return recomposeColor(color);
  }
  /**
   * Darken or lighten a color, depending on its luminance.
   * Light colors are darkened, dark colors are lightened.
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
   * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */

  function emphasize(color, coefficient = 0.15) {
    return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
  }

  function InnerThemeProvider(props) {
    const theme = useTheme$1();
    return /*#__PURE__*/jsxRuntime_1(ThemeContext$2.Provider, {
      value: typeof theme === 'object' ? theme : {},
      children: props.children
    });
  }

  InnerThemeProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: propTypes.node
  } ;
  /**
   * This component makes the `theme` available down the React tree.
   * It should preferably be used at **the root of your component tree**.
   */

  function ThemeProvider(props) {
    const {
      children,
      theme: localTheme
    } = props;
    return /*#__PURE__*/jsxRuntime_1(ThemeProvider$1, {
      theme: localTheme,
      children: /*#__PURE__*/jsxRuntime_1(InnerThemeProvider, {
        children: children
      })
    });
  }

  ThemeProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: propTypes.node,

    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired
  } ;

  {
    ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) ;
  }

  const _excluded$2i = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"],
        _excluded2$b = ["type", "mode"];
  function adaptV4Theme(inputTheme) {
    {
      console.warn(['MUI: adaptV4Theme() is deprecated.', 'Follow the upgrade guide on https://mui.com/r/migration-v4#theme.'].join('\n'));
    }

    const {
      defaultProps = {},
      mixins = {},
      overrides = {},
      palette = {},
      props = {},
      styleOverrides = {}
    } = inputTheme,
          other = _objectWithoutPropertiesLoose(inputTheme, _excluded$2i);

    const theme = _extends({}, other, {
      components: {}
    }); // default props


    Object.keys(defaultProps).forEach(component => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = defaultProps[component];
      theme.components[component] = componentValue;
    });
    Object.keys(props).forEach(component => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = props[component];
      theme.components[component] = componentValue;
    }); // css overrides

    Object.keys(styleOverrides).forEach(component => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = styleOverrides[component];
      theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach(component => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = overrides[component];
      theme.components[component] = componentValue;
    }); // theme.spacing

    theme.spacing = createSpacing(inputTheme.spacing); // theme.mixins.gutters

    const breakpoints = createBreakpoints(inputTheme.breakpoints || {});
    const spacing = theme.spacing;
    theme.mixins = _extends({
      gutters: (styles = {}) => {
        return _extends({
          paddingLeft: spacing(2),
          paddingRight: spacing(2)
        }, styles, {
          [breakpoints.up('sm')]: _extends({
            paddingLeft: spacing(3),
            paddingRight: spacing(3)
          }, styles[breakpoints.up('sm')])
        });
      }
    }, mixins);

    const {
      type: typeInput,
      mode: modeInput
    } = palette,
          paletteRest = _objectWithoutPropertiesLoose(palette, _excluded2$b);

    const finalMode = modeInput || typeInput || 'light';
    theme.palette = _extends({
      // theme.palette.text.hint
      text: {
        hint: finalMode === 'dark' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(0, 0, 0, 0.38)'
      },
      mode: finalMode,
      type: finalMode
    }, paletteRest);
    return theme;
  }

  // Give up on IE11 support for this feature

  function stripDiacritics(string) {
    return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
  }

  function createFilterOptions(config = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = 'any',
      stringify,
      trim = false
    } = config;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim ? inputValue.trim() : inputValue;

      if (ignoreCase) {
        input = input.toLowerCase();
      }

      if (ignoreAccents) {
        input = stripDiacritics(input);
      }

      const filteredOptions = options.filter(option => {
        let candidate = (stringify || getOptionLabel)(option);

        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }

        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }

        return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  } // To replace with .findIndex() once we stop IE11 support.

  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }

    return -1;
  }

  const defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.

  const pageSize = 5;
  function useAutocomplete(props) {
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      disabled: disabledProp,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = 'useAutocomplete',
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionLabel: getOptionLabelProp = option => {
        var _option$label;

        return (_option$label = option.label) != null ? _option$label : option;
      },
      isOptionEqualToValue = (option, value) => option === value,
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId(idProp);
    let getOptionLabel = getOptionLabelProp;

    getOptionLabel = option => {
      const optionLabel = getOptionLabelProp(option);

      if (typeof optionLabel !== 'string') {
        {
          const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }

        return String(optionLabel);
      }

      return optionLabel;
    };

    const ignoreFocus = React__namespace.useRef(false);
    const firstFocus = React__namespace.useRef(true);
    const inputRef = React__namespace.useRef(null);
    const listboxRef = React__namespace.useRef(null);
    const [anchorEl, setAnchorEl] = React__namespace.useState(null);
    const [focusedTag, setFocusedTag] = React__namespace.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React__namespace.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: '',
      name: componentName,
      state: 'inputValue'
    });
    const [focused, setFocused] = React__namespace.useState(false);
    const resetInputValue = React__namespace.useCallback((event, newValue) => {
      // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
      // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;

      if (!isOptionSelected && !clearOnBlur) {
        return;
      }

      let newInputValue;

      if (multiple) {
        newInputValue = '';
      } else if (newValue == null) {
        newInputValue = '';
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
      }

      if (inputValue === newInputValue) {
        return;
      }

      setInputValueState(newInputValue);

      if (onInputChange) {
        onInputChange(event, newInputValue, 'reset');
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const prevValue = React__namespace.useRef();
    React__namespace.useEffect(() => {
      const valueChange = value !== prevValue.current;
      prevValue.current = value;

      if (focused && !valueChange) {
        return;
      } // Only reset the input's value when freeSolo if the component's value changes.


      if (freeSolo && !valueChange) {
        return;
      }

      resetInputValue(null, value);
    }, [value, resetInputValue, focused, prevValue, freeSolo]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: 'open'
    });
    const [inputPristine, setInputPristine] = React__namespace.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open;
    const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
      if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
        return false;
      }

      return true;
    }), // we use the empty string to manipulate `filterOptions` to not filter any options
    // i.e. the filter predicate always returns true
    {
      inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
      getOptionLabel
    }) : [];
    const listboxAvailable = open && filteredOptions.length > 0;

    {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));

        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\n'));
        }
      }
    }

    const focusTag = useEventCallback(tagToFocus => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    }); // Ensure the focusedTag is never inconsistent

    React__namespace.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);

    function validOptionIndex(index, direction) {
      if (!listboxRef.current || index === -1) {
        return -1;
      }

      let nextFocus = index;

      while (true) {
        // Out of range
        if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
          return -1;
        }

        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`); // Same logic as MenuList.js

        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';

        if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
          // Move to the next element.
          nextFocus += direction === 'next' ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }

    const setHighlightedIndex = useEventCallback(({
      event,
      index,
      reason = 'auto'
    }) => {
      highlightedIndexRef.current = index; // does the index exist?

      if (index === -1) {
        inputRef.current.removeAttribute('aria-activedescendant');
      } else {
        inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
      }

      if (onHighlightChange) {
        onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
      }

      if (!listboxRef.current) {
        return;
      }

      const prev = listboxRef.current.querySelector('[role="option"].Mui-focused');

      if (prev) {
        prev.classList.remove('Mui-focused');
        prev.classList.remove('Mui-focusVisible');
      }

      const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]'); // "No results"

      if (!listboxNode) {
        return;
      }

      if (index === -1) {
        listboxNode.scrollTop = 0;
        return;
      }

      const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);

      if (!option) {
        return;
      }

      option.classList.add('Mui-focused');

      if (reason === 'keyboard') {
        option.classList.add('Mui-focusVisible');
      } // Scroll active descendant into view.
      // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js
      //
      // Consider this API instead once it has a better browser support:
      // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });


      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;

        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback(({
      event,
      diff,
      direction = 'next',
      reason = 'auto'
    }) => {
      if (!popupOpen) {
        return;
      }

      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;

        if (diff === 'reset') {
          return defaultHighlighted;
        }

        if (diff === 'start') {
          return 0;
        }

        if (diff === 'end') {
          return maxIndex;
        }

        const newIndex = highlightedIndexRef.current + diff;

        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }

          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }

          return maxIndex;
        }

        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }

          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }

          return 0;
        }

        return newIndex;
      };

      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      }); // Sync the content of the input with the highlighted option.

      if (autoComplete && diff !== 'reset') {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,
          // a completion string, appears inline after the input cursor in the textbox.

          const index = option.toLowerCase().indexOf(inputValue.toLowerCase());

          if (index === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const syncHighlightedIndex = React__namespace.useCallback(() => {
      if (!popupOpen) {
        return;
      }

      const valueItem = multiple ? value[0] : value; // The popup is empty, reset

      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: 'reset'
        });
        return;
      }

      if (!listboxRef.current) {
        return;
      } // Synchronize the value with the highlighted index


      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible

        if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }

        const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));

        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: 'reset'
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }

        return;
      } // Prevent the highlighted index to leak outside the boundaries.


      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      } // Restore the focus to the previous index.


      setHighlightedIndex({
        index: highlightedIndexRef.current
      }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [// Only sync the highlighted index when the option switch between empty and not
    filteredOptions.length, // Don't sync the highlighted index with the value when multiple
    // eslint-disable-next-line react-hooks/exhaustive-deps
    multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
    const handleListboxRef = useEventCallback(node => {
      setRef(listboxRef, node);

      if (!node) {
        return;
      }

      syncHighlightedIndex();
    });

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {
          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\n'));
        }
      }, [componentName]);
    }

    React__namespace.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);

    const handleOpen = event => {
      if (open) {
        return;
      }

      setOpenState(true);
      setInputPristine(true);

      if (onOpen) {
        onOpen(event);
      }
    };

    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }

      setOpenState(false);

      if (onClose) {
        onClose(event, reason);
      }
    };

    const handleValue = (event, newValue, reason, details) => {
      if (value === newValue) {
        return;
      }

      if (onChange) {
        onChange(event, newValue, reason, details);
      }

      setValueState(newValue);
    };

    const isTouch = React__namespace.useRef(false);

    const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
      let reason = reasonProp;
      let newValue = option;

      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];

        {
          const matches = newValue.filter(val => isOptionEqualToValue(option, val));

          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\n'));
          }
        }

        const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));

        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== 'freeSolo') {
          newValue.splice(itemIndex, 1);
          reason = 'removeOption';
        }
      }

      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });

      if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) {
        handleClose(event, reason);
      }

      if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
        inputRef.current.blur();
      }
    };

    function validTagIndex(index, direction) {
      if (index === -1) {
        return -1;
      }

      let nextFocus = index;

      while (true) {
        // Out of range
        if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
          return -1;
        }

        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`); // Same logic as MenuList.js

        if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
          nextFocus += direction === 'next' ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }

    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }

      handleClose(event, 'toggleInput');
      let nextTag = focusedTag;

      if (focusedTag === -1) {
        if (inputValue === '' && direction === 'previous') {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === 'next' ? 1 : -1;

        if (nextTag < 0) {
          nextTag = 0;
        }

        if (nextTag === value.length) {
          nextTag = -1;
        }
      }

      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };

    const handleClear = event => {
      ignoreFocus.current = true;
      setInputValueState('');

      if (onInputChange) {
        onInputChange(event, '', 'clear');
      }

      handleValue(event, multiple ? [] : null, 'clear');
    };

    const handleKeyDown = other => event => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }

      if (event.defaultMuiPrevented) {
        return;
      }

      if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      } // Wait until IME is settled.


      if (event.which !== 229) {
        switch (event.key) {
          case 'Home':
            if (popupOpen && handleHomeEndKeys) {
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: 'start',
                direction: 'next',
                reason: 'keyboard',
                event
              });
            }

            break;

          case 'End':
            if (popupOpen && handleHomeEndKeys) {
              // Prevent scroll of the page
              event.preventDefault();
              changeHighlightedIndex({
                diff: 'end',
                direction: 'previous',
                reason: 'keyboard',
                event
              });
            }

            break;

          case 'PageUp':
            // Prevent scroll of the page
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: 'previous',
              reason: 'keyboard',
              event
            });
            handleOpen(event);
            break;

          case 'PageDown':
            // Prevent scroll of the page
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: 'next',
              reason: 'keyboard',
              event
            });
            handleOpen(event);
            break;

          case 'ArrowDown':
            // Prevent cursor move
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: 'next',
              reason: 'keyboard',
              event
            });
            handleOpen(event);
            break;

          case 'ArrowUp':
            // Prevent cursor move
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: 'previous',
              reason: 'keyboard',
              event
            });
            handleOpen(event);
            break;

          case 'ArrowLeft':
            handleFocusTag(event, 'previous');
            break;

          case 'ArrowRight':
            handleFocusTag(event, 'next');
            break;

          case 'Enter':
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.

              event.preventDefault();

              if (disabled) {
                return;
              }

              selectNewValue(event, option, 'selectOption'); // Move the selection to the end.

              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
              if (multiple) {
                // Allow people to add new values before they submit the form.
                event.preventDefault();
              }

              selectNewValue(event, inputValue, 'createOption', 'freeSolo');
            }

            break;

          case 'Escape':
            if (popupOpen) {
              // Avoid Opera to exit fullscreen mode.
              event.preventDefault(); // Avoid the Modal to handle the event.

              event.stopPropagation();
              handleClose(event, 'escape');
            } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
              // Avoid Opera to exit fullscreen mode.
              event.preventDefault(); // Avoid the Modal to handle the event.

              event.stopPropagation();
              handleClear(event);
            }

            break;

          case 'Backspace':
            if (multiple && inputValue === '' && value.length > 0) {
              const index = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, 'removeOption', {
                option: value[index]
              });
            }

            break;
        }
      }
    };

    const handleFocus = event => {
      setFocused(true);

      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };

    const handleBlur = event => {
      // Ignore the event when using the scrollbar with IE11
      if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
        inputRef.current.focus();
        return;
      }

      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;

      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
      } else if (autoSelect && freeSolo && inputValue !== '') {
        selectNewValue(event, inputValue, 'blur', 'freeSolo');
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }

      handleClose(event, 'blur');
    };

    const handleInputChange = event => {
      const newValue = event.target.value;

      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);

        if (onInputChange) {
          onInputChange(event, newValue, 'input');
        }
      }

      if (newValue === '') {
        if (!disableClearable && !multiple) {
          handleValue(event, null, 'clear');
        }
      } else {
        handleOpen(event);
      }
    };

    const handleOptionMouseOver = event => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute('data-option-index')),
        reason: 'mouse'
      });
    };

    const handleOptionTouchStart = () => {
      isTouch.current = true;
    };

    const handleOptionClick = event => {
      const index = Number(event.currentTarget.getAttribute('data-option-index'));
      selectNewValue(event, filteredOptions[index], 'selectOption');
      isTouch.current = false;
    };

    const handleTagDelete = index => event => {
      const newValue = value.slice();
      newValue.splice(index, 1);
      handleValue(event, newValue, 'removeOption', {
        option: value[index]
      });
    };

    const handlePopupIndicator = event => {
      if (open) {
        handleClose(event, 'toggleInput');
      } else {
        handleOpen(event);
      }
    }; // Prevent input blur when interacting with the combobox


    const handleMouseDown = event => {
      if (event.target.getAttribute('id') !== id) {
        event.preventDefault();
      }
    }; // Focus the input when interacting with the combobox


    const handleClick = () => {
      inputRef.current.focus();

      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }

      firstFocus.current = false;
    };

    const handleInputMouseDown = event => {
      if (inputValue === '' || !open) {
        handlePopupIndicator(event);
      }
    };

    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;

    if (groupBy) {
      // used to keep track of key and indexes in the result array
      const indexBy = new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index) => {
        const group = groupBy(option);

        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
              warn = true;
            }

            indexBy.set(group, true);
          }

          acc.push({
            key: index,
            index,
            group,
            options: [option]
          });
        }

        return acc;
      }, []);
    }

    if (disabledProp && focused) {
      handleBlur();
    }

    return {
      getRootProps: (other = {}) => _extends({
        'aria-owns': listboxAvailable ? `${id}-listbox` : null,
        role: 'combobox',
        'aria-expanded': listboxAvailable
      }, other, {
        onKeyDown: handleKeyDown(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperativeley so don't let react override
        // only have an opinion about this when closed
        'aria-activedescendant': popupOpen ? '' : null,
        'aria-autocomplete': autoComplete ? 'both' : 'list',
        'aria-controls': listboxAvailable ? `${id}-listbox` : null,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: 'off',
        ref: inputRef,
        autoCapitalize: 'none',
        spellCheck: 'false'
      }),
      getClearProps: () => ({
        tabIndex: -1,
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index
      }) => ({
        key: index,
        'data-tag-index': index,
        tabIndex: -1,
        onDelete: handleTagDelete(index)
      }),
      getListboxProps: () => ({
        role: 'listbox',
        id: `${id}-listbox`,
        'aria-labelledby': `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: event => {
          // Prevent blur
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index,
        option
      }) => {
        const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: getOptionLabel(option),
          tabIndex: -1,
          role: 'option',
          id: `${id}-option-${index}`,
          onMouseOver: handleOptionMouseOver,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          'data-option-index': index,
          'aria-disabled': disabled,
          'aria-selected': selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }

  function composeClasses(slots, getUtilityClass, classes) {
    const output = {};
    Object.keys(slots).forEach( // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
    // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    slot => {
      output[slot] = slots[slot].reduce((acc, key) => {
        if (key) {
          if (classes && classes[key]) {
            acc.push(classes[key]);
          }

          acc.push(getUtilityClass(key));
        }

        return acc;
      }, []).join(' ');
    });
    return output;
  }

  /**
   * Determines if a given element is a DOM element name (i.e. not a React component).
   */
  function isHostComponent(element) {
    return typeof element === 'string';
  }

  const defaultGenerator = componentName => componentName;

  const createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },

      generate(componentName) {
        return generate(componentName);
      },

      reset() {
        generate = defaultGenerator;
      }

    };
  };

  const ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator$1 = ClassNameGenerator;

  const globalStateClassesMapping = {
    active: 'Mui-active',
    checked: 'Mui-checked',
    completed: 'Mui-completed',
    disabled: 'Mui-disabled',
    error: 'Mui-error',
    expanded: 'Mui-expanded',
    focused: 'Mui-focused',
    focusVisible: 'Mui-focusVisible',
    required: 'Mui-required',
    selected: 'Mui-selected'
  };
  function generateUtilityClass(componentName, slot) {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass || `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
  }

  function generateUtilityClasses(componentName, slots) {
    const result = {};
    slots.forEach(slot => {
      result[slot] = generateUtilityClass(componentName, slot);
    });
    return result;
  }

  function getBackdropUtilityClass(slot) {
    return generateUtilityClass('MuiBackdrop', slot);
  }
  const backdropUnstyledClasses = generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);
  var backdropUnstyledClasses$1 = backdropUnstyledClasses;

  const _excluded$2h = ["classes", "className", "invisible", "component", "components", "componentsProps", "theme"];

  const useUtilityClasses$1P = ownerState => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ['root', invisible && 'invisible']
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };

  const BackdropUnstyled = /*#__PURE__*/React__namespace.forwardRef(function BackdropUnstyled(props, ref) {
    const {
      classes: classesProp,
      className,
      invisible = false,
      component = 'div',
      components = {},
      componentsProps = {},

      /* eslint-disable react/prop-types */
      theme
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2h);

    const ownerState = _extends({}, props, {
      classes: classesProp,
      invisible
    });

    const classes = useUtilityClasses$1P(ownerState);
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    return /*#__PURE__*/jsxRuntime_1(Root, _extends({
      "aria-hidden": true
    }, rootProps, !isHostComponent(Root) && {
      as: component,
      ownerState: _extends({}, ownerState, rootProps.ownerState),
      theme
    }, {
      ref: ref
    }, other, {
      className: clsx(classes.root, rootProps.className, className)
    }));
  });
  BackdropUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the Backdrop.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Backdrop.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: propTypes.bool
  } ;
  var BackdropUnstyled$1 = BackdropUnstyled;

  function getBadgeUtilityClass(slot) {
    return generateUtilityClass('MuiBadge', slot);
  }
  const badgeUnstyledClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular', 'invisible']);
  var badgeUnstyledClasses$1 = badgeUnstyledClasses;

  const _excluded$2g = ["anchorOrigin", "classes", "badgeContent", "component", "children", "className", "components", "componentsProps", "invisible", "max", "overlap", "showZero", "variant", "theme"];

  const useUtilityClasses$1O = ownerState => {
    const {
      variant,
      anchorOrigin,
      overlap,
      invisible,
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      badge: ['badge', variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, invisible && 'invisible']
    };
    return composeClasses(slots, getBadgeUtilityClass, classes);
  };

  const BadgeUnstyled = /*#__PURE__*/React__namespace.forwardRef(function BadgeUnstyled(props, ref) {
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: 'top',
        horizontal: 'right'
      },
      classes: classesProp,
      badgeContent: badgeContentProp,
      component = 'span',
      children,
      className,
      components = {},
      componentsProps = {},
      invisible: invisibleProp,
      max: maxProp = 99,
      overlap: overlapProp = 'rectangular',
      showZero = false,
      variant: variantProp = 'standard',

      /* eslint-disable react/prop-types */
      theme
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2g);

    const prevProps = usePreviousProps$1({
      anchorOrigin: anchorOriginProp,
      badgeContent: badgeContentProp,
      max: maxProp,
      overlap: overlapProp,
      variant: variantProp
    });
    let invisible = invisibleProp;

    if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
      invisible = true;
    }

    const {
      anchorOrigin = anchorOriginProp,
      badgeContent,
      max = maxProp,
      overlap = overlapProp,
      variant = variantProp
    } = invisible ? prevProps : props;

    const ownerState = _extends({}, props, {
      anchorOrigin,
      badgeContent,
      classes: classesProp,
      invisible,
      max,
      overlap,
      variant
    });

    let displayValue = '';

    if (variant !== 'dot') {
      displayValue = badgeContent > max ? `${max}+` : badgeContent;
    }

    const classes = useUtilityClasses$1O(ownerState);
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    const Badge = components.Badge || 'span';
    const badgeProps = componentsProps.badge || {};
    return /*#__PURE__*/jsxRuntime_2(Root, _extends({}, rootProps, !isHostComponent(Root) && {
      as: component,
      ownerState: _extends({}, ownerState, rootProps.ownerState),
      theme
    }, {
      ref: ref
    }, other, {
      className: clsx(classes.root, rootProps.className, className),
      children: [children, /*#__PURE__*/jsxRuntime_1(Badge, _extends({}, badgeProps, !isHostComponent(Badge) && {
        ownerState: _extends({}, ownerState, badgeProps.ownerState),
        theme
      }, {
        className: clsx(classes.badge, badgeProps.className),
        children: displayValue
      }))]
    }));
  });
  BadgeUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The anchor of the badge.
     * @default {
     *   vertical: 'top',
     *   horizontal: 'right',
     * }
     */
    anchorOrigin: propTypes.shape({
      horizontal: propTypes.oneOf(['left', 'right']).isRequired,
      vertical: propTypes.oneOf(['bottom', 'top']).isRequired
    }),

    /**
     * The content rendered within the badge.
     */
    badgeContent: propTypes.node,

    /**
     * The badge will be added relative to this node.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Badge: propTypes.elementType,
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * If `true`, the badge is invisible.
     */
    invisible: propTypes.bool,

    /**
     * Max count to show.
     * @default 99
     */
    max: propTypes.number,

    /**
     * Wrapped shape the badge should overlap.
     * @default 'rectangular'
     */
    overlap: propTypes.oneOf(['circular', 'rectangular']),

    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: propTypes.bool,

    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: propTypes.string
  } ;
  var BadgeUnstyled$1 = BadgeUnstyled;

  function getButtonUnstyledUtilityClass(slot) {
    return generateUtilityClass('ButtonUnstyled', slot);
  }
  const buttonUnstyledClasses = generateUtilityClasses('ButtonUnstyled', ['root', 'active', 'disabled', 'focusVisible']);
  var buttonUnstyledClasses$1 = buttonUnstyledClasses;

  /**
   * Extracts event handlers from a given object.
   * A prop is considered an event handler if it is a function and its name starts with `on`.
   *
   * @param object An object to extract event handlers from.
   */
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === undefined) {
      return {};
    }

    const result = {};
    Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
      result[prop] = object[prop];
    });
    return result;
  }

  function useButton(props) {
    var _ref;

    const {
      component,
      components = {},
      disabled = false,
      href,
      ref,
      tabIndex = 0,
      to,
      type
    } = props;
    const buttonRef = React__namespace.useRef();
    const [active, setActive] = React__namespace.useState(false);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);

    if (disabled && focusVisible) {
      setFocusVisible(false);
    }

    React__namespace.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);

    const createHandleMouseLeave = otherHandlers => event => {
      var _otherHandlers$onMous;

      if (focusVisible) {
        event.preventDefault();
      }

      (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
    };

    const createHandleBlur = otherHandlers => event => {
      var _otherHandlers$onBlur;

      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }

      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
    };

    const createHandleFocus = otherHandlers => event => {
      var _otherHandlers$onFocu2;

      // Fix for https://github.com/facebook/react/issues/7769
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }

      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        var _otherHandlers$onFocu;

        setFocusVisible(true);
        (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      }

      (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
    };

    const elementType = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';

    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return elementType !== 'button' && !((button == null ? void 0 : button.tagName) === 'A' && button != null && button.href);
    };

    const createHandleMouseDown = otherHandlers => event => {
      var _otherHandlers$onMous2;

      if (event.target === event.currentTarget && !disabled) {
        setActive(true);
      }

      (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
    };

    const createHandleMouseUp = otherHandlers => event => {
      var _otherHandlers$onMous3;

      if (event.target === event.currentTarget) {
        setActive(false);
      }

      (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
    };

    const createHandleKeyDown = otherHandlers => event => {
      var _otherHandlers$onKeyD;

      if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
        event.preventDefault();
      }

      if (event.target === event.currentTarget && event.key === ' ' && !disabled) {
        setActive(true);
      }

      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event); // Keyboard accessibility for non interactive elements

      if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
        var _otherHandlers$onClic;

        event.preventDefault();
        (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
      }
    };

    const createHandleKeyUp = otherHandlers => event => {
      var _otherHandlers$onKeyU;

      // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
      // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
      if (event.target === event.currentTarget) {
        setActive(false);
      }

      (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event); // Keyboard accessibility for non interactive elements

      if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
        var _otherHandlers$onClic2;

        (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
      }
    };

    const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
    const handleRef = useForkRef(ref, handleOwnRef);
    const [hostElementName, setHostElementName] = React__namespace.useState('');

    const updateRef = instance => {
      var _instance$tagName;

      setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');
      setRef(handleRef, instance);
    };

    const buttonProps = {};

    if (hostElementName === 'BUTTON') {
      buttonProps.type = type != null ? type : 'button';
      buttonProps.disabled = disabled;
    } else if (hostElementName !== '') {
      if (!href && !to) {
        buttonProps.role = 'button';
      }

      if (disabled) {
        buttonProps['aria-disabled'] = disabled;
      }
    }

    const getRootProps = otherHandlers => {
      const propsEventHandlers = extractEventHandlers(props);

      const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);

      const ownEventHandlers = {
        onBlur: createHandleBlur(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        onKeyUp: createHandleKeyUp(externalEventHandlers),
        onMouseDown: createHandleMouseDown(externalEventHandlers),
        onMouseLeave: createHandleMouseLeave(externalEventHandlers),
        onMouseUp: createHandleMouseUp(externalEventHandlers)
      };

      const mergedEventHandlers = _extends({}, externalEventHandlers, ownEventHandlers); // onFocusVisible can be present on the props, but since it's not a valid React event handler,
      // it must not be forwarded to the inner component.


      delete mergedEventHandlers.onFocusVisible;
      return _extends({
        tabIndex: disabled ? -1 : tabIndex,
        type,
        ref: updateRef
      }, buttonProps, mergedEventHandlers);
    };

    return {
      getRootProps,
      focusVisible,
      setFocusVisible,
      disabled,
      active
    };
  }

  /**
   * Appends the ownerState object to the props, merging with the existing one if necessary.
   *
   * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node, `ownerState` are not applied.
   * @param existingProps Props of the element.
   * @param ownerState
   */

  function appendOwnerState(elementType, existingProps, ownerState) {
    if (isHostComponent(elementType)) {
      return existingProps;
    }

    return _extends({}, existingProps, {
      ownerState: _extends({}, existingProps.ownerState, ownerState)
    });
  }

  const _excluded$2f = ["className", "component", "components", "componentsProps", "children", "disabled", "action", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave"];

  const useUtilityClasses$1N = ownerState => {
    const {
      active,
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']
    };
    return composeClasses(slots, getButtonUnstyledUtilityClass, {});
  };
  /**
   * The foundation for building custom-styled buttons.
   *
   * Demos:
   *
   * - [Buttons](https://mui.com/components/buttons/)
   *
   * API:
   *
   * - [ButtonUnstyled API](https://mui.com/api/button-unstyled/)
   */


  const ButtonUnstyled = /*#__PURE__*/React__namespace.forwardRef(function ButtonUnstyled(props, ref) {
    var _ref;

    const {
      className,
      component,
      components = {},
      componentsProps = {},
      children,
      action
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2f);

    const buttonRef = React__namespace.useRef();
    const handleRef = useForkRef(buttonRef, ref);
    const {
      active,
      focusVisible,
      setFocusVisible,
      getRootProps
    } = useButton(_extends({}, props, {
      ref: handleRef
    }));
    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), [setFocusVisible]);

    const ownerState = _extends({}, props, {
      active,
      focusVisible
    });

    const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';
    const buttonRootProps = appendOwnerState(ButtonRoot, _extends({}, other, componentsProps.root), ownerState);
    const classes = useUtilityClasses$1N(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ButtonRoot, _extends({}, getRootProps(), buttonRootProps, {
      className: clsx(classes.root, className, buttonRootProps.className),
      children: children
    }));
  });
  ButtonUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------

    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: propTypes.oneOfType([propTypes.func, propTypes.shape({
      current: propTypes.shape({
        focusVisible: propTypes.func.isRequired
      })
    })]),

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the Root slot.
     * Either a string to use a HTML element or a component.
     * This is equivalent to `components.Root`. If both are provided, the `component` is used.
     * @default 'button'
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the Button.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * @ignore
     */
    componentsProps: propTypes.object,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * @ignore
     */
    onFocusVisible: propTypes.func
  } ;
  var ButtonUnstyled$1 = ButtonUnstyled;

  /**
   * @ignore - internal component.
   */
  const FormControlUnstyledContext = /*#__PURE__*/React__namespace.createContext(undefined);

  {
    FormControlUnstyledContext.displayName = 'FormControlUnstyledContext';
  }

  var FormControlUnstyledContext$1 = FormControlUnstyledContext;

  function getFormControlUnstyledUtilityClasses(slot) {
    return generateUtilityClass('MuiFormControl', slot);
  }
  const formControlUnstyledClasses = generateUtilityClasses('MuiFormControl', ['root', 'disabled']);
  var classes$2 = formControlUnstyledClasses;

  const _excluded$2e = ["defaultValue", "children", "className", "component", "components", "componentsProps", "disabled", "error", "focused", "onChange", "required", "value"];

  function hasValue$1(value) {
    return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
  }

  /**
   * Provides context such as filled/focused/error/required for form inputs.
   * Relying on the context provides high flexibility and ensures that the state always stays
   * consistent across the children of the `FormControl`.
   * This context is used by the following components:
   *
   * *   FormLabel
   * *   FormHelperText
   * *   Input
   * *   InputLabel
   *
   * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).
   *
   * ```jsx
   * <FormControl>
   *   <InputLabel htmlFor="my-input">Email address</InputLabel>
   *   <Input id="my-input" aria-describedby="my-helper-text" />
   *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
   * </FormControl>
   * ```
   *
   * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
   * For instance, only one input can be focused at the same time, the state shouldn't be shared.
   *
   * Demos:
   *
   * - [Text Fields](https://mui.com/components/text-fields/)
   *
   * API:
   *
   * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)
   */
  const FormControlUnstyled = /*#__PURE__*/React__namespace.forwardRef(function FormControlUnstyled(props, ref) {
    var _ref;

    const {
      defaultValue,
      children,
      className,
      component,
      components = {},
      componentsProps = {},
      disabled = false,
      error = false,
      focused: visuallyFocused = false,
      onChange,
      required = false,
      value: incomingValue
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2e);

    const [value, setValue] = useControlled({
      controlled: incomingValue,
      default: defaultValue,
      name: 'FormControl',
      state: 'value'
    });
    const filled = hasValue$1(value);
    const [focusedState, setFocused] = React__namespace.useState(false);

    if (disabled && focusedState) {
      setFocused(false);
    }

    const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;

    const ownerState = _extends({}, props, {
      disabled,
      error,
      filled,
      focused,
      required
    });

    let registerEffect = () => {};

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const registeredInput = React__namespace.useRef(false);

      registerEffect = () => {
        if (registeredInput.current) {
          console.error(['MUI: There are multiple `Input` components inside a FormControl.', 'This creates visual inconsistencies, only use one `Input`.'].join('\n'));
        }

        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }

    const handleChange = event => {
      setValue(event.target.value);
      onChange == null ? void 0 : onChange(event);
    };

    const childContext = {
      disabled,
      error,
      filled,
      focused,
      onBlur: () => {
        setFocused(false);
      },
      onChange: handleChange,
      onFocus: () => {
        setFocused(true);
      },
      registerEffect,
      required,
      value: value != null ? value : ''
    };
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);
    return /*#__PURE__*/jsxRuntime_1(FormControlUnstyledContext$1.Provider, {
      value: childContext,
      children: /*#__PURE__*/jsxRuntime_1(Root, _extends({
        ref: ref
      }, rootProps, {
        className: clsx(classes$2.root, className, rootProps == null ? void 0 : rootProps.className, disabled && classes$2.disabled),
        children: children
      }))
    });
  });
  FormControlUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Class name applied to the root element.
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the FormControl.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * @ignore
     */
    componentsProps: propTypes.object,

    /**
     * @ignore
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: propTypes.bool,

    /**
     * If `true`, the component is displayed in focused state.
     * @default false
     */
    focused: propTypes.bool,

    /**
     * @ignore
     */
    onChange: propTypes.func,

    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: propTypes.bool,

    /**
     * @ignore
     */
    value: propTypes.any
  } ;
  var FormControlUnstyled$1 = FormControlUnstyled;

  function useFormControlUnstyled() {
    return React__namespace.useContext(FormControlUnstyledContext$1);
  }

  function getInputUnstyledUtilityClass(slot) {
    return generateUtilityClass('MuiInput', slot);
  }
  const inputBaseClasses$2 = generateUtilityClasses('MuiInput', ['root', 'formControl', 'focused', 'disabled', 'error', 'multiline', 'input', 'inputMultiline', 'inputTypeSearch', 'adornedStart', 'adornedEnd']);
  var classes$1 = inputBaseClasses$2;

  function useInput(props, inputRef) {
    const {
      defaultValue,
      disabled: disabledProp = false,
      error: errorProp = false,
      onBlur,
      onChange,
      onFocus,
      required: requiredProp = false,
      value: valueProp
    } = props;
    const formControlContext = useFormControlUnstyled();
    let value;
    let required;
    let disabled;
    let error;

    if (formControlContext) {
      var _formControlContext$d, _formControlContext$r, _formControlContext$e;

      value = formControlContext.value;
      disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
      required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
      error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
    } else {
      value = valueProp;
      disabled = disabledProp;
      required = requiredProp;
      error = errorProp;
    }

    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const handleInputRefWarning = React__namespace.useCallback(instance => {
      {
        if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
          console.error(['MUI: You have provided a `components.Input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
        }
      }
    }, []);
    const internalInputRef = React__namespace.useRef(null);
    const handleIncomingRef = useForkRef(inputRef, handleInputRefWarning);
    const handleInputRef = useForkRef(internalInputRef, handleIncomingRef);
    const [focused, setFocused] = React__namespace.useState(false); // The blur won't fire when the disabled state is set on a focused input.
    // We need to book keep the focused state manually.

    React__namespace.useEffect(() => {
      if (!formControlContext && disabled && focused) {
        setFocused(false); // @ts-ignore

        onBlur == null ? void 0 : onBlur();
      }
    }, [formControlContext, disabled, focused, onBlur]);

    const handleFocus = otherHandlers => event => {
      var _otherHandlers$onFocu;

      // Fix a bug with IE11 where the focus/blur events are triggered
      // while the component is disabled.
      if (formControlContext != null && formControlContext.disabled) {
        event.stopPropagation();
        return;
      }

      (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);

      if (formControlContext && formControlContext.onFocus) {
        var _formControlContext$o;

        formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
      } else {
        setFocused(true);
      }
    };

    const handleBlur = otherHandlers => event => {
      var _otherHandlers$onBlur;

      (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);

      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      } else {
        setFocused(false);
      }
    };

    const handleChange = otherHandlers => (event, ...args) => {
      var _formControlContext$o2, _otherHandlers$onChan;

      if (!isControlled) {
        const element = event.target || internalInputRef.current;

        if (element == null) {
          throw new Error(`MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
        }
      }

      formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event); // @ts-ignore

      (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
    };

    const handleClick = otherHandlers => event => {
      var _otherHandlers$onClic;

      if (internalInputRef.current && event.currentTarget === event.target) {
        internalInputRef.current.focus();
      }

      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
    };

    const getRootProps = externalProps => {
      // onBlur, onChange and onFocus are forwarded to the input slot.
      const propsEventHandlers = extractEventHandlers(props, ['onBlur', 'onChange', 'onFocus']);

      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));

      return _extends({}, externalProps, externalEventHandlers, {
        onClick: handleClick(externalEventHandlers)
      });
    };

    const getInputProps = externalProps => {
      const propsEventHandlers = {
        onBlur,
        onChange,
        onFocus
      };

      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));

      const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {
        onBlur: handleBlur(externalEventHandlers),
        onChange: handleChange(externalEventHandlers),
        onFocus: handleFocus(externalEventHandlers)
      });

      return _extends({}, mergedEventHandlers, {
        'aria-invalid': error || undefined,
        defaultValue: defaultValue,
        ref: handleInputRef,
        value: value,
        required,
        disabled
      });
    };

    return {
      disabled,
      error,
      focused,
      formControlContext,
      getInputProps,
      getRootProps,
      required,
      value
    };
  }

  const _excluded$2d = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "id", "maxRows", "minRows", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "rows", "type", "startAdornment", "value"];
  const InputUnstyled = /*#__PURE__*/React__namespace.forwardRef(function InputUnstyled(props, ref) {
    var _componentsProps$inpu, _ref, _componentsProps$root, _components$Input, _componentsProps$inpu2;

    const {
      'aria-describedby': ariaDescribedby,
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledby,
      autoComplete,
      autoFocus,
      className,
      component,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      endAdornment,
      error,
      id,
      maxRows,
      minRows,
      multiline = false,
      name,
      onClick,
      onChange,
      onKeyDown,
      onKeyUp,
      onFocus,
      onBlur,
      placeholder,
      readOnly,
      required,
      rows,
      type = 'text',
      startAdornment,
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2d);

    const {
      getRootProps,
      getInputProps,
      focused,
      formControlContext,
      error: errorState,
      disabled: disabledState
    } = useInput({
      disabled,
      defaultValue,
      error,
      onBlur,
      onClick,
      onChange,
      onFocus,
      required,
      value
    }, (_componentsProps$inpu = componentsProps.input) == null ? void 0 : _componentsProps$inpu.ref);

    const ownerState = _extends({}, props, {
      disabled: disabledState,
      error: errorState,
      focused,
      formControlContext,
      multiline,
      type
    });

    const rootStateClasses = clsx(disabledState && classes$1.disabled, errorState && classes$1.error, focused && classes$1.focused, Boolean(formControlContext) && classes$1.formControl, multiline && classes$1.multiline, Boolean(startAdornment) && classes$1.adornedStart, Boolean(endAdornment) && classes$1.adornedEnd);
    const inputStateClasses = clsx(disabledState && classes$1.disabled, multiline && classes$1.multiline);
    const propsToForward = {
      'aria-describedby': ariaDescribedby,
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledby,
      autoComplete,
      autoFocus,
      id,
      onKeyDown,
      onKeyUp,
      name,
      placeholder,
      readOnly,
      type
    };
    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';
    const rootProps = appendOwnerState(Root, _extends({}, getRootProps(_extends({}, other, componentsProps.root)), {
      className: clsx(classes$1.root, rootStateClasses, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
    }), ownerState);
    let Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
    let inputProps = appendOwnerState(Input, _extends({}, getInputProps(_extends({}, componentsProps.input, propsToForward)), {
      className: clsx(classes$1.input, inputStateClasses, (_componentsProps$inpu2 = componentsProps.input) == null ? void 0 : _componentsProps$inpu2.className)
    }), ownerState);

    if (multiline) {
      var _components$Textarea, _components$Textarea2;

      const hasHostTexarea = isHostComponent((_components$Textarea = components.Textarea) != null ? _components$Textarea : 'textarea');

      if (rows) {
        {
          if (minRows || maxRows) {
            console.warn('Material-UI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
          }
        }

        inputProps = _extends({
          type: undefined,
          minRows: hasHostTexarea ? undefined : rows,
          maxRows: hasHostTexarea ? undefined : rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: undefined,
          maxRows: hasHostTexarea ? undefined : maxRows,
          minRows: hasHostTexarea ? undefined : minRows
        }, inputProps);
      }

      Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : 'textarea';
    }

    return /*#__PURE__*/jsxRuntime_2(Root, _extends({}, rootProps, {
      ref: ref,
      children: [startAdornment, /*#__PURE__*/jsxRuntime_1(Input, _extends({}, inputProps)), endAdornment]
    }));
  });
  InputUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    'aria-describedby': propTypes.string,

    /**
     * @ignore
     */
    'aria-label': propTypes.string,

    /**
     * @ignore
     */
    'aria-labelledby': propTypes.string,

    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: propTypes.string,

    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: propTypes.bool,

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Class name applied to the root element.
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Input: propTypes.elementType,
      Root: propTypes.elementType,
      Textarea: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: propTypes.bool,

    /**
     * Trailing adornment for this input.
     */
    endAdornment: propTypes.node,

    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: propTypes.bool,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: propTypes.number,

    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: propTypes.number,

    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: propTypes.bool,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * @ignore
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * @ignore
     */
    onKeyUp: propTypes.func,

    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: propTypes.string,

    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: propTypes.bool,

    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: propTypes.bool,

    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: propTypes.number,

    /**
     * Leading adornment for this input.
     */
    startAdornment: propTypes.node,

    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: propTypes.string,

    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: propTypes.any
  } ;
  var InputUnstyled$1 = InputUnstyled;

  function getContainer$1(container) {
    return typeof container === 'function' ? container() : container;
  }
  /**
   * Portals provide a first-class way to render children into a DOM node
   * that exists outside the DOM hierarchy of the parent component.
   */


  const Portal = /*#__PURE__*/React__namespace.forwardRef(function Portal(props, ref) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React__namespace.useState(null);
    const handleRef = useForkRef( /*#__PURE__*/React__namespace.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect$1(() => {
      if (!disablePortal) {
        setMountNode(getContainer$1(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect$1(() => {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return () => {
          setRef(ref, null);
        };
      }

      return undefined;
    }, [ref, mountNode, disablePortal]);

    if (disablePortal) {
      if ( /*#__PURE__*/React__namespace.isValidElement(children)) {
        return /*#__PURE__*/React__namespace.cloneElement(children, {
          ref: handleRef
        });
      }

      return children;
    }

    return mountNode ? /*#__PURE__*/ReactDOM__namespace.createPortal(children, mountNode) : mountNode;
  });
  Portal.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The children to render into the `container`.
     */
    children: propTypes.node,

    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([HTMLElementType, propTypes.func]),

    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: propTypes.bool
  } ;

  {
    // eslint-disable-next-line
    Portal['propTypes' + ''] = exactProp(Portal.propTypes);
  }

  var Portal$1 = Portal;

  // Is a vertical scrollbar displayed?
  function isOverflowing(container) {
    const doc = ownerDocument(container);

    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }

    return container.scrollHeight > container.clientHeight;
  }

  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute('aria-hidden', 'true');
    } else {
      element.removeAttribute('aria-hidden');
    }
  }

  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }

  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    const blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];
    [].forEach.call(container.children, element => {
      if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
        ariaHidden(element, show);
      }
    });
  }

  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }

      return false;
    });
    return idx;
  }

  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;

    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        // Compute the size before applying overflow hidden to avoid any scroll jumps.
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: 'padding-right',
          el: container
        }); // Use computed style, here to get the real padding to add our scrollbar width.

        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`; // .mui-fixed is a global helper.

        const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
        [].forEach.call(fixedElements, element => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: 'padding-right',
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      } // Improve Gatsby support
      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/


      const parent = container.parentElement;
      const containerWindow = ownerWindow(container);
      const scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
      // screensize shrink.

      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: 'overflow',
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: 'overflow-x',
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: 'overflow-y',
        el: scrollContainer
      });
      scrollContainer.style.overflow = 'hidden';
    }

    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };

    return restore;
  }

  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, element => {
      if (element.getAttribute('aria-hidden') === 'true') {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }

  /**
   * @ignore - do not document.
   *
   * Proper state management for containers and the modals in those containers.
   * Simplified, but inspired by react-overlay's ModalManager class.
   * Used by the Modal to ensure proper styling of containers.
   */
  class ModalManager {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }

    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);

      if (modalIndex !== -1) {
        return modalIndex;
      }

      modalIndex = this.modals.length;
      this.modals.push(modal); // If the modal we are adding is already in the DOM.

      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }

      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, item => item.container === container);

      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }

      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }

    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];

      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }

    remove(modal) {
      const modalIndex = this.modals.indexOf(modal);

      if (modalIndex === -1) {
        return modalIndex;
      }

      const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

      if (containerInfo.modals.length === 0) {
        // The modal might be closed before it had the chance to be mounted in the DOM.
        if (containerInfo.restore) {
          containerInfo.restore();
        }

        if (modal.modalRef) {
          // In case the modal wasn't in the DOM yet.
          ariaHidden(modal.modalRef, true);
        }

        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        // Otherwise make sure the next top modal is visible to a screen reader.
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
        // aria-hidden because the dom element doesn't exist either
        // when modal was unmounted before modalRef gets null

        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }

      return modalIndex;
    }

    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }

  }

  const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');

  function getTabIndex(node) {
    const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);

    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    } // Browsers do not return `tabIndex` correctly for contentEditable nodes;
    // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    //  yet they are still part of the regular tab order; in FF, they get a default
    //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    //  order, consider their tab index to be 0.


    if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
      return 0;
    }

    return node.tabIndex;
  }

  function isNonTabbableRadio(node) {
    if (node.tagName !== 'INPUT' || node.type !== 'radio') {
      return false;
    }

    if (!node.name) {
      return false;
    }

    const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);

    let roving = getRadio(`[name="${node.name}"]:checked`);

    if (!roving) {
      roving = getRadio(`[name="${node.name}"]`);
    }

    return roving !== node;
  }

  function isNodeMatchingSelectorFocusable(node) {
    if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
      return false;
    }

    return true;
  }

  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
      const nodeTabIndex = getTabIndex(node);

      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
        return;
      }

      if (nodeTabIndex === 0) {
        regularTabNodes.push(node);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
  }

  function defaultIsEnabled() {
    return true;
  }
  /**
   * Utility component that locks focus inside the component.
   */


  function Unstable_TrapFocus(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React__namespace.useRef();
    const sentinelStart = React__namespace.useRef(null);
    const sentinelEnd = React__namespace.useRef(null);
    const nodeToRestore = React__namespace.useRef(null);
    const reactFocusEventTarget = React__namespace.useRef(null); // This variable is useful when disableAutoFocus is true.
    // It waits for the active element to move into the component to activate.

    const activated = React__namespace.useRef(false);
    const rootRef = React__namespace.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      // We might render an empty child.
      if (!open || !rootRef.current) {
        return;
      }

      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React__namespace.useEffect(() => {
      // We might render an empty child.
      if (!open || !rootRef.current) {
        return;
      }

      const doc = ownerDocument(rootRef.current);

      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute('tabIndex')) {
          {
            console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
          }

          rootRef.current.setAttribute('tabIndex', -1);
        }

        if (activated.current) {
          rootRef.current.focus();
        }
      }

      return () => {
        // restoreLastFocus()
        if (!disableRestoreFocus) {
          // In IE11 it is possible for document.activeElement to be null resulting
          // in nodeToRestore.current being null.
          // Not all elements in IE11 have a focus method.
          // Once IE11 support is dropped the focus() call can be unconditional.
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }

          nodeToRestore.current = null;
        }
      }; // Missing `disableRestoreFocus` which is fine.
      // We don't support changing that prop on an open TrapFocus
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [open]);
    React__namespace.useEffect(() => {
      // We might render an empty child.
      if (!open || !rootRef.current) {
        return;
      }

      const doc = ownerDocument(rootRef.current);

      const contain = nativeEvent => {
        const {
          current: rootElement
        } = rootRef; // Cleanup functions are executed lazily in React 17.
        // Contain can be called between the component being unmounted and its cleanup function being run.

        if (rootElement === null) {
          return;
        }

        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }

        if (!rootElement.contains(doc.activeElement)) {
          // if the focus event is not coming from inside the children's react tree, reset the refs
          if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }

          if (!activated.current) {
            return;
          }

          let tabbable = [];

          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }

          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;

            const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];

            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          } else {
            rootElement.focus();
          }
        }
      };

      const loopFocus = nativeEvent => {
        lastKeydown.current = nativeEvent;

        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
          return;
        } // Make sure the next tab starts from the right place.
        // doc.activeElement referes to the origin.


        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          // We need to ignore the next contain as
          // it will try to move the focus back to the rootRef element.
          ignoreNextEnforceFocus.current = true;
          sentinelEnd.current.focus();
        }
      };

      doc.addEventListener('focusin', contain);
      doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
      // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
      // Instead, we can look if the active element was restored on the BODY element.
      //
      // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
      // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

      const interval = setInterval(() => {
        if (doc.activeElement.tagName === 'BODY') {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener('focusin', contain);
        doc.removeEventListener('keydown', loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);

    const onFocus = event => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }

      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;

      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };

    const handleFocusSentinel = event => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }

      activated.current = true;
    };

    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), /*#__PURE__*/React__namespace.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /*#__PURE__*/jsxRuntime_1("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      })]
    });
  }

  Unstable_TrapFocus.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1,

    /**
     * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the trap focus less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: propTypes.bool,

    /**
     * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
     *
     * Generally this should never be set to `true` as it makes the trap focus less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: propTypes.bool,

    /**
     * If `true`, the trap focus will not restore focus to previously focused element once
     * trap focus is hidden.
     * @default false
     */
    disableRestoreFocus: propTypes.bool,

    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: propTypes.func,

    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple trap focus mounted at the same time.
     * @default function defaultIsEnabled() {
     *   return true;
     * }
     */
    isEnabled: propTypes.func,

    /**
     * If `true`, focus is locked.
     */
    open: propTypes.bool.isRequired
  } ;

  {
    // eslint-disable-next-line
    Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);
  }

  function getModalUtilityClass(slot) {
    return generateUtilityClass('MuiModal', slot);
  }
  const modalUnstyledClasses = generateUtilityClasses('MuiModal', ['root', 'hidden']);
  var modalUnstyledClasses$1 = modalUnstyledClasses;

  const _excluded$2c = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];

  const useUtilityClasses$1M = ownerState => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ['root', !open && exited && 'hidden']
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };

  function getContainer(container) {
    return typeof container === 'function' ? container() : container;
  }

  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty('in') : false;
  } // A modal manager used to track and manage the state of open Modals.
  // Modals don't open on the server so this won't conflict with concurrent requests.


  const defaultManager = new ModalManager();
  /**
   * Modal is a lower-level construct that is leveraged by the following components:
   *
   * - [Dialog](/api/dialog/)
   * - [Drawer](/api/drawer/)
   * - [Menu](/api/menu/)
   * - [Popover](/api/popover/)
   *
   * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
   * rather than directly using Modal.
   *
   * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
   */

  const ModalUnstyled = /*#__PURE__*/React__namespace.forwardRef(function ModalUnstyled(props, ref) {
    const {
      BackdropComponent,
      BackdropProps,
      children,
      classes: classesProp,
      className,
      closeAfterTransition = false,
      component = 'div',
      components = {},
      componentsProps = {},
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      // private
      // eslint-disable-next-line react/prop-types
      manager = defaultManager,
      onBackdropClick,
      onClose,
      onKeyDown,
      open,

      /* eslint-disable react/prop-types */
      theme,
      onTransitionEnter,
      onTransitionExited
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2c);

    const [exited, setExited] = React__namespace.useState(true);
    const modal = React__namespace.useRef({});
    const mountNodeRef = React__namespace.useRef(null);
    const modalRef = React__namespace.useRef(null);
    const handleRef = useForkRef(modalRef, ref);
    const hasTransition = getHasTransition(props);

    const getDoc = () => ownerDocument(mountNodeRef.current);

    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };

    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      }); // Fix a bug on Chrome where the scroll isn't initially 0.

      modalRef.current.scrollTop = 0;
    };

    const handleOpen = useEventCallback(() => {
      const resolvedContainer = getContainer(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer); // The element was already mounted.

      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React__namespace.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback(node => {
      mountNodeRef.current = node;

      if (!node) {
        return;
      }

      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    const handleClose = React__namespace.useCallback(() => {
      manager.remove(getModal());
    }, [manager]);
    React__namespace.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React__namespace.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);

    const ownerState = _extends({}, props, {
      classes: classesProp,
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      exited,
      hideBackdrop,
      keepMounted
    });

    const classes = useUtilityClasses$1M(ownerState);

    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }

    const handleEnter = () => {
      setExited(false);

      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };

    const handleExited = () => {
      setExited(true);

      if (onTransitionExited) {
        onTransitionExited();
      }

      if (closeAfterTransition) {
        handleClose();
      }
    };

    const handleBackdropClick = event => {
      if (event.target !== event.currentTarget) {
        return;
      }

      if (onBackdropClick) {
        onBackdropClick(event);
      }

      if (onClose) {
        onClose(event, 'backdropClick');
      }
    };

    const handleKeyDown = event => {
      if (onKeyDown) {
        onKeyDown(event);
      } // The handler doesn't take event.defaultPrevented into account:
      //
      // event.preventDefault() is meant to stop default behaviors like
      // clicking a checkbox to check it, hitting a button to submit a form,
      // and hitting left arrow to move the cursor in a text input etc.
      // Only special HTML elements have these default behaviors.


      if (event.key !== 'Escape' || !isTopModal()) {
        return;
      }

      if (!disableEscapeKeyDown) {
        // Swallow the event, in case someone is listening for the escape key on the body.
        event.stopPropagation();

        if (onClose) {
          onClose(event, 'escapeKeyDown');
        }
      }
    };

    const childProps = {};

    if (children.props.tabIndex === undefined) {
      childProps.tabIndex = '-1';
    } // It's a Transition like component


    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }

    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    return /*#__PURE__*/jsxRuntime_1(Portal$1, {
      ref: handlePortalRef,
      container: container,
      disablePortal: disablePortal,
      children: /*#__PURE__*/jsxRuntime_2(Root, _extends({
        role: "presentation"
      }, rootProps, !isHostComponent(Root) && {
        as: component,
        ownerState: _extends({}, ownerState, rootProps.ownerState),
        theme
      }, other, {
        ref: handleRef,
        onKeyDown: handleKeyDown,
        className: clsx(classes.root, rootProps.className, className),
        children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntime_1(BackdropComponent, _extends({
          open: open,
          onClick: handleBackdropClick
        }, BackdropProps)) : null, /*#__PURE__*/jsxRuntime_1(Unstable_TrapFocus, {
          disableEnforceFocus: disableEnforceFocus,
          disableAutoFocus: disableAutoFocus,
          disableRestoreFocus: disableRestoreFocus,
          isEnabled: isTopModal,
          open: open,
          children: /*#__PURE__*/React__namespace.cloneElement(children, childProps)
        })]
      }))
    });
  });
  ModalUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     */
    BackdropComponent: propTypes.elementType,

    /**
     * Props applied to the [`BackdropUnstyled`](/api/backdrop-unstyled/) element.
     */
    BackdropProps: propTypes.object,

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: propTypes.bool,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([HTMLElementType, propTypes.func]),

    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: propTypes.bool,

    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: propTypes.bool,

    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: propTypes.bool,

    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: propTypes.bool,

    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden.
     * @default false
     */
    disableRestoreFocus: propTypes.bool,

    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: propTypes.bool,

    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: propTypes.bool,

    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: propTypes.bool,

    /**
     * Callback fired when the backdrop is clicked.
     */
    onBackdropClick: propTypes.func,

    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: propTypes.func,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired
  } ;
  var ModalUnstyled$1 = ModalUnstyled;

  function NoSsr(props) {
    const {
      children,
      defer = false,
      fallback = null
    } = props;
    const [mountedState, setMountedState] = React__namespace.useState(false);
    useEnhancedEffect$1(() => {
      if (!defer) {
        setMountedState(true);
      }
    }, [defer]);
    React__namespace.useEffect(() => {
      if (defer) {
        setMountedState(true);
      }
    }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.

    return /*#__PURE__*/jsxRuntime_1(React__namespace.Fragment, {
      children: mountedState ? children : fallback
    });
  }

  NoSsr.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * You can wrap a node.
     */
    children: propTypes.node,

    /**
     * If `true`, the component will not only prevent server-side rendering.
     * It will also defer the rendering of the children into a different screen frame.
     * @default false
     */
    defer: propTypes.bool,

    /**
     * The fallback content to display.
     * @default null
     */
    fallback: propTypes.node
  } ;

  {
    // eslint-disable-next-line
    NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  /*:: import type { Window } from '../types'; */

  /*:: declare function getWindow(node: Node | Window): Window; */
  function getWindow(node) {
    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  /*:: declare function isElement(node: mixed): boolean %checks(node instanceof
    Element); */

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  /*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
    HTMLElement); */


  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  /*:: declare function isShadowRoot(node: mixed): boolean %checks(node instanceof
    ShadowRoot); */


  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  // Returns the layout rect of an element relative to its offsetParent. Layout
  // means it doesn't take into account transforms.
  function getLayoutRect(element) {
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().includes('firefox');
    var currentNode = getParentNode(element);

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].includes(css.willChange) || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  var max = Math.max;
  var min = Math.min;
  var round$2 = Math.round;

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = state.modifiersData[name + "#persistent"].padding;
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,
        _options$padding = options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    state.elements.arrow = arrowElement;
    state.modifiersData[name + "#persistent"] = {
      padding: mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements))
    };
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round$2(round$2(x * dpr) / dpr) || 0,
      y: round$2(round$2(y * dpr) / dpr) || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets;

    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
        _ref3$x = _ref3.x,
        x = _ref3$x === void 0 ? 0 : _ref3$x,
        _ref3$y = _ref3.y,
        y = _ref3$y === void 0 ? 0 : _ref3$y;

    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      /*:: offsetParent = (offsetParent: Element); */


      if (placement === top) {
        sideY = bottom; // $FlowFixMe[prop-missing]

        y -= offsetParent[heightProp] - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left) {
        sideX = right; // $FlowFixMe[prop-missing]

        x -= offsetParent[widthProp] - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref4) {
    var state = _ref4.state,
        options = _ref4.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getBoundingClientRect(element) {
    var rect = element.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      y: rect.top
    };
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var referenceElement = state.elements.reference;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(referenceElement);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  /*:: type OverflowsMap = { [ComputedPlacement]: number }; */

  /*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis || checkAltAxis) {
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
      var max$1 = popperOffsets[mainAxis] - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

      if (checkMainAxis) {
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement);
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      Object.keys(modifier).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (!Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(options) {
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  const _excluded$2b = ["anchorEl", "children", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "TransitionProps"],
        _excluded2$a = ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];

  function flipPlacement(placement, theme) {
    const direction = theme && theme.direction || 'ltr';

    if (direction === 'ltr') {
      return placement;
    }

    switch (placement) {
      case 'bottom-end':
        return 'bottom-start';

      case 'bottom-start':
        return 'bottom-end';

      case 'top-end':
        return 'top-start';

      case 'top-start':
        return 'top-end';

      default:
        return placement;
    }
  }

  function resolveAnchorEl$1(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
  }

  const defaultPopperOptions = {};
  /* eslint-disable react/prop-types */

  const PopperTooltip = /*#__PURE__*/React__namespace.forwardRef(function PopperTooltip(props, ref) {
    const {
      anchorEl,
      children,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      TransitionProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2b);

    const tooltipRef = React__namespace.useRef(null);
    const ownRef = useForkRef(tooltipRef, ref);
    const popperRef = React__namespace.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React__namespace.useRef(handlePopperRef);
    useEnhancedEffect$1(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React__namespace.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const theme = useTheme$2();
    const rtlPlacement = flipPlacement(initialPlacement, theme);
    /**
     * placement initialized from prop but can change during lifetime if modifiers.flip.
     * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
     */

    const [placement, setPlacement] = React__namespace.useState(rtlPlacement);
    React__namespace.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    useEnhancedEffect$1(() => {
      if (!anchorEl || !open) {
        return undefined;
      }

      const handlePopperUpdate = data => {
        setPlacement(data.placement);
      };

      const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);

      {
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();

          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        }
      }

      let popperModifiers = [{
        name: 'preventOverflow',
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: 'flip',
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: 'onUpdate',
        enabled: true,
        phase: 'afterWrite',
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];

      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }

      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }

      const popper = createPopper(resolveAnchorEl$1(anchorEl), tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper);
      return () => {
        popper.destroy();
        handlePopperRefRef.current(null);
      };
    }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };

    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }

    return /*#__PURE__*/jsxRuntime_1("div", _extends({
      ref: ownRef,
      role: "tooltip"
    }, other, {
      children: typeof children === 'function' ? children(childProps) : children
    }));
  });
  /* eslint-enable react/prop-types */

  /**
   * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
   */

  const Popper = /*#__PURE__*/React__namespace.forwardRef(function Popper(props, ref) {
    const {
      anchorEl,
      children,
      container: containerProp,
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = 'bottom',
      popperOptions = defaultPopperOptions,
      popperRef,
      style,
      transition = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded2$a);

    const [exited, setExited] = React__namespace.useState(true);

    const handleEnter = () => {
      setExited(false);
    };

    const handleExited = () => {
      setExited(true);
    };

    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    } // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container


    const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl$1(anchorEl)).body : undefined);
    return /*#__PURE__*/jsxRuntime_1(Portal$1, {
      disablePortal: disablePortal,
      container: container,
      children: /*#__PURE__*/jsxRuntime_1(PopperTooltip, _extends({
        anchorEl: anchorEl,
        disablePortal: disablePortal,
        modifiers: modifiers,
        ref: ref,
        open: transition ? !exited : open,
        placement: placement,
        popperOptions: popperOptions,
        popperRef: popperRef
      }, other, {
        style: _extends({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: 'fixed',
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display: !open && keepMounted && (!transition || exited) ? 'none' : null
        }, style),
        TransitionProps: transition ? {
          in: open,
          onEnter: handleEnter,
          onExited: handleExited
        } : null,
        children: children
      }))
    });
  });
  Popper.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: chainPropTypes(propTypes.oneOfType([HTMLElementType, propTypes.object, propTypes.func]), props => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);

        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();

          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a virtualElement ', '(https://popper.js.org/docs/v2/virtual-elements/).'].join('\n'));
        }
      }

      return null;
    }),

    /**
     * Popper render function or node.
     */
    children: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.node, propTypes.func]),

    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([HTMLElementType, propTypes.func]),

    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: propTypes.bool,

    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: propTypes.bool,

    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: propTypes.arrayOf(propTypes.shape({
      data: propTypes.object,
      effect: propTypes.func,
      enabled: propTypes.bool,
      fn: propTypes.func,
      name: propTypes.any.isRequired,
      options: propTypes.object,
      phase: propTypes.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
      requires: propTypes.arrayOf(propTypes.string),
      requiresIfExists: propTypes.arrayOf(propTypes.string)
    })),

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: propTypes.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: propTypes.shape({
      modifiers: propTypes.array,
      onFirstUpdate: propTypes.func,
      placement: propTypes.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
      strategy: propTypes.oneOf(['absolute', 'fixed'])
    }),

    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType$1,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: propTypes.bool
  } ;
  var Popper$1 = Popper;

  function getSliderUtilityClass(slot) {
    return generateUtilityClass('MuiSlider', slot);
  }
  const sliderUnstyledClasses = generateUtilityClasses('MuiSlider', ['root', 'active', 'focusVisible', 'disabled', 'dragging', 'marked', 'vertical', 'trackInverted', 'trackFalse', 'rail', 'track', 'mark', 'markActive', 'markLabel', 'markLabelActive', 'thumb', 'valueLabel', 'valueLabelOpen', 'valueLabelCircle', 'valueLabelLabel']);
  var sliderUnstyledClasses$1 = sliderUnstyledClasses;

  const useValueLabelClasses = props => {
    const {
      open
    } = props;
    const utilityClasses = {
      offset: clsx(open && sliderUnstyledClasses$1.valueLabelOpen),
      circle: sliderUnstyledClasses$1.valueLabelCircle,
      label: sliderUnstyledClasses$1.valueLabelLabel
    };
    return utilityClasses;
  };
  /**
   * @ignore - internal component.
   */


  function SliderValueLabelUnstyled(props) {
    const {
      children,
      className,
      value,
      theme
    } = props;
    const classes = useValueLabelClasses(props);
    return /*#__PURE__*/React__namespace.cloneElement(children, {
      className: clsx(children.props.className)
    }, /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [children.props.children, /*#__PURE__*/jsxRuntime_1("span", {
        className: clsx(classes.offset, className),
        theme: theme,
        "aria-hidden": true,
        children: /*#__PURE__*/jsxRuntime_1("span", {
          className: classes.circle,
          children: /*#__PURE__*/jsxRuntime_1("span", {
            className: classes.label,
            children: value
          })
        })
      })]
    }));
  }

  SliderValueLabelUnstyled.propTypes = {
    children: propTypes.element.isRequired,
    className: propTypes.string,
    theme: propTypes.any,
    value: propTypes.node
  } ;

  const _excluded$2a = ["aria-label", "aria-labelledby", "aria-valuetext", "className", "component", "classes", "defaultValue", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "components", "componentsProps"];
  const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;

  function asc(a, b) {
    return a - b;
  }

  function clamp$2(value, min, max) {
    if (value == null) {
      return min;
    }

    return Math.min(Math.max(min, value), max);
  }

  function findClosest(values, currentValue) {
    const {
      index: closestIndex
    } = values.reduce((acc, value, index) => {
      const distance = Math.abs(currentValue - value);

      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index
        };
      }

      return acc;
    }, null);
    return closestIndex;
  }

  function trackFinger(event, touchId) {
    if (touchId.current !== undefined && event.changedTouches) {
      for (let i = 0; i < event.changedTouches.length; i += 1) {
        const touch = event.changedTouches[i];

        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }

      return false;
    }

    return {
      x: event.clientX,
      y: event.clientY
    };
  }

  function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
  }

  function percentToValue(percent, min, max) {
    return (max - min) * percent + min;
  }

  function getDecimalPrecision$1(num) {
    // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
    // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split('e-');
      const matissaDecimalPart = parts[0].split('.')[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }

    const decimalPart = num.toString().split('.')[1];
    return decimalPart ? decimalPart.length : 0;
  }

  function roundValueToStep(value, step, min) {
    const nearest = Math.round((value - min) / step) * step + min;
    return Number(nearest.toFixed(getDecimalPrecision$1(step)));
  }

  function setValueIndex({
    values,
    newValue,
    index
  }) {
    const output = values.slice();
    output[index] = newValue;
    return output.sort(asc);
  }

  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    const doc = ownerDocument(sliderRef.current);

    if (!sliderRef.current.contains(doc.activeElement) || Number(doc.activeElement.getAttribute('data-index')) !== activeIndex) {
      sliderRef.current.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }

    if (setActive) {
      setActive(activeIndex);
    }
  }

  const axisProps = {
    horizontal: {
      offset: percent => ({
        left: `${percent}%`
      }),
      leap: percent => ({
        width: `${percent}%`
      })
    },
    'horizontal-reverse': {
      offset: percent => ({
        right: `${percent}%`
      }),
      leap: percent => ({
        width: `${percent}%`
      })
    },
    vertical: {
      offset: percent => ({
        bottom: `${percent}%`
      }),
      leap: percent => ({
        height: `${percent}%`
      })
    }
  };

  const Identity = x => x; // TODO: remove support for Safari < 13.
  // https://caniuse.com/#search=touch-action
  //
  // Safari, on iOS, supports touch action since v13.
  // Over 80% of the iOS phones are compatible
  // in August 2020.
  // Utilizing the CSS.supports method to check if touch-action is supported.
  // Since CSS.supports is supported on all but Edge@12 and IE and touch-action
  // is supported on both Edge@12 and IE if CSS.supports is not available that means that
  // touch-action will be supported


  let cachedSupportsTouchActionNone;

  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === undefined) {
      if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {
        cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }

    return cachedSupportsTouchActionNone;
  }

  const useUtilityClasses$1L = ownerState => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes
    } = ownerState;
    const slots = {
      root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],
      rail: ['rail'],
      track: ['track'],
      mark: ['mark'],
      markActive: ['markActive'],
      markLabel: ['markLabel'],
      markLabelActive: ['markLabelActive'],
      valueLabel: ['valueLabel'],
      thumb: ['thumb', disabled && 'disabled'],
      active: ['active'],
      disabled: ['disabled'],
      focusVisible: ['focusVisible']
    };
    return composeClasses(slots, getSliderUtilityClass, classes);
  };

  const Forward = ({
    children
  }) => children;

  const SliderUnstyled = /*#__PURE__*/React__namespace.forwardRef(function SliderUnstyled(props, ref) {
    const {
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledby,
      'aria-valuetext': ariaValuetext,
      className,
      component = 'span',
      classes: classesProp,
      defaultValue,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max = 100,
      min = 0,
      name,
      onChange,
      onChangeCommitted,
      onMouseDown,
      orientation = 'horizontal',
      scale = Identity,
      step = 1,
      tabIndex,
      track = 'normal',
      value: valueProp,
      valueLabelDisplay = 'off',
      valueLabelFormat = Identity,
      isRtl = false,
      components = {},
      componentsProps = {}
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2a);

    const touchId = React__namespace.useRef(); // We can't use the :active browser pseudo-classes.
    // - The active state isn't triggered when clicking on the rail.
    // - The active state isn't transferred when inversing a range slider.

    const [active, setActive] = React__namespace.useState(-1);
    const [open, setOpen] = React__namespace.useState(-1);
    const [dragging, setDragging] = React__namespace.useState(false);
    const moveCount = React__namespace.useRef(0);
    const [valueDerived, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue != null ? defaultValue : min,
      name: 'Slider'
    });

    const handleChange = onChange && ((event, value, thumbIndex) => {
      // Redefine target to allow name and value to be read.
      // This allows seamless integration with the most popular form libraries.
      // https://github.com/mui-org/material-ui/issues/13485#issuecomment-676048492
      // Clone the event to not override `target` of the original event.
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, 'target', {
        writable: true,
        value: {
          value,
          name
        }
      });
      onChange(clonedEvent, value, thumbIndex);
    });

    const range = Array.isArray(valueDerived);
    let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values = values.map(value => clamp$2(value, min, max));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
      value: min + step * index
    })) : marksProp || [];
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(-1);
    const sliderRef = React__namespace.useRef();
    const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
    const handleRef = useForkRef(ref, handleFocusRef);

    const handleFocus = event => {
      const index = Number(event.currentTarget.getAttribute('data-index'));
      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setFocusVisible(index);
      }

      setOpen(index);
    };

    const handleBlur = event => {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(-1);
      }

      setOpen(-1);
    };

    const handleMouseOver = useEventCallback(event => {
      const index = Number(event.currentTarget.getAttribute('data-index'));
      setOpen(index);
    });
    const handleMouseLeave = useEventCallback(() => {
      setOpen(-1);
    });
    useEnhancedEffect$1(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        // This is necessary because Firefox and Safari will keep focus
        // on a disabled element:
        // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
        document.activeElement.blur();
      }
    }, [disabled]);

    if (disabled && active !== -1) {
      setActive(-1);
    }

    if (disabled && focusVisible !== -1) {
      setFocusVisible(-1);
    }

    const handleHiddenInputChange = event => {
      const index = Number(event.currentTarget.getAttribute('data-index'));
      const value = values[index];
      const marksValues = marks.map(mark => mark.value);
      const marksIndex = marksValues.indexOf(value);
      let newValue = event.target.valueAsNumber;

      if (marks && step == null) {
        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
      }

      newValue = clamp$2(newValue, min, max);

      if (marks && step == null) {
        const markValues = marks.map(mark => mark.value);
        const currentMarkIndex = markValues.indexOf(values[index]);
        newValue = newValue < values[index] ? markValues[currentMarkIndex - 1] : markValues[currentMarkIndex + 1];
      }

      if (range) {
        // Bound the new value to the thumb's neighbours.
        if (disableSwap) {
          newValue = clamp$2(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
        }

        const previousValue = newValue;
        newValue = setValueIndex({
          values,
          newValue,
          index
        });
        let activeIndex = index; // Potentially swap the index if needed.

        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }

        focusThumb({
          sliderRef,
          activeIndex
        });
      }

      setValueState(newValue);
      setFocusVisible(index);

      if (handleChange) {
        handleChange(event, newValue, index);
      }

      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    };

    const previousIndex = React__namespace.useRef();
    let axis = orientation;

    if (isRtl && orientation !== "vertical") {
      axis += '-reverse';
    }

    const getFingerNewValue = ({
      finger,
      move = false,
      values: values2
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width,
        height,
        bottom,
        left
      } = slider.getBoundingClientRect();
      let percent;

      if (axis.indexOf('vertical') === 0) {
        percent = (bottom - finger.y) / height;
      } else {
        percent = (finger.x - left) / width;
      }

      if (axis.indexOf('-reverse') !== -1) {
        percent = 1 - percent;
      }

      let newValue;
      newValue = percentToValue(percent, min, max);

      if (step) {
        newValue = roundValueToStep(newValue, step, min);
      } else {
        const marksValues = marks.map(mark => mark.value);
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }

      newValue = clamp$2(newValue, min, max);
      let activeIndex = 0;

      if (range) {
        if (!move) {
          activeIndex = findClosest(values2, newValue);
        } else {
          activeIndex = previousIndex.current;
        } // Bound the new value to the thumb's neighbours.


        if (disableSwap) {
          newValue = clamp$2(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
        }

        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: activeIndex
        }); // Potentially swap the index if needed.

        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }

      return {
        newValue,
        activeIndex
      };
    };

    const handleTouchMove = useEventCallback(nativeEvent => {
      const finger = trackFinger(nativeEvent, touchId);

      if (!finger) {
        return;
      }

      moveCount.current += 1; // Cancel move in case some other element consumed a mouseup event and it was not fired.

      if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        handleTouchEnd(nativeEvent);
        return;
      }

      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true,
        values
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);

      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }

      if (handleChange) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = useEventCallback(nativeEvent => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);

      if (!finger) {
        return;
      }

      const {
        newValue
      } = getFingerNewValue({
        finger,
        values
      });
      setActive(-1);

      if (nativeEvent.type === 'touchend') {
        setOpen(-1);
      }

      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, newValue);
      }

      touchId.current = undefined; // eslint-disable-next-line @typescript-eslint/no-use-before-define

      stopListening();
    });
    const handleTouchStart = useEventCallback(nativeEvent => {
      // If touch-action: none; is not supported we need to prevent the scroll manually.
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }

      const touch = nativeEvent.changedTouches[0];

      if (touch != null) {
        // A number that uniquely identifies the current finger in the touch session.
        touchId.current = touch.identifier;
      }

      const finger = trackFinger(nativeEvent, touchId);
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        values
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);

      if (handleChange) {
        handleChange(nativeEvent, newValue, activeIndex);
      }

      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener('touchmove', handleTouchMove);
      doc.addEventListener('touchend', handleTouchEnd);
    });
    const stopListening = React__namespace.useCallback(() => {
      const doc = ownerDocument(sliderRef.current);
      doc.removeEventListener('mousemove', handleTouchMove);
      doc.removeEventListener('mouseup', handleTouchEnd);
      doc.removeEventListener('touchmove', handleTouchMove);
      doc.removeEventListener('touchend', handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React__namespace.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener('touchstart', handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener('touchstart', handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React__namespace.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const handleMouseDown = useEventCallback(event => {
      if (onMouseDown) {
        onMouseDown(event);
      } // Only handle left clicks


      if (event.button !== 0) {
        return;
      } // Avoid text selection


      event.preventDefault();
      const finger = trackFinger(event, touchId);
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        values
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);

      if (handleChange) {
        handleChange(event, newValue, activeIndex);
      }

      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener('mousemove', handleTouchMove);
      doc.addEventListener('mouseup', handleTouchEnd);
    });
    const trackOffset = valueToPercent(range ? values[0] : min, min, max);
    const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;

    const trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));

    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    const Rail = components.Rail || 'span';
    const railProps = componentsProps.rail || {};
    const Track = components.Track || 'span';
    const trackProps = componentsProps.track || {};
    const Thumb = components.Thumb || 'span';
    const thumbProps = componentsProps.thumb || {};
    const ValueLabel = components.ValueLabel || SliderValueLabelUnstyled;
    const valueLabelProps = componentsProps.valueLabel || {};
    const Mark = components.Mark || 'span';
    const markProps = componentsProps.mark || {};
    const MarkLabel = components.MarkLabel || 'span';
    const markLabelProps = componentsProps.markLabel || {}; // all props with defaults
    // consider extracting to hook an reusing the lint rule for the varints

    const ownerState = _extends({}, props, {
      classes: classesProp,
      disabled,
      dragging,
      isRtl,
      marked: marks.length > 0 && marks.some(mark => mark.label),
      max,
      min,
      orientation,
      scale,
      step,
      track,
      valueLabelDisplay,
      valueLabelFormat
    });

    const classes = useUtilityClasses$1L(ownerState);
    return /*#__PURE__*/jsxRuntime_2(Root, _extends({
      ref: handleRef,
      onMouseDown: handleMouseDown
    }, rootProps, !isHostComponent(Root) && {
      as: component,
      ownerState: _extends({}, ownerState, rootProps.ownerState)
    }, other, {
      className: clsx(classes.root, rootProps.className, className),
      children: [/*#__PURE__*/jsxRuntime_1(Rail, _extends({}, railProps, !isHostComponent(Rail) && {
        ownerState: _extends({}, ownerState, railProps.ownerState)
      }, {
        className: clsx(classes.rail, railProps.className)
      })), /*#__PURE__*/jsxRuntime_1(Track, _extends({}, trackProps, !isHostComponent(Track) && {
        ownerState: _extends({}, ownerState, trackProps.ownerState)
      }, {
        className: clsx(classes.track, trackProps.className),
        style: _extends({}, trackStyle, trackProps.style)
      })), marks.map((mark, index) => {
        const percent = valueToPercent(mark.value, min, max);
        const style = axisProps[axis].offset(percent);
        let markActive;

        if (track === false) {
          markActive = values.indexOf(mark.value) !== -1;
        } else {
          markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
        }

        return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
          children: [/*#__PURE__*/jsxRuntime_1(Mark, _extends({
            "data-index": index
          }, markProps, !isHostComponent(Mark) && {
            ownerState: _extends({}, ownerState, markProps.ownerState),
            markActive
          }, {
            style: _extends({}, style, markProps.style),
            className: clsx(classes.mark, markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /*#__PURE__*/jsxRuntime_1(MarkLabel, _extends({
            "aria-hidden": true,
            "data-index": index
          }, markLabelProps, !isHostComponent(MarkLabel) && {
            ownerState: _extends({}, ownerState, markLabelProps.ownerState)
          }, {
            markLabelActive: markActive,
            style: _extends({}, style, markLabelProps.style),
            className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, mark.value);
      }), values.map((value, index) => {
        const percent = valueToPercent(value, min, max);
        const style = axisProps[axis].offset(percent);
        const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
        return /*#__PURE__*/jsxRuntime_1(React__namespace.Fragment, {
          children: /*#__PURE__*/jsxRuntime_1(ValueLabelComponent, _extends({
            valueLabelFormat: valueLabelFormat,
            valueLabelDisplay: valueLabelDisplay,
            value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
            index: index,
            open: open === index || active === index || valueLabelDisplay === 'on',
            disabled: disabled
          }, valueLabelProps, {
            className: clsx(classes.valueLabel, valueLabelProps.className)
          }, !isHostComponent(ValueLabel) && {
            ownerState: _extends({}, ownerState, valueLabelProps.ownerState)
          }, {
            children: /*#__PURE__*/jsxRuntime_1(Thumb, _extends({
              "data-index": index,
              onMouseOver: handleMouseOver,
              onMouseLeave: handleMouseLeave
            }, thumbProps, {
              className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusVisible === index && classes.focusVisible)
            }, !isHostComponent(Thumb) && {
              ownerState: _extends({}, ownerState, thumbProps.ownerState)
            }, {
              style: _extends({}, style, {
                pointerEvents: disableSwap && active !== index ? 'none' : undefined
              }, thumbProps.style),
              children: /*#__PURE__*/jsxRuntime_1("input", {
                tabIndex: tabIndex,
                "data-index": index,
                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                "aria-labelledby": ariaLabelledby,
                "aria-orientation": orientation,
                "aria-valuemax": scale(max),
                "aria-valuemin": scale(min),
                "aria-valuenow": scale(value),
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                onFocus: handleFocus,
                onBlur: handleBlur,
                name: name,
                type: "range",
                min: props.min,
                max: props.max,
                step: props.step,
                disabled: disabled,
                value: values[index],
                onChange: handleHiddenInputChange,
                style: _extends({}, visuallyHidden$1, {
                  direction: isRtl ? 'rtl' : 'ltr',
                  // So that VoiceOver's focus indicator matches the thumb's dimensions
                  width: '100%',
                  height: '100%'
                })
              })
            }))
          }))
        }, index);
      })]
    }));
  });
  SliderUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The label of the slider.
     */
    'aria-label': chainPropTypes(propTypes.string, props => {
      const range = Array.isArray(props.value || props.defaultValue);

      if (range && props['aria-label'] != null) {
        return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
      }

      return null;
    }),

    /**
     * The id of the element containing a label for the slider.
     */
    'aria-labelledby': propTypes.string,

    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    'aria-valuetext': chainPropTypes(propTypes.string, props => {
      const range = Array.isArray(props.value || props.defaultValue);

      if (range && props['aria-valuetext'] != null) {
        return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
      }

      return null;
    }),

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Mark: propTypes.elementType,
      MarkLabel: propTypes.elementType,
      Rail: propTypes.elementType,
      Root: propTypes.elementType,
      Thumb: propTypes.elementType,
      Track: propTypes.elementType,
      ValueLabel: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number]),

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: propTypes.bool,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: propTypes.func,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: propTypes.func,

    /**
     * Indicates whether the theme context has rtl direction. It is set automatically.
     * @default false
     */
    isRtl: propTypes.bool,

    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: propTypes.oneOfType([propTypes.arrayOf(propTypes.shape({
      label: propTypes.node,
      value: propTypes.number.isRequired
    })), propTypes.bool]),

    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: propTypes.number,

    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: propTypes.number,

    /**
     * Name attribute of the hidden `input` element.
     */
    name: propTypes.string,

    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: propTypes.func,

    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: propTypes.func,

    /**
     * @ignore
     */
    onMouseDown: propTypes.func,

    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * A transformation function, to change the scale of the slider.
     * @default (x) => x
     */
    scale: propTypes.func,

    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: propTypes.number,

    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: propTypes.number,

    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: propTypes.oneOf(['inverted', 'normal', false]),

    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number]),

    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: propTypes.oneOf(['auto', 'off', 'on']),

    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @default (x) => x
     */
    valueLabelFormat: propTypes.oneOfType([propTypes.func, propTypes.string])
  } ;
  var SliderUnstyled$1 = SliderUnstyled;

  /**
   * The basic building block for creating custom switches.
   *
   * Demos:
   *
   * - [Switches](https://mui.com/components/switches/)
   */
  function useSwitch(props) {
    const {
      checked: checkedProp,
      defaultChecked,
      disabled,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly,
      required
    } = props;
    const [checked, setCheckedState] = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: 'Switch',
      state: 'checked'
    });

    const handleInputChange = (event, otherHandler) => {
      // Workaround for https://github.com/facebook/react/issues/9023
      if (event.nativeEvent.defaultPrevented) {
        return;
      }

      setCheckedState(event.target.checked);
      onChange == null ? void 0 : onChange(event);
      otherHandler == null ? void 0 : otherHandler(event);
    };

    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);

    if (disabled && focusVisible) {
      setFocusVisible(false);
    }

    React__namespace.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const inputRef = React__namespace.useRef(null);

    const handleFocus = (event, otherHandler) => {
      // Fix for https://github.com/facebook/react/issues/7769
      if (!inputRef.current) {
        inputRef.current = event.currentTarget;
      }

      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        onFocusVisible == null ? void 0 : onFocusVisible(event);
      }

      onFocus == null ? void 0 : onFocus(event);
      otherHandler == null ? void 0 : otherHandler(event);
    };

    const handleBlur = (event, otherHandler) => {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }

      onBlur == null ? void 0 : onBlur(event);
      otherHandler == null ? void 0 : otherHandler(event);
    };

    const handleRefChange = useForkRef(focusVisibleRef, inputRef);

    const getInputProps = (otherProps = {}) => _extends({
      checked: checkedProp,
      defaultChecked,
      disabled,
      readOnly,
      required,
      type: 'checkbox'
    }, otherProps, {
      onChange: event => handleInputChange(event, otherProps.onChange),
      onFocus: event => handleFocus(event, otherProps.onFocus),
      onBlur: event => handleBlur(event, otherProps.onBlur),
      ref: handleRefChange
    });

    return {
      checked,
      disabled: Boolean(disabled),
      focusVisible,
      getInputProps,
      readOnly: Boolean(readOnly)
    };
  }

  function getSwitchUnstyledUtilityClass(slot) {
    return generateUtilityClass('MuiSwitch', slot);
  }
  const switchUnstyledClasses = generateUtilityClasses('MuiSwitch', ['root', 'input', 'track', 'thumb', 'checked', 'disabled', 'focusVisible', 'readOnly']);
  var classes = switchUnstyledClasses;

  const _excluded$29 = ["checked", "className", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];

  /**
   * The foundation for building custom-styled switches.
   *
   * Demos:
   *
   * - [Switches](https://mui.com/components/switches/)
   *
   * API:
   *
   * - [SwitchUnstyled API](https://mui.com/api/switch-unstyled/)
   */
  const SwitchUnstyled = /*#__PURE__*/React__namespace.forwardRef(function SwitchUnstyled(props, ref) {
    var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;

    const {
      checked: checkedProp,
      className,
      component,
      components = {},
      componentsProps = {},
      defaultChecked,
      disabled: disabledProp,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly: readOnlyProp
    } = props,
          otherProps = _objectWithoutPropertiesLoose(props, _excluded$29);

    const useSwitchProps = {
      checked: checkedProp,
      defaultChecked,
      disabled: disabledProp,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly: readOnlyProp
    };
    const {
      getInputProps,
      checked,
      disabled,
      focusVisible,
      readOnly
    } = useSwitch(useSwitchProps);

    const ownerState = _extends({}, props, {
      checked,
      disabled,
      focusVisible,
      readOnly
    });

    const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';
    const rootProps = appendOwnerState(Root, _extends({}, otherProps, componentsProps.root), ownerState);
    const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';
    const thumbProps = appendOwnerState(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);
    const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';
    const inputProps = appendOwnerState(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);
    const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : 'span';
    const trackProps = appendOwnerState(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);
    const stateClasses = clsx(checked && classes.checked, disabled && classes.disabled, focusVisible && classes.focusVisible, readOnly && classes.readOnly);
    return /*#__PURE__*/jsxRuntime_2(Root, _extends({
      ref: ref
    }, rootProps, {
      className: clsx(classes.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
      children: [/*#__PURE__*/jsxRuntime_1(Track, _extends({}, trackProps, {
        className: clsx(classes.track, trackProps == null ? void 0 : trackProps.className)
      })), /*#__PURE__*/jsxRuntime_1(Thumb, _extends({}, thumbProps, {
        className: clsx(classes.thumb, thumbProps == null ? void 0 : thumbProps.className)
      })), /*#__PURE__*/jsxRuntime_1(Input, _extends({}, getInputProps(inputProps), {
        className: clsx(classes.input, inputProps == null ? void 0 : inputProps.className)
      }))]
    }));
  });
  SwitchUnstyled.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the component is checked.
     */
    checked: propTypes.bool,

    /**
     * Class name applied to the root element.
     */
    className: propTypes.string,

    /**
     * The component used for the Root slot.
     * Either a string to use a HTML element or a component.
     * This is equivalent to `components.Root`. If both are provided, the `component` is used.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the Switch.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes
    /* @typescript-to-proptypes-ignore */
    .shape({
      Input: propTypes.elementType,
      Root: propTypes.elementType,
      Thumb: propTypes.elementType,
      Track: propTypes.oneOfType([propTypes.elementType, propTypes.oneOf([null])])
    }),

    /**
     * The props used for each slot inside the Switch.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * @ignore
     */
    onFocusVisible: propTypes.func,

    /**
     * If `true`, the component is read only.
     */
    readOnly: propTypes.bool,

    /**
     * If `true`, the `input` element is required.
     */
    required: propTypes.bool
  } ;
  var SwitchUnstyled$1 = SwitchUnstyled;

  const _excluded$28 = ["onChange", "maxRows", "minRows", "style", "value"];

  function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }

  const styles$5 = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: 'hidden',
      // Remove from the content flow
      position: 'absolute',
      // Ignore the scrollbar width
      overflow: 'hidden',
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: 'translateZ(0)'
    }
  };
  const TextareaAutosize = /*#__PURE__*/React__namespace.forwardRef(function TextareaAutosize(props, ref) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style,
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$28);

    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const inputRef = React__namespace.useRef(null);
    const handleRef = useForkRef(ref, inputRef);
    const shadowRef = React__namespace.useRef(null);
    const renders = React__namespace.useRef(0);
    const [state, setState] = React__namespace.useState({});
    const syncHeight = React__namespace.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.

      if (computedStyle.width === '0px') {
        return;
      }

      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || 'x';

      if (inputShallow.value.slice(-1) === '\n') {
        // Certain fonts which overflow the line height will cause the textarea
        // to report a different scrollHeight depending on whether the last line
        // is empty. Make it non-empty to avoid this issue.
        inputShallow.value += ' ';
      }

      const boxSizing = computedStyle['box-sizing'];
      const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
      const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

      const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row

      inputShallow.value = 'x';
      const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content

      let outerHeight = innerHeight;

      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }

      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }

      outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

      const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
      const overflow = Math.abs(outerHeight - innerHeight) <= 1;
      setState(prevState => {
        // Need a large enough difference to update the height.
        // This prevents infinite rendering loop.
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
          renders.current += 1;
          return {
            overflow,
            outerHeightStyle
          };
        }

        {
          if (renders.current === 20) {
            console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
          }
        }

        return prevState;
      });
    }, [maxRows, minRows, props.placeholder]);
    React__namespace.useEffect(() => {
      const handleResize = debounce$1(() => {
        renders.current = 0;
        syncHeight();
      });
      const containerWindow = ownerWindow(inputRef.current);
      containerWindow.addEventListener('resize', handleResize);
      let resizeObserver;

      if (typeof ResizeObserver !== 'undefined') {
        resizeObserver = new ResizeObserver(handleResize);
        resizeObserver.observe(inputRef.current);
      }

      return () => {
        handleResize.clear();
        containerWindow.removeEventListener('resize', handleResize);

        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [syncHeight]);
    useEnhancedEffect$1(() => {
      syncHeight();
    });
    React__namespace.useEffect(() => {
      renders.current = 0;
    }, [value]);

    const handleChange = event => {
      renders.current = 0;

      if (!isControlled) {
        syncHeight();
      }

      if (onChange) {
        onChange(event);
      }
    };

    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1("textarea", _extends({
        value: value,
        onChange: handleChange,
        ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
        ,
        rows: minRows,
        style: _extends({
          height: state.outerHeightStyle,
          // Need a large enough difference to allow scrolling.
          // This prevents infinite rendering loop.
          overflow: state.overflow ? 'hidden' : null
        }, style)
      }, other)), /*#__PURE__*/jsxRuntime_1("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles$5.shadow, style, {
          padding: 0
        })
      })]
    });
  });
  TextareaAutosize.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Maximum number of rows to display.
     */
    maxRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * @ignore
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    placeholder: propTypes.string,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * @ignore
     */
    value: propTypes.oneOfType([propTypes.arrayOf(propTypes.string), propTypes.number, propTypes.string])
  } ;
  var TextareaAutosize$1 = TextareaAutosize;

  function createMixins(breakpoints, spacing, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [`${breakpoints.up('xs')} and (orientation: landscape)`]: {
          minHeight: 48
        },
        [breakpoints.up('sm')]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  const _excluded$27 = ["mode", "contrastThreshold", "tonalOffset"];
  const light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: 'rgba(0, 0, 0, 0.87)',
      // Secondary text.
      secondary: 'rgba(0, 0, 0, 0.6)',
      // Disabled text have even lower visual prominence.
      disabled: 'rgba(0, 0, 0, 0.38)'
    },
    // The color used to divide different elements.
    divider: 'rgba(0, 0, 0, 0.12)',
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common$1.white,
      default: common$1.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: 'rgba(0, 0, 0, 0.54)',
      // The color of an hovered action.
      hover: 'rgba(0, 0, 0, 0.04)',
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: 'rgba(0, 0, 0, 0.08)',
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: 'rgba(0, 0, 0, 0.26)',
      // The background color of a disabled action.
      disabledBackground: 'rgba(0, 0, 0, 0.12)',
      disabledOpacity: 0.38,
      focus: 'rgba(0, 0, 0, 0.12)',
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  const dark = {
    text: {
      primary: common$1.white,
      secondary: 'rgba(255, 255, 255, 0.7)',
      disabled: 'rgba(255, 255, 255, 0.5)',
      icon: 'rgba(255, 255, 255, 0.5)'
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    background: {
      paper: '#121212',
      default: '#121212'
    },
    action: {
      active: common$1.white,
      hover: 'rgba(255, 255, 255, 0.08)',
      hoverOpacity: 0.08,
      selected: 'rgba(255, 255, 255, 0.16)',
      selectedOpacity: 0.16,
      disabled: 'rgba(255, 255, 255, 0.3)',
      disabledBackground: 'rgba(255, 255, 255, 0.12)',
      disabledOpacity: 0.38,
      focus: 'rgba(255, 255, 255, 0.12)',
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };

  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === 'light') {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === 'dark') {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }

  function getDefaultPrimary(mode = 'light') {
    if (mode === 'dark') {
      return {
        main: blue$1[200],
        light: blue$1[50],
        dark: blue$1[400]
      };
    }

    return {
      main: blue$1[700],
      light: blue$1[400],
      dark: blue$1[800]
    };
  }

  function getDefaultSecondary(mode = 'light') {
    if (mode === 'dark') {
      return {
        main: purple$1[200],
        light: purple$1[50],
        dark: purple$1[400]
      };
    }

    return {
      main: purple$1[500],
      light: purple$1[300],
      dark: purple$1[700]
    };
  }

  function getDefaultError(mode = 'light') {
    if (mode === 'dark') {
      return {
        main: red$1[500],
        light: red$1[300],
        dark: red$1[700]
      };
    }

    return {
      main: red$1[700],
      light: red$1[400],
      dark: red$1[800]
    };
  }

  function getDefaultInfo(mode = 'light') {
    if (mode === 'dark') {
      return {
        main: lightBlue$1[400],
        light: lightBlue$1[300],
        dark: lightBlue$1[700]
      };
    }

    return {
      main: lightBlue$1[700],
      light: lightBlue$1[500],
      dark: lightBlue$1[900]
    };
  }

  function getDefaultSuccess(mode = 'light') {
    if (mode === 'dark') {
      return {
        main: green$1[400],
        light: green$1[300],
        dark: green$1[700]
      };
    }

    return {
      main: green$1[800],
      light: green$1[500],
      dark: green$1[900]
    };
  }

  function getDefaultWarning(mode = 'light') {
    if (mode === 'dark') {
      return {
        main: orange$1[400],
        light: orange$1[300],
        dark: orange$1[700]
      };
    }

    return {
      main: '#ed6c02',
      // closest to orange[800] that pass 3:1.
      light: orange$1[500],
      dark: orange$1[900]
    };
  }

  function createPalette(palette) {
    const {
      mode = 'light',
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette,
          other = _objectWithoutPropertiesLoose(palette, _excluded$27);

    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

      {
        const contrast = getContrastRatio(background, contrastText);

        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
        }
      }

      return contrastText;
    }

    const augmentColor = ({
      color,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color = _extends({}, color);

      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }

      if (!color.hasOwnProperty('main')) {
        throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` );
      }

      if (typeof color.main !== 'string') {
        throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` );
      }

      addLightOrDark(color, 'light', lightShade, tonalOffset);
      addLightOrDark(color, 'dark', darkShade, tonalOffset);

      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }

      return color;
    };

    const modes = {
      dark,
      light
    };

    {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }

    const paletteOutput = deepmerge(_extends({
      // A collection of common colors.
      common: common$1,
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: 'primary'
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: 'secondary',
        mainShade: 'A400',
        lightShade: 'A200',
        darkShade: 'A700'
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: 'error'
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: 'warning'
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: 'info'
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: 'success'
      }),
      // The grey colors.
      grey: grey$1,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  const _excluded$26 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];

  function round$1(value) {
    return Math.round(value * 1e5) / 1e5;
  }

  const caseAllCaps = {
    textTransform: 'uppercase'
  };
  const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  /**
   * @see @link{https://material.io/design/typography/the-type-system.html}
   * @see @link{https://material.io/design/typography/understanding-typography.html}
   */

  function createTypography(palette, typography) {
    const _ref = typeof typography === 'function' ? typography(palette) : typography,
          {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref,
          other = _objectWithoutPropertiesLoose(_ref, _excluded$26);

    {
      if (typeof fontSize !== 'number') {
        console.error('MUI: `fontSize` is required to be a number.');
      }

      if (typeof htmlFontSize !== 'number') {
        console.error('MUI: `htmlFontSize` is required to be a number.');
      }
    }

    const coef = fontSize / 14;

    const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);

    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round$1(letterSpacing / size)}em`
    } : {}, casing, allVariants);

    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false // No need to clone deep

    });
  }

  const shadowKeyUmbraOpacity = 0.2;
  const shadowKeyPenumbraOpacity = 0.14;
  const shadowAmbientShadowOpacity = 0.12;

  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
  } // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


  const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows$1 = shadows;

  const _excluded$25 = ["duration", "easing", "delay"];
  // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
  // to learn the context in which each easing should be used.
  const easing = {
    // This is the most common easing curve.
    easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
  }; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
  // to learn when use what timing

  const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };

  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }

  function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }

    const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }

  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);

    const mergedDuration = _extends({}, duration, inputTransitions.duration);

    const create = (props = ['all'], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options,
            other = _objectWithoutPropertiesLoose(options, _excluded$25);

      {
        const isString = value => typeof value === 'string'; // IE11 support, replace with Number.isNaN
        // eslint-disable-next-line no-restricted-globals


        const isNumber = value => !isNaN(parseFloat(value));

        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }

        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }

        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }

        if (!isNumber(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }

        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
        }
      }

      return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
    };

    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // We need to centralize the zIndex definitions as they work
  // like global values in the browser.
  const zIndex = {
    mobileStepper: 1000,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex$1 = zIndex;

  const _excluded$24 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];

  function createTheme(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options,
          other = _objectWithoutPropertiesLoose(options, _excluded$24);

    const palette = createPalette(paletteInput);
    const systemTheme = createTheme$1(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
      palette,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows$1.slice(),
      typography: createTypography(palette, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex$1)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);

    {
      const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];

      const traverse = (node, component) => {
        let key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

        for (key in node) {
          const child = node[key];

          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            {
              const stateClass = generateUtilityClass('', key);
              console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
            } // Remove the style to prevent global conflicts.


            node[key] = {};
          }
        }
      };

      Object.keys(muiTheme.components).forEach(component => {
        const styleOverrides = muiTheme.components[component].styleOverrides;

        if (styleOverrides && component.indexOf('Mui') === 0) {
          traverse(styleOverrides, component);
        }
      });
    }

    return muiTheme;
  }

  let warnedOnce$1 = false;
  function createMuiTheme(...args) {
    {
      if (!warnedOnce$1) {
        warnedOnce$1 = true;
        console.error(['MUI: the createMuiTheme function was renamed to createTheme.', '', "You should use `import { createTheme } from '@mui/material/styles'`"].join('\n'));
      }
    }

    return createTheme(...args);
  }

  function createMuiStrictModeTheme(options, ...args) {
    return createTheme(deepmerge({
      unstable_strictMode: true
    }, options), ...args);
  }

  let warnedOnce = false; // To remove in v6

  function createStyles(styles) {
    if (!warnedOnce) {
      console.warn(['MUI: createStyles from @mui/material/styles is deprecated.', 'Please use @mui/styles/createStyles'].join('\n'));
      warnedOnce = true;
    }

    return styles;
  }

  function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
  } // Ported from Compass
  // https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
  // Emulate the sass function "unit"

  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
  } // Emulate the sass function "unitless"

  function toUnitless(length) {
    return parseFloat(length);
  } // Convert any CSS <length> or <percentage> value to any another.
  // From https://github.com/KyleAMathews/convert-css-length

  function convertLength(baseFontSize) {
    return (length, toUnit) => {
      const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.

      if (fromUnit === toUnit) {
        return length;
      } // Convert input length to pixels.


      let pxLength = toUnitless(length);

      if (fromUnit !== 'px') {
        if (fromUnit === 'em') {
          pxLength = toUnitless(length) * toUnitless(baseFontSize);
        } else if (fromUnit === 'rem') {
          pxLength = toUnitless(length) * toUnitless(baseFontSize);
        }
      } // Convert length in pixels to the output unit


      let outputLength = pxLength;

      if (toUnit !== 'px') {
        if (toUnit === 'em') {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else if (toUnit === 'rem') {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else {
          return length;
        }
      }

      return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
  }
  function alignProperty({
    size,
    grid
  }) {
    const sizeBelow = size - size % grid;
    const sizeAbove = sizeBelow + grid;
    return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
  } // fontGrid finds a minimal grid (in rem) for the fontSize values so that the
  // lineHeight falls under a x pixels grid, 4px in the case of Material Design,
  // without changing the relative line height

  function fontGrid({
    lineHeight,
    pixels,
    htmlFontSize
  }) {
    return pixels / (lineHeight * htmlFontSize);
  }
  /**
   * generate a responsive version of a given CSS property
   * @example
   * responsiveProperty({
   *   cssProperty: 'fontSize',
   *   min: 15,
   *   max: 20,
   *   unit: 'px',
   *   breakpoints: [300, 600],
   * })
   *
   * // this returns
   *
   * {
   *   fontSize: '15px',
   *   '@media (min-width:300px)': {
   *     fontSize: '17.5px',
   *   },
   *   '@media (min-width:600px)': {
   *     fontSize: '20px',
   *   },
   * }
   * @param {Object} params
   * @param {string} params.cssProperty - The CSS property to be made responsive
   * @param {number} params.min - The smallest value of the CSS property
   * @param {number} params.max - The largest value of the CSS property
   * @param {string} [params.unit] - The unit to be used for the CSS property
   * @param {Array.number} [params.breakpoints]  - An array of breakpoints
   * @param {number} [params.alignStep] - Round scaled value to fall under this grid
   * @returns {Object} responsive styles for {params.cssProperty}
   */

  function responsiveProperty({
    cssProperty,
    min,
    max,
    unit = 'rem',
    breakpoints = [600, 900, 1200],
    transform = null
  }) {
    const output = {
      [cssProperty]: `${min}${unit}`
    };
    const factor = (max - min) / breakpoints[breakpoints.length - 1];
    breakpoints.forEach(breakpoint => {
      let value = min + factor * breakpoint;

      if (transform !== null) {
        value = transform(value);
      }

      output[`@media (min-width:${breakpoint}px)`] = {
        [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`
      };
    });
    return output;
  }

  function responsiveFontSizes(themeInput, options = {}) {
    const {
      breakpoints = ['sm', 'md', 'lg'],
      disableAlign = false,
      factor = 2,
      variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']
    } = options;

    const theme = _extends({}, themeInput);

    theme.typography = _extends({}, theme.typography);
    const typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem
    // Set the baseFontSize for your project. Defaults to 16px (also the browser default).

    const convert = convertLength(typography.htmlFontSize);
    const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);
    variants.forEach(variant => {
      const style = typography[variant];
      const remFontSize = parseFloat(convert(style.fontSize, 'rem'));

      if (remFontSize <= 1) {
        return;
      }

      const maxFontSize = remFontSize;
      const minFontSize = 1 + (maxFontSize - 1) / factor;
      let {
        lineHeight
      } = style;

      if (!isUnitless(lineHeight) && !disableAlign) {
        throw new Error(`MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` );
      }

      if (!isUnitless(lineHeight)) {
        // make it unitless
        lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
      }

      let transform = null;

      if (!disableAlign) {
        transform = value => alignProperty({
          size: value,
          grid: fontGrid({
            pixels: 4,
            lineHeight,
            htmlFontSize: typography.htmlFontSize
          })
        });
      }

      typography[variant] = _extends({}, style, responsiveProperty({
        cssProperty: 'fontSize',
        min: minFontSize,
        max: maxFontSize,
        unit: 'rem',
        breakpoints: breakpointValues,
        transform
      }));
    });
    return theme;
  }

  const defaultTheme$1 = createTheme();
  var defaultTheme$2 = defaultTheme$1;

  function useTheme() {
    const theme = useTheme$1(defaultTheme$2);

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useDebugValue(theme);
    }

    return theme;
  }

  function useThemeProps({
    props,
    name
  }) {
    return useThemeProps$1({
      props,
      name,
      defaultTheme: defaultTheme$2
    });
  }

  const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
  const slotShouldForwardProp = shouldForwardProp;
  const styled = createStyled({
    defaultTheme: defaultTheme$2,
    rootShouldForwardProp
  });
  var styled$1 = styled;

  function makeStyles() {
    throw new Error(`MUI: makeStyles is not longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#material-ui-core-styles for more details.` );
  }

  function withStyles() {
    throw new Error(`MUI: withStyles is not longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#material-ui-core-styles for more details.` );
  }

  function withTheme() {
    throw new Error(`MUI: withTheme is not longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#material-ui-core-styles for more details.` );
  }

  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass('MuiSvgIcon', slot);
  }
  const svgIconClasses = generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);
  var svgIconClasses$1 = svgIconClasses;

  const _excluded$23 = ["children", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"];

  const useUtilityClasses$1K = ownerState => {
    const {
      color,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };

  const SvgIconRoot = styled$1('svg', {
    name: 'MuiSvgIcon',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$ownerS, _theme$palette$ownerS2;

    return {
      userSelect: 'none',
      width: '1em',
      height: '1em',
      display: 'inline-block',
      fill: 'currentColor',
      flexShrink: 0,
      transition: theme.transitions.create('fill', {
        duration: theme.transitions.duration.shorter
      }),
      fontSize: {
        inherit: 'inherit',
        small: theme.typography.pxToRem(20),
        medium: theme.typography.pxToRem(24),
        large: theme.typography.pxToRem(35)
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_theme$palette$ownerS = (_theme$palette$ownerS2 = theme.palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
        action: theme.palette.action.active,
        disabled: theme.palette.action.disabled,
        inherit: undefined
      }[ownerState.color]
    };
  });
  const SvgIcon = /*#__PURE__*/React__namespace.forwardRef(function SvgIcon(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSvgIcon'
    });

    const {
      children,
      className,
      color = 'inherit',
      component = 'svg',
      fontSize = 'medium',
      htmlColor,
      titleAccess,
      viewBox = '0 0 24 24'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$23);

    const ownerState = _extends({}, props, {
      color,
      component,
      fontSize,
      viewBox
    });

    const classes = useUtilityClasses$1K(ownerState);
    return /*#__PURE__*/jsxRuntime_2(SvgIconRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      focusable: "false",
      viewBox: viewBox,
      color: htmlColor,
      "aria-hidden": titleAccess ? undefined : true,
      role: titleAccess ? 'img' : undefined,
      ref: ref
    }, other, {
      children: [children, titleAccess ? /*#__PURE__*/jsxRuntime_1("title", {
        children: titleAccess
      }) : null]
    }));
  });
  SvgIcon.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Node passed into the SVG element.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'large', 'medium', 'small']), propTypes.string]),

    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: propTypes.string,

    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: propTypes.string,

    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: propTypes.string
  } ;
  SvgIcon.muiName = 'SvgIcon';
  var SvgIcon$1 = SvgIcon;

  function createSvgIcon(path, displayName) {
    const Component = (props, ref) => /*#__PURE__*/jsxRuntime_1(SvgIcon$1, _extends({
      "data-testid": `${displayName}Icon`,
      ref: ref
    }, props, {
      children: path
    }));

    {
      // Need to set `displayName` on the inner component for React.memo.
      // React prior to 16.14 ignores `displayName` on the wrapper.
      Component.displayName = `${displayName}Icon`;
    }

    Component.muiName = SvgIcon$1.muiName;
    return /*#__PURE__*/React__namespace.memo( /*#__PURE__*/React__namespace.forwardRef(Component));
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  var config = {
    disabled: false
  };

  var timeoutsShape = propTypes.oneOfType([propTypes.number, propTypes.shape({
    enter: propTypes.number,
    exit: propTypes.number,
    appear: propTypes.number
  }).isRequired]) ;
  propTypes.oneOfType([propTypes.string, propTypes.shape({
    enter: propTypes.string,
    exit: propTypes.string,
    active: propTypes.string
  }), propTypes.shape({
    enter: propTypes.string,
    enterDone: propTypes.string,
    enterActive: propTypes.string,
    exit: propTypes.string,
    exitDone: propTypes.string,
    exitActive: propTypes.string
  })]) ;

  var TransitionGroupContext = React__default["default"].createContext(null);

  var UNMOUNTED = 'unmounted';
  var EXITED = 'exited';
  var ENTERING = 'entering';
  var ENTERED = 'entered';
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 1 },
   *   entered:  { opacity: 1 },
   *   exiting:  { opacity: 0 },
   *   exited:  { opacity: 0 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  var Transition = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;

      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }

      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;

      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }

      return null;
    } // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }
    ;

    var _proto = Transition.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;

      if (prevProps !== this.props) {
        var status = this.state.status;

        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }

      this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;

      if (timeout != null && typeof timeout !== 'number') {
        exit = timeout.exit;
        enter = timeout.enter; // TODO: remove fallback for next major

        appear = timeout.appear !== undefined ? timeout.appear : enter;
      }

      return {
        exit: exit,
        enter: enter,
        appear: appear
      };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }

      if (nextStatus !== null) {
        // nextStatus will always be ENTERING or EXITING.
        this.cancelNextCallback();

        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };

    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;

      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;

      var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default["default"].findDOMNode(this), appearing],
          maybeNode = _ref2[0],
          maybeAppearing = _ref2[1];

      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
      // if we are mounting and running this it means appear _must_ be set

      if (!mounting && !enter || config.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }

      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function () {
        _this2.props.onEntering(maybeNode, maybeAppearing);

        _this2.onTransitionEnd(enterTimeout, function () {
          _this2.safeSetState({
            status: ENTERED
          }, function () {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };

    _proto.performExit = function performExit() {
      var _this3 = this;

      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default["default"].findDOMNode(this); // no exit animation skip right to EXITED

      if (!exit || config.disabled) {
        this.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(maybeNode);
        });
        return;
      }

      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function () {
        _this3.props.onExiting(maybeNode);

        _this3.onTransitionEnd(timeouts.exit, function () {
          _this3.safeSetState({
            status: EXITED
          }, function () {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
      // This shouldn't be necessary, but there are weird race conditions with
      // setState callbacks and unmounting in testing, so always make sure that
      // we can cancel any pending setState callbacks after we unmount.
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;

      var active = true;

      this.nextCallback = function (event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };

      this.nextCallback.cancel = function () {
        active = false;
      };

      return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default["default"].findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }

      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
            maybeNode = _ref3[0],
            maybeNextCallback = _ref3[1];

        this.props.addEndListener(maybeNode, maybeNextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };

    _proto.render = function render() {
      var status = this.state.status;

      if (status === UNMOUNTED) {
        return null;
      }

      var _this$props = this.props,
          children = _this$props.children;
          _this$props.in;
          _this$props.mountOnEnter;
          _this$props.unmountOnExit;
          _this$props.appear;
          _this$props.enter;
          _this$props.exit;
          _this$props.timeout;
          _this$props.addEndListener;
          _this$props.onEnter;
          _this$props.onEntering;
          _this$props.onEntered;
          _this$props.onExit;
          _this$props.onExiting;
          _this$props.onExited;
          _this$props.nodeRef;
          var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

      return (
        /*#__PURE__*/
        // allows for nested Transitions
        React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: null
        }, typeof children === 'function' ? children(status, childProps) : React__default["default"].cloneElement(React__default["default"].Children.only(children), childProps))
      );
    };

    return Transition;
  }(React__default["default"].Component);

  Transition.contextType = TransitionGroupContext;
  Transition.propTypes = {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: propTypes.shape({
      current: typeof Element === 'undefined' ? propTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return propTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),

    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: propTypes.oneOfType([propTypes.func.isRequired, propTypes.element.isRequired]).isRequired,

    /**
     * Show the component; triggers the enter or exit states
     */
    in: propTypes.bool,

    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: propTypes.bool,

    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: propTypes.bool,

    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: propTypes.bool,

    /**
     * Enable or disable enter transitions.
     */
    enter: propTypes.bool,

    /**
     * Enable or disable exit transitions.
     */
    exit: propTypes.bool,

    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return pt.apply(void 0, [props].concat(args));
    },

    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: propTypes.func,

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: propTypes.func,

    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: propTypes.func,

    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: propTypes.func,

    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: propTypes.func,

    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: propTypes.func,

    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: propTypes.func
  } ; // Name the function so it is clearer in the documentation

  function noop() {}

  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition$1 = Transition;

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */

  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && React.isValidElement(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children) React.Children.map(children, function (c) {
      return c;
    }).forEach(function (child) {
      // run the map function here instead so that the key is the computed one
      result[child.key] = mapper(child);
    });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list


    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }

      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`


    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }

  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }

  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return React.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (!React.isValidElement(child)) return;
      var hasPrev = (key in prevChildMapping);
      var hasNext = (key in nextChildMapping);
      var prevChild = prevChildMapping[key];
      var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = React.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = React.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps)
        });
      }
    });
    return children;
  }

  var values = Object.values || function (obj) {
    return Object.keys(obj).map(function (k) {
      return obj[k];
    });
  };

  var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
      return child;
    }
  };
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

  var TransitionGroup = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);

    function TransitionGroup(props, context) {
      var _this;

      _this = _React$Component.call(this, props, context) || this;

      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited: handleExited,
        firstRender: true
      };
      return _this;
    }

    var _proto = TransitionGroup.prototype;

    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };

    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children,
          handleExited = _ref.handleExited,
          firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    } // node is `undefined` when user provided `nodeRef` prop
    ;

    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;

      if (child.props.onExited) {
        child.props.onExited(node);
      }

      if (this.mounted) {
        this.setState(function (state) {
          var children = _extends({}, state.children);

          delete children[child.key];
          return {
            children: children
          };
        });
      }
    };

    _proto.render = function render() {
      var _this$props = this.props,
          Component = _this$props.component,
          childFactory = _this$props.childFactory,
          props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;

      if (Component === null) {
        return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
          value: contextValue
        }, children);
      }

      return /*#__PURE__*/React__default["default"].createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, /*#__PURE__*/React__default["default"].createElement(Component, props, children));
    };

    return TransitionGroup;
  }(React__default["default"].Component);

  TransitionGroup.propTypes = {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: propTypes.any,

    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: propTypes.node,

    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: propTypes.bool,

    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: propTypes.bool,

    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: propTypes.bool,

    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: propTypes.func
  } ;
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup$1 = TransitionGroup;

  const reflow = node => node.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;

    const {
      timeout,
      easing,
      style = {}
    } = props;
    return {
      duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
      easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
      delay: style.transitionDelay
    };
  }

  function getCollapseUtilityClass(slot) {
    return generateUtilityClass('MuiCollapse', slot);
  }
  const collapseClasses = generateUtilityClasses('MuiCollapse', ['root', 'horizontal', 'vertical', 'entered', 'hidden', 'wrapper', 'wrapperInner']);
  var collapseClasses$1 = collapseClasses;

  const _excluded$22 = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];

  const useUtilityClasses$1J = ownerState => {
    const {
      orientation,
      classes
    } = ownerState;
    const slots = {
      root: ['root', `${orientation}`],
      entered: ['entered'],
      hidden: ['hidden'],
      wrapper: ['wrapper', `${orientation}`],
      wrapperInner: ['wrapperInner', `${orientation}`]
    };
    return composeClasses(slots, getCollapseUtilityClass, classes);
  };

  const CollapseRoot = styled$1('div', {
    name: 'MuiCollapse',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.orientation], ownerState.state === 'entered' && styles.entered, ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && styles.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    height: 0,
    overflow: 'hidden',
    transition: theme.transitions.create('height')
  }, ownerState.orientation === 'horizontal' && {
    height: 'auto',
    width: 0,
    transition: theme.transitions.create('width')
  }, ownerState.state === 'entered' && _extends({
    height: 'auto',
    overflow: 'visible'
  }, ownerState.orientation === 'horizontal' && {
    width: 'auto'
  }), ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && {
    visibility: 'hidden'
  }));
  const CollapseWrapper = styled$1('div', {
    name: 'MuiCollapse',
    slot: 'Wrapper',
    overridesResolver: (props, styles) => styles.wrapper
  })(({
    ownerState
  }) => _extends({
    // Hack to get children with a negative margin to not falsify the height computation.
    display: 'flex',
    width: '100%'
  }, ownerState.orientation === 'horizontal' && {
    width: 'auto',
    height: '100%'
  }));
  const CollapseWrapperInner = styled$1('div', {
    name: 'MuiCollapse',
    slot: 'WrapperInner',
    overridesResolver: (props, styles) => styles.wrapperInner
  })(({
    ownerState
  }) => _extends({
    width: '100%'
  }, ownerState.orientation === 'horizontal' && {
    width: 'auto',
    height: '100%'
  }));
  /**
   * The Collapse transition is used by the
   * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  const Collapse = /*#__PURE__*/React__namespace.forwardRef(function Collapse(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCollapse'
    });

    const {
      addEndListener,
      children,
      className,
      collapsedSize: collapsedSizeProp = '0px',
      component,
      easing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      orientation = 'vertical',
      style,
      timeout = duration.standard,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$22);

    const ownerState = _extends({}, props, {
      orientation,
      collapsedSize: collapsedSizeProp
    });

    const classes = useUtilityClasses$1J(ownerState);
    const theme = useTheme();
    const timer = React__namespace.useRef();
    const wrapperRef = React__namespace.useRef(null);
    const autoTransitionDuration = React__namespace.useRef();
    const collapsedSize = typeof collapsedSizeProp === 'number' ? `${collapsedSizeProp}px` : collapsedSizeProp;
    const isHorizontal = orientation === 'horizontal';
    const size = isHorizontal ? 'width' : 'height';
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    const nodeRef = React__namespace.useRef(null);
    const handleRef = useForkRef(ref, nodeRef);

    const normalizedTransitionCallback = callback => maybeIsAppearing => {
      if (callback) {
        const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

        if (maybeIsAppearing === undefined) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };

    const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? 'clientWidth' : 'clientHeight'] : 0;

    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      if (wrapperRef.current && isHorizontal) {
        // Set absolute position to get the size of collapsed content
        wrapperRef.current.style.position = 'absolute';
      }

      node.style[size] = collapsedSize;

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
      const wrapperSize = getWrapperSize();

      if (wrapperRef.current && isHorizontal) {
        // After the size is read reset the position back to default
        wrapperRef.current.style.position = '';
      }

      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'enter'
      });

      if (timeout === 'auto') {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
      }

      node.style[size] = `${wrapperSize}px`;
      node.style.transitionTimingFunction = transitionTimingFunction;

      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
      node.style[size] = 'auto';

      if (onEntered) {
        onEntered(node, isAppearing);
      }
    });
    const handleExit = normalizedTransitionCallback(node => {
      node.style[size] = `${getWrapperSize()}px`;

      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleExiting = normalizedTransitionCallback(node => {
      const wrapperSize = getWrapperSize();
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'exit'
      });

      if (timeout === 'auto') {
        // TODO: rename getAutoHeightDuration to something more generic (width support)
        // Actually it just calculates animation duration based on size
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
      }

      node.style[size] = collapsedSize;
      node.style.transitionTimingFunction = transitionTimingFunction;

      if (onExiting) {
        onExiting(node);
      }
    });

    const handleAddEndListener = next => {
      if (timeout === 'auto') {
        timer.current = setTimeout(next, autoTransitionDuration.current || 0);
      }

      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
      }
    };

    return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef: nodeRef,
      timeout: timeout === 'auto' ? null : timeout
    }, other, {
      children: (state, childProps) => /*#__PURE__*/jsxRuntime_1(CollapseRoot, _extends({
        as: component,
        className: clsx(classes.root, className, {
          'entered': classes.entered,
          'exited': !inProp && collapsedSize === '0px' && classes.hidden
        }[state]),
        style: _extends({
          [isHorizontal ? 'minWidth' : 'minHeight']: collapsedSize
        }, style),
        ownerState: _extends({}, ownerState, {
          state
        }),
        ref: handleRef
      }, childProps, {
        children: /*#__PURE__*/jsxRuntime_1(CollapseWrapper, {
          ownerState: _extends({}, ownerState, {
            state
          }),
          className: classes.wrapper,
          ref: wrapperRef,
          children: /*#__PURE__*/jsxRuntime_1(CollapseWrapperInner, {
            ownerState: _extends({}, ownerState, {
              state
            }),
            className: classes.wrapperInner,
            children: children
          })
        })
      }))
    }));
  });
  Collapse.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: propTypes.func,

    /**
     * The content node to be collapsed.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The width (horizontal) or height (vertical) of the container when collapsed.
     * @default '0px'
     */
    collapsedSize: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,

    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: propTypes.oneOfType([propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string
    }), propTypes.string]),

    /**
     * If `true`, the component will transition in.
     */
    in: propTypes.bool,

    /**
     * @ignore
     */
    onEnter: propTypes.func,

    /**
     * @ignore
     */
    onEntered: propTypes.func,

    /**
     * @ignore
     */
    onEntering: propTypes.func,

    /**
     * @ignore
     */
    onExit: propTypes.func,

    /**
     * @ignore
     */
    onExited: propTypes.func,

    /**
     * @ignore
     */
    onExiting: propTypes.func,

    /**
     * The transition orientation.
     * @default 'vertical'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default duration.standard
     */
    timeout: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })])
  } ;
  Collapse.muiSupportAuto = true;
  var Collapse$1 = Collapse;

  function getPaperUtilityClass(slot) {
    return generateUtilityClass('MuiPaper', slot);
  }
  const paperClasses = generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);
  var paperClasses$1 = paperClasses;

  const _excluded$21 = ["className", "component", "elevation", "square", "variant"];

  const getOverlayAlpha = elevation => {
    let alphaValue;

    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }

    return (alphaValue / 100).toFixed(2);
  };

  const useUtilityClasses$1I = ownerState => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };

  const PaperRoot = styled$1('div', {
    name: 'MuiPaper',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary,
    transition: theme.transitions.create('box-shadow')
  }, !ownerState.square && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === 'outlined' && {
    border: `1px solid ${theme.palette.divider}`
  }, ownerState.variant === 'elevation' && _extends({
    boxShadow: theme.shadows[ownerState.elevation]
  }, theme.palette.mode === 'dark' && {
    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha(ownerState.elevation))})`
  })));
  const Paper = /*#__PURE__*/React__namespace.forwardRef(function Paper(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiPaper'
    });

    const {
      className,
      component = 'div',
      elevation = 1,
      square = false,
      variant = 'elevation'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$21);

    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });

    const classes = useUtilityClasses$1I(ownerState);

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const theme = useTheme();

      if (theme.shadows[elevation] === undefined) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
      }
    }

    return /*#__PURE__*/jsxRuntime_1(PaperRoot, _extends({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other));
  });
  Paper.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType, props => {
      const {
        elevation,
        variant
      } = props;

      if (elevation > 0 && variant === 'outlined') {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }

      return null;
    }),

    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['elevation', 'outlined']), propTypes.string])
  } ;
  var Paper$1 = Paper;

  /**
   * @ignore - internal component.
   * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
   */

  const AccordionContext = /*#__PURE__*/React__namespace.createContext({});

  {
    AccordionContext.displayName = 'AccordionContext';
  }

  var AccordionContext$1 = AccordionContext;

  function getAccordionUtilityClass(slot) {
    return generateUtilityClass('MuiAccordion', slot);
  }
  const accordionClasses = generateUtilityClasses('MuiAccordion', ['root', 'rounded', 'expanded', 'disabled', 'gutters', 'region']);
  var accordionClasses$1 = accordionClasses;

  const _excluded$20 = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"];

  const useUtilityClasses$1H = ownerState => {
    const {
      classes,
      square,
      expanded,
      disabled,
      disableGutters
    } = ownerState;
    const slots = {
      root: ['root', !square && 'rounded', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
      region: ['region']
    };
    return composeClasses(slots, getAccordionUtilityClass, classes);
  };

  const AccordionRoot = styled$1(Paper$1, {
    name: 'MuiAccordion',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${accordionClasses$1.region}`]: styles.region
      }, styles.root, !ownerState.square && styles.rounded, !ownerState.disableGutters && styles.gutters];
    }
  })(({
    theme
  }) => {
    const transition = {
      duration: theme.transitions.duration.shortest
    };
    return {
      position: 'relative',
      transition: theme.transitions.create(['margin'], transition),
      overflowAnchor: 'none',
      // Keep the same scrolling position
      '&:before': {
        position: 'absolute',
        left: 0,
        top: -1,
        right: 0,
        height: 1,
        content: '""',
        opacity: 1,
        backgroundColor: theme.palette.divider,
        transition: theme.transitions.create(['opacity', 'background-color'], transition)
      },
      '&:first-of-type': {
        '&:before': {
          display: 'none'
        }
      },
      [`&.${accordionClasses$1.expanded}`]: {
        '&:before': {
          opacity: 0
        },
        '&:first-of-type': {
          marginTop: 0
        },
        '&:last-of-type': {
          marginBottom: 0
        },
        '& + &': {
          '&:before': {
            display: 'none'
          }
        }
      },
      [`&.${accordionClasses$1.disabled}`]: {
        backgroundColor: theme.palette.action.disabledBackground
      }
    };
  }, ({
    theme,
    ownerState
  }) => _extends({}, !ownerState.square && {
    borderRadius: 0,
    '&:first-of-type': {
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius
    },
    '&:last-of-type': {
      borderBottomLeftRadius: theme.shape.borderRadius,
      borderBottomRightRadius: theme.shape.borderRadius,
      // Fix a rendering issue on Edge
      '@supports (-ms-ime-align: auto)': {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0
      }
    }
  }, !ownerState.disableGutters && {
    [`&.${accordionClasses$1.expanded}`]: {
      margin: '16px 0'
    }
  }));
  const Accordion = /*#__PURE__*/React__namespace.forwardRef(function Accordion(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAccordion'
    });

    const {
      children: childrenProp,
      className,
      defaultExpanded = false,
      disabled = false,
      disableGutters = false,
      expanded: expandedProp,
      onChange,
      square = false,
      TransitionComponent = Collapse$1,
      TransitionProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$20);

    const [expanded, setExpandedState] = useControlled({
      controlled: expandedProp,
      default: defaultExpanded,
      name: 'Accordion',
      state: 'expanded'
    });
    const handleChange = React__namespace.useCallback(event => {
      setExpandedState(!expanded);

      if (onChange) {
        onChange(event, !expanded);
      }
    }, [expanded, onChange, setExpandedState]);
    const [summary, ...children] = React__namespace.Children.toArray(childrenProp);
    const contextValue = React__namespace.useMemo(() => ({
      expanded,
      disabled,
      disableGutters,
      toggle: handleChange
    }), [expanded, disabled, disableGutters, handleChange]);

    const ownerState = _extends({}, props, {
      square,
      disabled,
      disableGutters,
      expanded
    });

    const classes = useUtilityClasses$1H(ownerState);
    return /*#__PURE__*/jsxRuntime_2(AccordionRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState,
      square: square
    }, other, {
      children: [/*#__PURE__*/jsxRuntime_1(AccordionContext$1.Provider, {
        value: contextValue,
        children: summary
      }), /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        in: expanded,
        timeout: "auto"
      }, TransitionProps, {
        children: /*#__PURE__*/jsxRuntime_1("div", {
          "aria-labelledby": summary.props.id,
          id: summary.props['aria-controls'],
          role: "region",
          className: classes.region,
          children: children
        })
      }))]
    }));
  });
  Accordion.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: chainPropTypes(propTypes.node.isRequired, props => {
      const summary = React__namespace.Children.toArray(props.children)[0];

      if (reactIs_2(summary)) {
        return new Error("MUI: The Accordion doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
      }

      if (! /*#__PURE__*/React__namespace.isValidElement(summary)) {
        return new Error('MUI: Expected the first child of Accordion to be a valid element.');
      }

      return null;
    }),

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, expands the accordion by default.
     * @default false
     */
    defaultExpanded: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, it removes the margin between two expanded accordion items and the increase of height.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * If `true`, expands the accordion, otherwise collapse it.
     * Setting this prop enables control over the accordion.
     */
    expanded: propTypes.bool,

    /**
     * Callback fired when the expand/collapse state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {boolean} expanded The `expanded` state of the accordion.
     */
    onChange: propTypes.func,

    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Collapse
     */
    TransitionComponent: propTypes.elementType,

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     */
    TransitionProps: propTypes.object
  } ;
  var Accordion$1 = Accordion;

  function getAccordionActionsUtilityClass(slot) {
    return generateUtilityClass('MuiAccordionActions', slot);
  }
  const accordionActionsClasses = generateUtilityClasses('MuiAccordionActions', ['root', 'spacing']);
  var accordionActionsClasses$1 = accordionActionsClasses;

  const _excluded$1$ = ["className", "disableSpacing"];

  const useUtilityClasses$1G = ownerState => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ['root', !disableSpacing && 'spacing']
    };
    return composeClasses(slots, getAccordionActionsUtilityClass, classes);
  };

  const AccordionActionsRoot = styled$1('div', {
    name: 'MuiAccordionActions',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.disableSpacing && styles.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex',
    alignItems: 'center',
    padding: 8,
    justifyContent: 'flex-end'
  }, !ownerState.disableSpacing && {
    '& > :not(:first-of-type)': {
      marginLeft: 8
    }
  }));
  const AccordionActions = /*#__PURE__*/React__namespace.forwardRef(function AccordionActions(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAccordionActions'
    });

    const {
      className,
      disableSpacing = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1$);

    const ownerState = _extends({}, props, {
      disableSpacing
    });

    const classes = useUtilityClasses$1G(ownerState);
    return /*#__PURE__*/jsxRuntime_1(AccordionActionsRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  AccordionActions.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var AccordionActions$1 = AccordionActions;

  function getAccordionDetailsUtilityClass(slot) {
    return generateUtilityClass('MuiAccordionDetails', slot);
  }
  const accordionDetailsClasses = generateUtilityClasses('MuiAccordionDetails', ['root']);
  var accordionDetailsClasses$1 = accordionDetailsClasses;

  const _excluded$1_ = ["className"];

  const useUtilityClasses$1F = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getAccordionDetailsUtilityClass, classes);
  };

  const AccordionDetailsRoot = styled$1('div', {
    name: 'MuiAccordionDetails',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => ({
    padding: theme.spacing(1, 2, 2)
  }));
  const AccordionDetails = /*#__PURE__*/React__namespace.forwardRef(function AccordionDetails(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAccordionDetails'
    });

    const {
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1_);

    const ownerState = props;
    const classes = useUtilityClasses$1F(ownerState);
    return /*#__PURE__*/jsxRuntime_1(AccordionDetailsRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  AccordionDetails.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var AccordionDetails$1 = AccordionDetails;

  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout
    } = props;
    const [leaving, setLeaving] = React__namespace.useState(false);
    const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);

    if (!inProp && !leaving) {
      setLeaving(true);
    }

    React__namespace.useEffect(() => {
      if (!inProp && onExited != null) {
        // react-transition-group#onExited
        const timeoutId = setTimeout(onExited, timeout);
        return () => {
          clearTimeout(timeoutId);
        };
      }

      return undefined;
    }, [onExited, inProp, timeout]);
    return /*#__PURE__*/jsxRuntime_1("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /*#__PURE__*/jsxRuntime_1("span", {
        className: childClassName
      })
    });
  }

  Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object.isRequired,
    className: propTypes.string,

    /**
     * @ignore - injected from TransitionGroup
     */
    in: propTypes.bool,

    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: propTypes.func,

    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: propTypes.bool,

    /**
     * Diameter of the ripple.
     */
    rippleSize: propTypes.number,

    /**
     * Horizontal position of the ripple center.
     */
    rippleX: propTypes.number,

    /**
     * Vertical position of the ripple center.
     */
    rippleY: propTypes.number,

    /**
     * exit delay
     */
    timeout: propTypes.number.isRequired
  } ;

  function getTouchRippleUtilityClass(slot) {
    return generateUtilityClass('MuiTouchRipple', slot);
  }
  const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
  var touchRippleClasses$1 = touchRippleClasses;

  const _excluded$1Z = ["center", "classes", "className"];

  let _$3 = t => t,
      _t$3,
      _t2$3,
      _t3$3,
      _t4$3;
  const DURATION = 550;
  const DELAY_RIPPLE = 80;
  const enterKeyframe = keyframes(_t$3 || (_t$3 = _$3`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  const exitKeyframe = keyframes(_t2$3 || (_t2$3 = _$3`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  const pulsateKeyframe = keyframes(_t3$3 || (_t3$3 = _$3`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  const TouchRippleRoot = styled$1('span', {
    name: 'MuiTouchRipple',
    slot: 'Root',
    skipSx: true
  })({
    overflow: 'hidden',
    pointerEvents: 'none',
    position: 'absolute',
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: 'inherit'
  }); // This `styled()` function invokes keyframes. `styled-components` only supports keyframes
  // in string templates. Do not convert these styles in JS object as it will break.

  const TouchRippleRipple = styled$1(Ripple, {
    name: 'MuiTouchRipple',
    slot: 'Ripple'
  })(_t4$3 || (_t4$3 = _$3`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  /**
   * @ignore - internal component.
   *
   * TODO v5: Make private
   */

  const TouchRipple = /*#__PURE__*/React__namespace.forwardRef(function TouchRipple(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTouchRipple'
    });

    const {
      center: centerProp = false,
      classes = {},
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1Z);

    const [ripples, setRipples] = React__namespace.useState([]);
    const nextKey = React__namespace.useRef(0);
    const rippleCallback = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]); // Used to filter out mouse emulated events on mobile.

    const ignoringMouseDown = React__namespace.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
    // We don't want to display the ripple for touch scroll events.

    const startTimer = React__namespace.useRef(null); // This is the hook called once the previous timeout is ready.

    const startTimerCommit = React__namespace.useRef(null);
    const container = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(startTimer.current);
      };
    }, []);
    const startCommit = React__namespace.useCallback(params => {
      const {
        pulsate,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntime_1(TouchRippleRipple, {
        classes: {
          ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
          rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
          ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
          child: clsx(classes.child, touchRippleClasses$1.child),
          childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
          childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate,
        rippleX: rippleX,
        rippleY: rippleY,
        rippleSize: rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start = React__namespace.useCallback((event = {}, options = {}, cb) => {
      const {
        pulsate = false,
        center = centerProp || options.pulsate,
        fakeElement = false // For test purposes

      } = options;

      if (event.type === 'mousedown' && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }

      if (event.type === 'touchstart') {
        ignoringMouseDown.current = true;
      }

      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      }; // Get the size of the ripple

      let rippleX;
      let rippleY;
      let rippleSize;

      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }

      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3); // For some reason the animation is broken on Mobile Chrome if the size is even.

        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      } // Touche devices


      if (event.touches) {
        // check that this isn't another touchstart due to multitouch
        // otherwise we will only clear a single timer when unmounting while two
        // are running
        if (startTimerCommit.current === null) {
          // Prepare the ripple effect.
          startTimerCommit.current = () => {
            startCommit({
              pulsate,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          }; // Delay the execution of the ripple effect.


          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
        }
      } else {
        startCommit({
          pulsate,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React__namespace.useCallback(() => {
      start({}, {
        pulsate: true
      });
    }, [start]);
    const stop = React__namespace.useCallback((event, cb) => {
      clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
      // We still want to show ripple effect.

      if (event.type === 'touchend' && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }

      startTimerCommit.current = null;
      setRipples(oldRipples => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }

        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React__namespace.useImperativeHandle(ref, () => ({
      pulsate,
      start,
      stop
    }), [pulsate, start, stop]);
    return /*#__PURE__*/jsxRuntime_1(TouchRippleRoot, _extends({
      className: clsx(classes.root, touchRippleClasses$1.root, className),
      ref: container
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(TransitionGroup$1, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string
  } ;
  var TouchRipple$1 = TouchRipple;

  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass('MuiButtonBase', slot);
  }
  const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
  var buttonBaseClasses$1 = buttonBaseClasses;

  const _excluded$1Y = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "type"];

  const useUtilityClasses$1E = ownerState => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);

    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }

    return composedClasses;
  };

  const ButtonBaseRoot = styled$1('button', {
    name: 'MuiButtonBase',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    boxSizing: 'border-box',
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent',
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
      borderStyle: 'none' // Remove Firefox dotted outline.

    },
    [`&.${buttonBaseClasses$1.disabled}`]: {
      pointerEvents: 'none',
      // Disable link interactions
      cursor: 'default'
    },
    '@media print': {
      colorAdjust: 'exact'
    }
  });
  /**
   * `ButtonBase` contains as few styles as possible.
   * It aims to be a simple building block for creating a button.
   * It contains a load of style reset and some focus/ripple logic.
   */

  const ButtonBase = /*#__PURE__*/React__namespace.forwardRef(function ButtonBase(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiButtonBase'
    });

    const {
      action,
      centerRipple = false,
      children,
      className,
      component = 'button',
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = 'a',
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      type
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1Y);

    const buttonRef = React__namespace.useRef(null);
    const rippleRef = React__namespace.useRef(null);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);

    if (disabled && focusVisible) {
      setFocusVisible(false);
    }

    React__namespace.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    React__namespace.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible]);

    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback(event => {
        if (eventCallback) {
          eventCallback(event);
        }

        const ignore = skipRippleAction;

        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }

        return true;
      });
    }

    const handleMouseDown = useRippleHandler('start', onMouseDown);
    const handleContextMenu = useRippleHandler('stop', onContextMenu);
    const handleDragLeave = useRippleHandler('stop', onDragLeave);
    const handleMouseUp = useRippleHandler('stop', onMouseUp);
    const handleMouseLeave = useRippleHandler('stop', event => {
      if (focusVisible) {
        event.preventDefault();
      }

      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler('start', onTouchStart);
    const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
    const handleTouchMove = useRippleHandler('stop', onTouchMove);
    const handleBlur = useRippleHandler('stop', event => {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }

      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback(event => {
      // Fix for https://github.com/facebook/react/issues/7769
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }

      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);

        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }

      if (onFocus) {
        onFocus(event);
      }
    });

    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== 'button' && !(button.tagName === 'A' && button.href);
    };
    /**
     * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
     */


    const keydownRef = React__namespace.useRef(false);
    const handleKeyDown = useEventCallback(event => {
      // Check if key is already down to avoid repeats being counted as multiple activations
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }

      if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
        event.preventDefault();
      }

      if (onKeyDown) {
        onKeyDown(event);
      } // Keyboard accessibility for non interactive elements


      if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
        event.preventDefault();

        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback(event => {
      // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
      // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
      if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }

      if (onKeyUp) {
        onKeyUp(event);
      } // Keyboard accessibility for non interactive elements


      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;

    if (ComponentProp === 'button' && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }

    const buttonProps = {};

    if (ComponentProp === 'button') {
      buttonProps.type = type === undefined ? 'button' : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = 'button';
      }

      if (disabled) {
        buttonProps['aria-disabled'] = disabled;
      }
    }

    const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
    const handleRef = useForkRef(ref, handleOwnRef);
    const [mountedState, setMountedState] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
        }
      }, [enableTouchRipple]);
    }

    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });

    const classes = useUtilityClasses$1E(ownerState);
    return /*#__PURE__*/jsxRuntime_2(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      onBlur: handleBlur,
      onClick: onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type: type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ?
      /*#__PURE__*/

      /* TouchRipple is only needed client-side, x2 boost on the server. */
      jsxRuntime_1(TouchRipple$1, _extends({
        ref: rippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null]
    }));
  });
  ButtonBase.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType$1,

    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: propTypes.bool,

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: propTypes.bool,

    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: propTypes.bool,

    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: propTypes.bool,

    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: propTypes.string,

    /**
     * @ignore
     */
    href: propTypes
    /* @typescript-to-proptypes-ignore */
    .any,

    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: propTypes.elementType,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * @ignore
     */
    onContextMenu: propTypes.func,

    /**
     * @ignore
     */
    onDragLeave: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: propTypes.func,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * @ignore
     */
    onKeyUp: propTypes.func,

    /**
     * @ignore
     */
    onMouseDown: propTypes.func,

    /**
     * @ignore
     */
    onMouseLeave: propTypes.func,

    /**
     * @ignore
     */
    onMouseUp: propTypes.func,

    /**
     * @ignore
     */
    onTouchEnd: propTypes.func,

    /**
     * @ignore
     */
    onTouchMove: propTypes.func,

    /**
     * @ignore
     */
    onTouchStart: propTypes.func,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * @default 0
     */
    tabIndex: propTypes.number,

    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: propTypes.object,

    /**
     * @ignore
     */
    type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string])
  } ;
  var ButtonBase$1 = ButtonBase;

  function getAccordionSummaryUtilityClass(slot) {
    return generateUtilityClass('MuiAccordionSummary', slot);
  }
  const accordionSummaryClasses = generateUtilityClasses('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);
  var accordionSummaryClasses$1 = accordionSummaryClasses;

  const _excluded$1X = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];

  const useUtilityClasses$1D = ownerState => {
    const {
      classes,
      expanded,
      disabled,
      disableGutters
    } = ownerState;
    const slots = {
      root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
      focusVisible: ['focusVisible'],
      content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],
      expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']
    };
    return composeClasses(slots, getAccordionSummaryUtilityClass, classes);
  };

  const AccordionSummaryRoot = styled$1(ButtonBase$1, {
    name: 'MuiAccordionSummary',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme,
    ownerState
  }) => {
    const transition = {
      duration: theme.transitions.duration.shortest
    };
    return _extends({
      display: 'flex',
      minHeight: 48,
      padding: theme.spacing(0, 2),
      transition: theme.transitions.create(['min-height', 'background-color'], transition),
      [`&.${accordionSummaryClasses$1.focusVisible}`]: {
        backgroundColor: theme.palette.action.focus
      },
      [`&.${accordionSummaryClasses$1.disabled}`]: {
        opacity: theme.palette.action.disabledOpacity
      },
      [`&:hover:not(.${accordionSummaryClasses$1.disabled})`]: {
        cursor: 'pointer'
      }
    }, !ownerState.disableGutters && {
      [`&.${accordionSummaryClasses$1.expanded}`]: {
        minHeight: 64
      }
    });
  });
  const AccordionSummaryContent = styled$1('div', {
    name: 'MuiAccordionSummary',
    slot: 'Content',
    overridesResolver: (props, styles) => styles.content
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'flex',
    flexGrow: 1,
    margin: '12px 0'
  }, !ownerState.disableGutters && {
    transition: theme.transitions.create(['margin'], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${accordionSummaryClasses$1.expanded}`]: {
      margin: '20px 0'
    }
  }));
  const AccordionSummaryExpandIconWrapper = styled$1('div', {
    name: 'MuiAccordionSummary',
    slot: 'ExpandIconWrapper',
    overridesResolver: (props, styles) => styles.expandIconWrapper
  })(({
    theme
  }) => ({
    display: 'flex',
    color: theme.palette.action.active,
    transform: 'rotate(0deg)',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${accordionSummaryClasses$1.expanded}`]: {
      transform: 'rotate(180deg)'
    }
  }));
  const AccordionSummary = /*#__PURE__*/React__namespace.forwardRef(function AccordionSummary(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAccordionSummary'
    });

    const {
      children,
      className,
      expandIcon,
      focusVisibleClassName,
      onClick
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1X);

    const {
      disabled = false,
      disableGutters,
      expanded,
      toggle
    } = React__namespace.useContext(AccordionContext$1);

    const handleChange = event => {
      if (toggle) {
        toggle(event);
      }

      if (onClick) {
        onClick(event);
      }
    };

    const ownerState = _extends({}, props, {
      expanded,
      disabled,
      disableGutters
    });

    const classes = useUtilityClasses$1D(ownerState);
    return /*#__PURE__*/jsxRuntime_2(AccordionSummaryRoot, _extends({
      focusRipple: false,
      disableRipple: true,
      disabled: disabled,
      component: "div",
      "aria-expanded": expanded,
      className: clsx(classes.root, className),
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      onClick: handleChange,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [/*#__PURE__*/jsxRuntime_1(AccordionSummaryContent, {
        className: classes.content,
        ownerState: ownerState,
        children: children
      }), expandIcon && /*#__PURE__*/jsxRuntime_1(AccordionSummaryExpandIconWrapper, {
        className: classes.expandIconWrapper,
        ownerState: ownerState,
        children: expandIcon
      })]
    }));
  });
  AccordionSummary.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The icon to display as the expand indicator.
     */
    expandIcon: propTypes.node,

    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: propTypes.string,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var AccordionSummary$1 = AccordionSummary;

  function getAlertUtilityClass(slot) {
    return generateUtilityClass('MuiAlert', slot);
  }
  const alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);
  var alertClasses$1 = alertClasses;

  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass('MuiIconButton', slot);
  }
  const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
  var iconButtonClasses$1 = iconButtonClasses;

  const _excluded$1W = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];

  const useUtilityClasses$1C = ownerState => {
    const {
      classes,
      disabled,
      color,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };

  const IconButtonRoot = styled$1(ButtonBase$1, {
    name: 'MuiIconButton',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: 'center',
    flex: '0 0 auto',
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: '50%',
    overflow: 'visible',
    // Explicitly set the default value to solve a bug on IE11.
    color: theme.palette.action.active,
    transition: theme.transitions.create('background-color', {
      duration: theme.transitions.duration.shortest
    }),
    '&:hover': {
      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }
  }, ownerState.edge === 'start' && {
    marginLeft: ownerState.size === 'small' ? -3 : -12
  }, ownerState.edge === 'end' && {
    marginRight: ownerState.size === 'small' ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.color === 'inherit' && {
    color: 'inherit'
  }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && {
    color: theme.palette[ownerState.color].main,
    '&:hover': {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }
  }, ownerState.size === 'small' && {
    padding: 5,
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === 'large' && {
    padding: 12,
    fontSize: theme.typography.pxToRem(28)
  }, {
    [`&.${iconButtonClasses$1.disabled}`]: {
      backgroundColor: 'transparent',
      color: theme.palette.action.disabled
    }
  }));
  /**
   * Refer to the [Icons](/components/icons/) section of the documentation
   * regarding the available icon options.
   */

  const IconButton = /*#__PURE__*/React__namespace.forwardRef(function IconButton(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiIconButton'
    });

    const {
      edge = false,
      children,
      className,
      color = 'default',
      disabled = false,
      disableFocusRipple = false,
      size = 'medium'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1W);

    const ownerState = _extends({}, props, {
      edge,
      color,
      disabled,
      disableFocusRipple,
      size
    });

    const classes = useUtilityClasses$1C(ownerState);
    return /*#__PURE__*/jsxRuntime_1(IconButtonRoot, _extends({
      className: clsx(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled: disabled,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: children
    }));
  });
  IconButton.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The icon to display.
     */
    children: chainPropTypes(propTypes.node, props => {
      const found = React__namespace.Children.toArray(props.children).some(child => /*#__PURE__*/React__namespace.isValidElement(child) && child.props.onClick);

      if (found) {
        return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\n'));
      }

      return null;
    }),

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: propTypes.bool,

    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: propTypes.oneOf(['end', 'start', false]),

    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var IconButton$1 = IconButton;

  var SuccessOutlinedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), 'SuccessOutlined');

  var ReportProblemOutlinedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), 'ReportProblemOutlined');

  var ErrorOutlineIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), 'ErrorOutline');

  var InfoOutlinedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), 'InfoOutlined');

  var ClearIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), 'Close');

  var _CloseIcon;

  const _excluded$1V = ["action", "children", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"];

  const useUtilityClasses$1B = ownerState => {
    const {
      variant,
      color,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],
      icon: ['icon'],
      message: ['message'],
      action: ['action']
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };

  const AlertRoot = styled$1(Paper$1, {
    name: 'MuiAlert',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const getColor = theme.palette.mode === 'light' ? darken : lighten;
    const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;
    const color = ownerState.color || ownerState.severity;
    return _extends({}, theme.typography.body2, {
      borderRadius: theme.shape.borderRadius,
      backgroundColor: 'transparent',
      display: 'flex',
      padding: '6px 16px'
    }, color && ownerState.variant === 'standard' && {
      color: getColor(theme.palette[color].light, 0.6),
      backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),
      [`& .${alertClasses$1.icon}`]: {
        color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light
      }
    }, color && ownerState.variant === 'outlined' && {
      color: getColor(theme.palette[color].light, 0.6),
      border: `1px solid ${theme.palette[color].light}`,
      [`& .${alertClasses$1.icon}`]: {
        color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light
      }
    }, color && ownerState.variant === 'filled' && {
      color: '#fff',
      fontWeight: theme.typography.fontWeightMedium,
      backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main
    });
  });
  const AlertIcon = styled$1('div', {
    name: 'MuiAlert',
    slot: 'Icon',
    overridesResolver: (props, styles) => styles.icon
  })({
    marginRight: 12,
    padding: '7px 0',
    display: 'flex',
    fontSize: 22,
    opacity: 0.9
  });
  const AlertMessage = styled$1('div', {
    name: 'MuiAlert',
    slot: 'Message',
    overridesResolver: (props, styles) => styles.message
  })({
    padding: '8px 0'
  });
  const AlertAction = styled$1('div', {
    name: 'MuiAlert',
    slot: 'Action',
    overridesResolver: (props, styles) => styles.action
  })({
    display: 'flex',
    alignItems: 'flex-start',
    padding: '4px 0 0 16px',
    marginLeft: 'auto',
    marginRight: -8
  });
  const defaultIconMapping = {
    success: /*#__PURE__*/jsxRuntime_1(SuccessOutlinedIcon, {
      fontSize: "inherit"
    }),
    warning: /*#__PURE__*/jsxRuntime_1(ReportProblemOutlinedIcon, {
      fontSize: "inherit"
    }),
    error: /*#__PURE__*/jsxRuntime_1(ErrorOutlineIcon, {
      fontSize: "inherit"
    }),
    info: /*#__PURE__*/jsxRuntime_1(InfoOutlinedIcon, {
      fontSize: "inherit"
    })
  };
  const Alert = /*#__PURE__*/React__namespace.forwardRef(function Alert(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAlert'
    });

    const {
      action,
      children,
      className,
      closeText = 'Close',
      color,
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = 'alert',
      severity = 'success',
      variant = 'standard'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1V);

    const ownerState = _extends({}, props, {
      color,
      severity,
      variant
    });

    const classes = useUtilityClasses$1B(ownerState);
    return /*#__PURE__*/jsxRuntime_2(AlertRoot, _extends({
      role: role,
      square: true,
      elevation: 0,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: [icon !== false ? /*#__PURE__*/jsxRuntime_1(AlertIcon, {
        ownerState: ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /*#__PURE__*/jsxRuntime_1(AlertMessage, {
        ownerState: ownerState,
        className: classes.message,
        children: children
      }), action != null ? /*#__PURE__*/jsxRuntime_1(AlertAction, {
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /*#__PURE__*/jsxRuntime_1(AlertAction, {
        ownerState: ownerState,
        className: classes.action,
        children: /*#__PURE__*/jsxRuntime_1(IconButton$1, {
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose,
          children: _CloseIcon || (_CloseIcon = /*#__PURE__*/jsxRuntime_1(ClearIcon, {
            fontSize: "small"
          }))
        })
      }) : null]
    }));
  });
  Alert.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: propTypes.node,

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Close'
     */
    closeText: propTypes.string,

    /**
     * The main color for the alert. Unless provided, the value is taken from the `severity` prop.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: propTypes.node,

    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: propTypes.shape({
      error: propTypes.node,
      info: propTypes.node,
      success: propTypes.node,
      warning: propTypes.node
    }),

    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: propTypes.func,

    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: propTypes.string,

    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: propTypes.oneOf(['error', 'info', 'success', 'warning']),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['filled', 'outlined', 'standard']), propTypes.string])
  } ;
  var Alert$1 = Alert;

  function getTypographyUtilityClass(slot) {
    return generateUtilityClass('MuiTypography', slot);
  }
  const typographyClasses = generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);
  var typographyClasses$1 = typographyClasses;

  const _excluded$1U = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];

  const useUtilityClasses$1A = ownerState => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };

  const TypographyRoot = styled$1('span', {
    name: 'MuiTypography',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }, ownerState.gutterBottom && {
    marginBottom: '0.35em'
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  const defaultVariantMapping = {
    h1: 'h1',
    h2: 'h2',
    h3: 'h3',
    h4: 'h4',
    h5: 'h5',
    h6: 'h6',
    subtitle1: 'h6',
    subtitle2: 'h6',
    body1: 'p',
    body2: 'p',
    inherit: 'p'
  }; // TODO v6: deprecate these color values in v5.x and remove the transformation in v6

  const colorTransformations$1 = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
  };

  const transformDeprecatedColors$1 = color => {
    return colorTransformations$1[color] || color;
  };

  const Typography = /*#__PURE__*/React__namespace.forwardRef(function Typography(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: 'MuiTypography'
    });
    const color = transformDeprecatedColors$1(themeProps.color);
    const props = extendSxProp(_extends({}, themeProps, {
      color
    }));

    const {
      align = 'inherit',
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = 'body1',
      variantMapping = defaultVariantMapping
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1U);

    const ownerState = _extends({}, props, {
      align,
      color,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });

    const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
    const classes = useUtilityClasses$1A(ownerState);
    return /*#__PURE__*/jsxRuntime_1(TypographyRoot, _extends({
      as: Component,
      ref: ref,
      ownerState: ownerState,
      className: clsx(classes.root, className)
    }, other));
  });
  Typography.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: propTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: propTypes.bool,

    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: propTypes.bool,

    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), propTypes.string]),

    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: propTypes
    /* @typescript-to-proptypes-ignore */
    .object
  } ;
  var Typography$1 = Typography;

  function getAlertTitleUtilityClass(slot) {
    return generateUtilityClass('MuiAlertTitle', slot);
  }
  const alertTitleClasses = generateUtilityClasses('MuiAlertTitle', ['root']);
  var alertTitleClasses$1 = alertTitleClasses;

  const _excluded$1T = ["className"];

  const useUtilityClasses$1z = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getAlertTitleUtilityClass, classes);
  };

  const AlertTitleRoot = styled$1(Typography$1, {
    name: 'MuiAlertTitle',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => {
    return {
      fontWeight: theme.typography.fontWeightMedium,
      marginTop: -2
    };
  });
  const AlertTitle = /*#__PURE__*/React__namespace.forwardRef(function AlertTitle(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAlertTitle'
    });

    const {
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1T);

    const ownerState = props;
    const classes = useUtilityClasses$1z(ownerState);
    return /*#__PURE__*/jsxRuntime_1(AlertTitleRoot, _extends({
      gutterBottom: true,
      component: "div",
      ownerState: ownerState,
      ref: ref,
      className: clsx(classes.root, className)
    }, other));
  });
  AlertTitle.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var AlertTitle$1 = AlertTitle;

  function getAppBarUtilityClass(slot) {
    return generateUtilityClass('MuiAppBar', slot);
  }
  const appBarClasses = generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent']);
  var appBarClasses$1 = appBarClasses;

  const _excluded$1S = ["className", "color", "enableColorOnDark", "position"];

  const useUtilityClasses$1y = ownerState => {
    const {
      color,
      position,
      classes
    } = ownerState;
    const slots = {
      root: ['root', `color${capitalize(color)}`, `position${capitalize(position)}`]
    };
    return composeClasses(slots, getAppBarUtilityClass, classes);
  };

  const AppBarRoot = styled$1(Paper$1, {
    name: 'MuiAppBar',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`position${capitalize(ownerState.position)}`], styles[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extends({
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      boxSizing: 'border-box',
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === 'fixed' && {
      position: 'fixed',
      zIndex: theme.zIndex.appBar,
      top: 0,
      left: 'auto',
      right: 0,
      '@media print': {
        // Prevent the app bar to be visible on each printed page.
        position: 'absolute'
      }
    }, ownerState.position === 'absolute' && {
      position: 'absolute',
      zIndex: theme.zIndex.appBar,
      top: 0,
      left: 'auto',
      right: 0
    }, ownerState.position === 'sticky' && {
      // ⚠️ sticky is not supported by IE11.
      position: 'sticky',
      zIndex: theme.zIndex.appBar,
      top: 0,
      left: 'auto',
      right: 0
    }, ownerState.position === 'static' && {
      position: 'static'
    }, ownerState.position === 'relative' && {
      position: 'relative'
    }, ownerState.color === 'default' && {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === 'inherit' && {
      color: 'inherit'
    }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === 'transparent' && _extends({
      backgroundColor: 'transparent',
      color: 'inherit'
    }, theme.palette.mode === 'dark' && {
      backgroundImage: 'none'
    }));
  });
  const AppBar = /*#__PURE__*/React__namespace.forwardRef(function AppBar(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAppBar'
    });

    const {
      className,
      color = 'primary',
      enableColorOnDark = false,
      position = 'fixed'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1S);

    const ownerState = _extends({}, props, {
      color,
      position,
      enableColorOnDark
    });

    const classes = useUtilityClasses$1y(ownerState);
    return /*#__PURE__*/jsxRuntime_1(AppBarRoot, _extends({
      square: true,
      component: "header",
      ownerState: ownerState,
      elevation: 4,
      className: clsx(classes.root, className, position === 'fixed' && 'mui-fixed'),
      ref: ref
    }, other));
  });
  AppBar.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']), propTypes.string]),

    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: propTypes.bool,

    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: propTypes.oneOf(['absolute', 'fixed', 'relative', 'static', 'sticky']),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var AppBar$1 = AppBar;

  function getListSubheaderUtilityClass(slot) {
    return generateUtilityClass('MuiListSubheader', slot);
  }
  const listSubheaderClasses = generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);
  var listSubheaderClasses$1 = listSubheaderClasses;

  const _excluded$1R = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];

  const useUtilityClasses$1x = ownerState => {
    const {
      classes,
      color,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']
    };
    return composeClasses(slots, getListSubheaderUtilityClass, classes);
  };

  const ListSubheaderRoot = styled$1('li', {
    name: 'MuiListSubheader',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    boxSizing: 'border-box',
    lineHeight: '48px',
    listStyle: 'none',
    color: theme.palette.text.secondary,
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(14)
  }, ownerState.color === 'primary' && {
    color: theme.palette.primary.main
  }, ownerState.color === 'inherit' && {
    color: 'inherit'
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: 'sticky',
    top: 0,
    zIndex: 1,
    backgroundColor: theme.palette.background.paper
  }));
  const ListSubheader = /*#__PURE__*/React__namespace.forwardRef(function ListSubheader(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListSubheader'
    });

    const {
      className,
      color = 'default',
      component = 'li',
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1R);

    const ownerState = _extends({}, props, {
      color,
      component,
      disableGutters,
      disableSticky,
      inset
    });

    const classes = useUtilityClasses$1x(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ListSubheaderRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  ListSubheader.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: propTypes.oneOf(['default', 'inherit', 'primary']),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the List Subheader will not have gutters.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * If `true`, the List Subheader will not stick to the top during scroll.
     * @default false
     */
    disableSticky: propTypes.bool,

    /**
     * If `true`, the List Subheader is indented.
     * @default false
     */
    inset: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ListSubheader$1 = ListSubheader;

  var CancelIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), 'Cancel');

  function getChipUtilityClass(slot) {
    return generateUtilityClass('MuiChip', slot);
  }
  const chipClasses = generateUtilityClasses('MuiChip', ['root', 'sizeSmall', 'sizeMedium', 'colorPrimary', 'colorSecondary', 'disabled', 'clickable', 'clickableColorPrimary', 'clickableColorSecondary', 'deletable', 'deletableColorPrimary', 'deletableColorSecondary', 'outlined', 'filled', 'outlinedPrimary', 'outlinedSecondary', 'avatar', 'avatarSmall', 'avatarMedium', 'avatarColorPrimary', 'avatarColorSecondary', 'icon', 'iconSmall', 'iconMedium', 'iconColorPrimary', 'iconColorSecondary', 'label', 'labelSmall', 'labelMedium', 'deleteIcon', 'deleteIconSmall', 'deleteIconMedium', 'deleteIconColorPrimary', 'deleteIconColorSecondary', 'deleteIconOutlinedColorPrimary', 'deleteIconOutlinedColorSecondary', 'focusVisible']);
  var chipClasses$1 = chipClasses;

  const _excluded$1Q = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"];

  const useUtilityClasses$1w = ownerState => {
    const {
      classes,
      disabled,
      size,
      color,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
      label: ['label', `label${capitalize(size)}`],
      avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
      icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(color)}`],
      deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIconOutlinedColor${capitalize(color)}`]
    };
    return composeClasses(slots, getChipUtilityClass, classes);
  };

  const ChipRoot = styled$1('div', {
    name: 'MuiChip',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      const {
        color,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses$1.avatar}`]: styles.avatar
      }, {
        [`& .${chipClasses$1.avatar}`]: styles[`avatar${capitalize(size)}`]
      }, {
        [`& .${chipClasses$1.avatar}`]: styles[`avatarColor${capitalize(color)}`]
      }, {
        [`& .${chipClasses$1.icon}`]: styles.icon
      }, {
        [`& .${chipClasses$1.icon}`]: styles[`icon${capitalize(size)}`]
      }, {
        [`& .${chipClasses$1.icon}`]: styles[`iconColor${capitalize(color)}`]
      }, {
        [`& .${chipClasses$1.deleteIcon}`]: styles.deleteIcon
      }, {
        [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
      }, {
        [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
      }, {
        [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIconOutlinedColor${capitalize(color)}`]
      }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], variant === 'outlined' && styles[`outlined${capitalize(color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
    return _extends({
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      height: 32,
      color: theme.palette.text.primary,
      backgroundColor: theme.palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: 'nowrap',
      transition: theme.transitions.create(['background-color', 'box-shadow']),
      // label will inherit this from root, then `clickable` class overrides this for both
      cursor: 'default',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: 'none',
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: 'middle',
      boxSizing: 'border-box',
      [`&.${chipClasses$1.disabled}`]: {
        opacity: theme.palette.action.disabledOpacity,
        pointerEvents: 'none'
      },
      [`& .${chipClasses$1.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses$1.avatarColorPrimary}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.dark
      },
      [`& .${chipClasses$1.avatarColorSecondary}`]: {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.dark
      },
      [`& .${chipClasses$1.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses$1.icon}`]: _extends({
        color: theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === 'small' && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.color !== 'default' && {
        color: 'inherit'
      }),
      [`& .${chipClasses$1.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: 'transparent',
        color: deleteIconColor,
        fontSize: 22,
        cursor: 'pointer',
        margin: '0 5px 0 -6px',
        '&:hover': {
          color: alpha(deleteIconColor, 0.4)
        }
      }, ownerState.size === 'small' && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== 'default' && {
        color: alpha(theme.palette[ownerState.color].contrastText, 0.7),
        '&:hover, &:active': {
          color: theme.palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === 'small' && {
      height: 24
    }, ownerState.color !== 'default' && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== 'default' && {
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: 'none',
    WebkitTapHighlightColor: 'transparent',
    cursor: 'pointer',
    '&:hover': {
      backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses$1.focusVisible}`]: {
      backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    '&:active': {
      boxShadow: theme.shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== 'default' && {
    [`&:hover, &.${chipClasses$1.focusVisible}`]: {
      backgroundColor: theme.palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === 'outlined' && {
    backgroundColor: 'transparent',
    border: `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses$1.clickable}:hover`]: {
      backgroundColor: theme.palette.action.hover
    },
    [`&.${chipClasses$1.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`& .${chipClasses$1.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses$1.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses$1.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses$1.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses$1.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses$1.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === 'outlined' && ownerState.color !== 'default' && {
    color: theme.palette[ownerState.color].main,
    border: `1px solid ${alpha(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses$1.clickable}:hover`]: {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses$1.focusVisible}`]: {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses$1.deleteIcon}`]: {
      color: alpha(theme.palette[ownerState.color].main, 0.7),
      '&:hover, &:active': {
        color: theme.palette[ownerState.color].main
      }
    }
  }));
  const ChipLabel = styled$1('span', {
    name: 'MuiChip',
    slot: 'Label',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles.label, styles[`label${capitalize(size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: 'nowrap'
  }, ownerState.size === 'small' && {
    paddingLeft: 8,
    paddingRight: 8
  }));

  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
  }
  /**
   * Chips represent complex entities in small blocks, such as a contact.
   */


  const Chip = /*#__PURE__*/React__namespace.forwardRef(function Chip(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiChip'
    });

    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color = 'default',
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = 'medium',
      variant = 'filled'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1Q);

    const chipRef = React__namespace.useRef(null);
    const handleRef = useForkRef(chipRef, ref);

    const handleDeleteIconClick = event => {
      // Stop the event from bubbling up to the `Chip`
      event.stopPropagation();

      if (onDelete) {
        onDelete(event);
      }
    };

    const handleKeyDown = event => {
      // Ignore events from children of `Chip`.
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        // Will be handled in keyUp, otherwise some browsers
        // might init navigation
        event.preventDefault();
      }

      if (onKeyDown) {
        onKeyDown(event);
      }
    };

    const handleKeyUp = event => {
      // Ignore events from children of `Chip`.
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === 'Escape' && chipRef.current) {
          chipRef.current.blur();
        }
      }

      if (onKeyUp) {
        onKeyUp(event);
      }
    };

    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const small = size === 'small';
    const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || 'div';

    const ownerState = _extends({}, props, {
      component,
      disabled,
      size,
      color,
      onDelete: !!onDelete,
      clickable,
      variant
    });

    const classes = useUtilityClasses$1w(ownerState);
    const moreProps = component === ButtonBase$1 ? _extends({
      component: ComponentProp || 'div',
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;

    if (onDelete) {
      const customClasses = clsx(color !== 'default' && (variant === 'outlined' ? classes[`deleteIconOutlinedColor${capitalize(color)}`] : classes[`deleteIconColor${capitalize(color)}`]), small && classes.deleteIconSmall);
      deleteIcon = deleteIconProp && /*#__PURE__*/React__namespace.isValidElement(deleteIconProp) ? /*#__PURE__*/React__namespace.cloneElement(deleteIconProp, {
        className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),
        onClick: handleDeleteIconClick
      }) : /*#__PURE__*/jsxRuntime_1(CancelIcon, {
        className: clsx(classes.deleteIcon, customClasses),
        onClick: handleDeleteIconClick
      });
    }

    let avatar = null;

    if (avatarProp && /*#__PURE__*/React__namespace.isValidElement(avatarProp)) {
      avatar = /*#__PURE__*/React__namespace.cloneElement(avatarProp, {
        className: clsx(classes.avatar, avatarProp.props.className)
      });
    }

    let icon = null;

    if (iconProp && /*#__PURE__*/React__namespace.isValidElement(iconProp)) {
      icon = /*#__PURE__*/React__namespace.cloneElement(iconProp, {
        className: clsx(classes.icon, iconProp.props.className)
      });
    }

    {
      if (avatar && icon) {
        console.error('MUI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');
      }
    }

    return /*#__PURE__*/jsxRuntime_2(ChipRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      disabled: clickable && disabled ? true : undefined,
      onClick: onClick,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      ownerState: ownerState
    }, moreProps, other, {
      children: [avatar || icon, /*#__PURE__*/jsxRuntime_1(ChipLabel, {
        className: clsx(classes.label),
        ownerState: ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  Chip.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The Avatar element to display.
     */
    avatar: propTypes.element,

    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: propTypes.bool,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: propTypes.element,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * Icon element.
     */
    icon: propTypes.element,

    /**
     * The content of the component.
     */
    label: propTypes.node,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: propTypes.func,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * @ignore
     */
    onKeyUp: propTypes.func,

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['filled', 'outlined']), propTypes.string])
  } ;
  var Chip$1 = Chip;

  function getInputUtilityClass(slot) {
    return generateUtilityClass('MuiInput', slot);
  }
  const inputClasses = generateUtilityClasses('MuiInput', ['root', 'formControl', 'focused', 'disabled', 'colorSecondary', 'underline', 'error', 'sizeSmall', 'multiline', 'fullWidth', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch']);
  var inputClasses$1 = inputClasses;

  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass('MuiInputBase', slot);
  }
  const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
  var inputBaseClasses$1 = inputBaseClasses;

  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass('MuiOutlinedInput', slot);
  }
  const outlinedInputClasses = generateUtilityClasses('MuiOutlinedInput', ['root', 'colorSecondary', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'notchedOutline', 'input', 'inputSizeSmall', 'inputMultiline', 'inputAdornedStart', 'inputAdornedEnd']);
  var outlinedInputClasses$1 = outlinedInputClasses;

  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass('MuiFilledInput', slot);
  }
  const filledInputClasses = generateUtilityClasses('MuiFilledInput', ['root', 'colorSecondary', 'underline', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'hiddenLabel', 'input', 'inputSizeSmall', 'inputHiddenLabel', 'inputMultiline', 'inputAdornedStart', 'inputAdornedEnd']);
  var filledInputClasses$1 = filledInputClasses;

  var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M7 10l5 5 5-5z"
  }), 'ArrowDropDown');

  function getAutocompleteUtilityClass(slot) {
    return generateUtilityClass('MuiAutocomplete', slot);
  }
  const autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);
  var autocompleteClasses$1 = autocompleteClasses;

  var _ClearIcon, _ArrowDropDownIcon;

  const _excluded$1P = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "value"];

  const useUtilityClasses$1v = ownerState => {
    const {
      classes,
      disablePortal,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size
    } = ownerState;
    const slots = {
      root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],
      inputRoot: ['inputRoot'],
      input: ['input', inputFocused && 'inputFocused'],
      tag: ['tag', `tagSize${capitalize(size)}`],
      endAdornment: ['endAdornment'],
      clearIndicator: ['clearIndicator'],
      popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],
      popper: ['popper', disablePortal && 'popperDisablePortal'],
      paper: ['paper'],
      listbox: ['listbox'],
      loading: ['loading'],
      noOptions: ['noOptions'],
      option: ['option'],
      groupLabel: ['groupLabel'],
      groupUl: ['groupUl']
    };
    return composeClasses(slots, getAutocompleteUtilityClass, classes);
  };

  const AutocompleteRoot = styled$1('div', {
    name: 'MuiAutocomplete',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size
      } = ownerState;
      return [{
        [`& .${autocompleteClasses$1.tag}`]: styles.tag
      }, {
        [`& .${autocompleteClasses$1.tag}`]: styles[`tagSize${capitalize(size)}`]
      }, {
        [`& .${autocompleteClasses$1.inputRoot}`]: styles.inputRoot
      }, {
        [`& .${autocompleteClasses$1.input}`]: styles.input
      }, {
        [`& .${autocompleteClasses$1.input}`]: inputFocused && styles.inputFocused
      }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];
    }
  })(({
    ownerState
  }) => _extends({
    [`&.${autocompleteClasses$1.focused} .${autocompleteClasses$1.clearIndicator}`]: {
      visibility: 'visible'
    },

    /* Avoid double tap issue on iOS */
    '@media (pointer: fine)': {
      [`&:hover .${autocompleteClasses$1.clearIndicator}`]: {
        visibility: 'visible'
      }
    }
  }, ownerState.fullWidth && {
    width: '100%'
  }, {
    [`& .${autocompleteClasses$1.tag}`]: _extends({
      margin: 3,
      maxWidth: 'calc(100% - 6px)'
    }, ownerState.size === 'small' && {
      margin: 2,
      maxWidth: 'calc(100% - 4px)'
    }),
    [`& .${autocompleteClasses$1.inputRoot}`]: {
      flexWrap: 'wrap',
      [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses$1.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses$1.root}`]: {
      paddingBottom: 1,
      '& .MuiInput-input': {
        padding: '4px 4px 4px 0px'
      }
    },
    [`& .${inputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
      [`& .${inputClasses$1.input}`]: {
        padding: '2px 4px 3px 0'
      }
    },
    [`& .${outlinedInputClasses$1.root}`]: {
      padding: 9,
      [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses$1.input}`]: {
        padding: '7.5px 4px 7.5px 6px'
      },
      [`& .${autocompleteClasses$1.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
      padding: 6,
      [`& .${autocompleteClasses$1.input}`]: {
        padding: '2.5px 4px 2.5px 6px'
      }
    },
    [`& .${filledInputClasses$1.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses$1.input}`]: {
        padding: '7px 4px'
      },
      [`& .${autocompleteClasses$1.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses$1.input}`]: {
        padding: '2.5px 4px'
      }
    },
    [`& .${inputBaseClasses$1.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${autocompleteClasses$1.input}`]: _extends({
      flexGrow: 1,
      textOverflow: 'ellipsis',
      opacity: 0
    }, ownerState.inputFocused && {
      opacity: 1
    })
  }));
  const AutocompleteEndAdornment = styled$1('div', {
    name: 'MuiAutocomplete',
    slot: 'EndAdornment',
    overridesResolver: (props, styles) => styles.endAdornment
  })({
    // We use a position absolute to support wrapping tags.
    position: 'absolute',
    right: 0,
    top: 'calc(50% - 14px)' // Center vertically

  });
  const AutocompleteClearIndicator = styled$1(IconButton$1, {
    name: 'MuiAutocomplete',
    slot: 'ClearIndicator',
    overridesResolver: (props, styles) => styles.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: 'hidden'
  });
  const AutocompletePopupIndicator = styled$1(IconButton$1, {
    name: 'MuiAutocomplete',
    slot: 'PopupIndicator',
    overridesResolver: ({
      ownerState
    }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)
  })(({
    ownerState
  }) => _extends({
    padding: 2,
    marginRight: -2
  }, ownerState.popupOpen && {
    transform: 'rotate(180deg)'
  }));
  const AutocompletePopper = styled$1(Popper$1, {
    name: 'MuiAutocomplete',
    slot: 'Popper',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses$1.option}`]: styles.option
      }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: theme.zIndex.modal
  }, ownerState.disablePortal && {
    position: 'absolute'
  }));
  const AutocompletePaper = styled$1(Paper$1, {
    name: 'MuiAutocomplete',
    slot: 'Paper',
    overridesResolver: (props, styles) => styles.paper
  })(({
    theme
  }) => _extends({}, theme.typography.body1, {
    overflow: 'auto'
  }));
  const AutocompleteLoading = styled$1('div', {
    name: 'MuiAutocomplete',
    slot: 'Loading',
    overridesResolver: (props, styles) => styles.loading
  })(({
    theme
  }) => ({
    color: theme.palette.text.secondary,
    padding: '14px 16px'
  }));
  const AutocompleteNoOptions = styled$1('div', {
    name: 'MuiAutocomplete',
    slot: 'NoOptions',
    overridesResolver: (props, styles) => styles.noOptions
  })(({
    theme
  }) => ({
    color: theme.palette.text.secondary,
    padding: '14px 16px'
  }));
  const AutocompleteListbox = styled$1('div', {
    name: 'MuiAutocomplete',
    slot: 'Listbox',
    overridesResolver: (props, styles) => styles.listbox
  })(({
    theme
  }) => ({
    listStyle: 'none',
    margin: 0,
    padding: '8px 0',
    maxHeight: '40vh',
    overflow: 'auto',
    [`& .${autocompleteClasses$1.option}`]: {
      minHeight: 48,
      display: 'flex',
      overflow: 'hidden',
      justifyContent: 'flex-start',
      alignItems: 'center',
      cursor: 'pointer',
      paddingTop: 6,
      boxSizing: 'border-box',
      outline: '0',
      WebkitTapHighlightColor: 'transparent',
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme.breakpoints.up('sm')]: {
        minHeight: 'auto'
      },
      [`&.${autocompleteClasses$1.focused}`]: {
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      '&[aria-disabled="true"]': {
        opacity: theme.palette.action.disabledOpacity,
        pointerEvents: 'none'
      },
      [`&.${autocompleteClasses$1.focusVisible}`]: {
        backgroundColor: theme.palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${autocompleteClasses$1.focused}`]: {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: theme.palette.action.selected
          }
        },
        [`&.${autocompleteClasses$1.focusVisible}`]: {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }
  }));
  const AutocompleteGroupLabel = styled$1(ListSubheader$1, {
    name: 'MuiAutocomplete',
    slot: 'GroupLabel',
    overridesResolver: (props, styles) => styles.groupLabel
  })(({
    theme
  }) => ({
    backgroundColor: theme.palette.background.paper,
    top: -8
  }));
  const AutocompleteGroupUl = styled$1('ul', {
    name: 'MuiAutocomplete',
    slot: 'GroupUl',
    overridesResolver: (props, styles) => styles.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses$1.option}`]: {
      paddingLeft: 24
    }
  });
  const Autocomplete = /*#__PURE__*/React__namespace.forwardRef(function Autocomplete(inProps, ref) {
    var _componentsProps$clea;

    const props = useThemeProps({
      props: inProps,
      name: 'MuiAutocomplete'
    });
    /* eslint-disable @typescript-eslint/no-unused-vars */

    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className,
      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/jsxRuntime_1(ClearIcon, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = 'Clear',
      closeText = 'Close',
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = 'auto',
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = more => `+${more}`,
      getOptionLabel = option => {
        var _option$label;

        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = 'ul',
      ListboxProps,
      loading = false,
      loadingText = 'Loading…',
      multiple = false,
      noOptionsText = 'No options',
      openOnFocus = false,
      openText = 'Open',
      PaperComponent = Paper$1,
      PopperComponent = Popper$1,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/jsxRuntime_1(ArrowDropDownIcon, {})),
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size = 'medium'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1P);
    /* eslint-enable @typescript-eslint/no-unused-vars */


    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete(_extends({}, props, {
      componentName: 'Autocomplete'
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;

    const ownerState = _extends({}, props, {
      disablePortal,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size
    });

    const classes = useUtilityClasses$1v(ownerState);
    let startAdornment;

    if (multiple && value.length > 0) {
      const getCustomizedTagProps = params => _extends({
        className: clsx(classes.tag),
        disabled
      }, getTagProps(params));

      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps);
      } else {
        startAdornment = value.map((option, index) => /*#__PURE__*/jsxRuntime_1(Chip$1, _extends({
          label: getOptionLabel(option),
          size: size
        }, getCustomizedTagProps({
          index
        }), ChipProps)));
      }
    }

    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;

      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push( /*#__PURE__*/jsxRuntime_1("span", {
          className: classes.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }

    const defaultRenderGroup = params => /*#__PURE__*/jsxRuntime_2("li", {
      children: [/*#__PURE__*/jsxRuntime_1(AutocompleteGroupLabel, {
        className: classes.groupLabel,
        ownerState: ownerState,
        component: "div",
        children: params.group
      }), /*#__PURE__*/jsxRuntime_1(AutocompleteGroupUl, {
        className: classes.groupUl,
        ownerState: ownerState,
        children: params.children
      })]
    }, params.key);

    const renderGroup = renderGroupProp || defaultRenderGroup;

    const defaultRenderOption = (props2, option) => /*#__PURE__*/jsxRuntime_1("li", _extends({}, props2, {
      children: getOptionLabel(option)
    }));

    const renderOption = renderOptionProp || defaultRenderOption;

    const renderListOption = (option, index) => {
      const optionProps = getOptionProps({
        option,
        index
      });
      return renderOption(_extends({}, optionProps, {
        className: classes.option
      }), option, {
        selected: optionProps['aria-selected'],
        inputValue
      });
    };

    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1(AutocompleteRoot, _extends({
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size === 'small' ? 'small' : undefined,
          InputLabelProps: getInputLabelProps(),
          InputProps: {
            ref: setAnchorEl,
            className: classes.inputRoot,
            startAdornment,
            endAdornment: /*#__PURE__*/jsxRuntime_2(AutocompleteEndAdornment, {
              className: classes.endAdornment,
              ownerState: ownerState,
              children: [hasClearIcon ? /*#__PURE__*/jsxRuntime_1(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState: ownerState
              }, componentsProps.clearIndicator, {
                className: clsx(classes.clearIndicator, (_componentsProps$clea = componentsProps.clearIndicator) == null ? void 0 : _componentsProps$clea.className),
                children: clearIcon
              })) : null, hasPopupIcon ? /*#__PURE__*/jsxRuntime_1(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled: disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                className: clsx(classes.popupIndicator),
                ownerState: ownerState,
                children: popupIcon
              })) : null]
            })
          },
          inputProps: _extends({
            className: clsx(classes.input),
            disabled
          }, getInputProps())
        })
      })), popupOpen && anchorEl ? /*#__PURE__*/jsxRuntime_1(AutocompletePopper, {
        as: PopperComponent,
        className: clsx(classes.popper),
        disablePortal: disablePortal,
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        ownerState: ownerState,
        role: "presentation",
        anchorEl: anchorEl,
        open: true,
        children: /*#__PURE__*/jsxRuntime_2(AutocompletePaper, {
          as: PaperComponent,
          className: classes.paper,
          ownerState: ownerState,
          children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/jsxRuntime_1(AutocompleteLoading, {
            className: classes.loading,
            ownerState: ownerState,
            children: loadingText
          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/jsxRuntime_1(AutocompleteNoOptions, {
            className: classes.noOptions,
            ownerState: ownerState,
            role: "presentation",
            onMouseDown: event => {
              // Prevent input blur when interacting with the "no options" content
              event.preventDefault();
            },
            children: noOptionsText
          }) : null, groupedOptions.length > 0 ? /*#__PURE__*/jsxRuntime_1(AutocompleteListbox, _extends({
            as: ListboxComponent,
            className: classes.listbox,
            ownerState: ownerState
          }, getListboxProps(), ListboxProps, {
            children: groupedOptions.map((option, index) => {
              if (groupBy) {
                return renderGroup({
                  key: option.key,
                  group: option.group,
                  children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                });
              }

              return renderListOption(option, index);
            })
          })) : null]
        })
      }) : null]
    });
  });
  Autocomplete.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the portion of the selected suggestion that has not been typed by the user,
     * known as the completion string, appears inline after the input cursor in the textbox.
     * The inline completion string is visually highlighted and has a selected state.
     * @default false
     */
    autoComplete: propTypes.bool,

    /**
     * If `true`, the first option is automatically highlighted.
     * @default false
     */
    autoHighlight: propTypes.bool,

    /**
     * If `true`, the selected option becomes the value of the input
     * when the Autocomplete loses focus unless the user chooses
     * a different option or changes the character string in the input.
     * @default false
     */
    autoSelect: propTypes.bool,

    /**
     * Control if the input should be blurred when an option is selected:
     *
     * - `false` the input is not blurred.
     * - `true` the input is always blurred.
     * - `touch` the input is blurred after a touch event.
     * - `mouse` the input is blurred after a mouse event.
     * @default false
     */
    blurOnSelect: propTypes.oneOfType([propTypes.oneOf(['mouse', 'touch']), propTypes.bool]),

    /**
     * Props applied to the [`Chip`](/api/chip/) element.
     */
    ChipProps: propTypes.object,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The icon to display in place of the default clear icon.
     * @default <ClearIcon fontSize="small" />
     */
    clearIcon: propTypes.node,

    /**
     * If `true`, the input's text is cleared on blur if no value is selected.
     *
     * Set to `true` if you want to help the user enter a new value.
     * Set to `false` if you want to help the user resume his search.
     * @default !props.freeSolo
     */
    clearOnBlur: propTypes.bool,

    /**
     * If `true`, clear all values when the user presses escape and the popup is closed.
     * @default false
     */
    clearOnEscape: propTypes.bool,

    /**
     * Override the default text for the *clear* icon button.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Clear'
     */
    clearText: propTypes.string,

    /**
     * Override the default text for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Close'
     */
    closeText: propTypes.string,

    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     * @default props.multiple ? [] : null
     */
    defaultValue: chainPropTypes(propTypes.any, props => {
      if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {
        return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\n'));
      }

      return null;
    }),

    /**
     * If `true`, the input can't be cleared.
     * @default false
     */
    disableClearable: propTypes.bool,

    /**
     * If `true`, the popup won't close when a value is selected.
     * @default false
     */
    disableCloseOnSelect: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: propTypes.bool,

    /**
     * If `true`, the list box in the popup will not wrap focus.
     * @default false
     */
    disableListWrap: propTypes.bool,

    /**
     * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: propTypes.bool,

    /**
     * A filter function that determines the options that are eligible.
     *
     * @param {T[]} options The options to render.
     * @param {object} state The state of the component.
     * @returns {T[]}
     */
    filterOptions: propTypes.func,

    /**
     * If `true`, hide the selected options from the list box.
     * @default false
     */
    filterSelectedOptions: propTypes.bool,

    /**
     * Force the visibility display of the popup icon.
     * @default 'auto'
     */
    forcePopupIcon: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.bool]),

    /**
     * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
     * @default false
     */
    freeSolo: propTypes.bool,

    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The label to display when the tags are truncated (`limitTags`).
     *
     * @param {number} more The number of truncated tags.
     * @returns {ReactNode}
     * @default (more) => `+${more}`
     */
    getLimitTagsText: propTypes.func,

    /**
     * Used to determine the disabled state for a given option.
     *
     * @param {T} option The option to test.
     * @returns {boolean}
     */
    getOptionDisabled: propTypes.func,

    /**
     * Used to determine the string value for a given option.
     * It's used to fill the input (and the list box options if `renderOption` is not provided).
     *
     * @param {T} option
     * @returns {string}
     * @default (option) => option.label ?? option
     */
    getOptionLabel: propTypes.func,

    /**
     * If provided, the options will be grouped under the returned string.
     * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
     *
     * @param {T} options The options to group.
     * @returns {string}
     */
    groupBy: propTypes.func,

    /**
     * If `true`, the component handles the "Home" and "End" keys when the popup is open.
     * It should move focus to the first option and last option, respectively.
     * @default !props.freeSolo
     */
    handleHomeEndKeys: propTypes.bool,

    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide an id it will fall back to a randomly generated one.
     */
    id: propTypes.string,

    /**
     * If `true`, the highlight can move to the input.
     * @default false
     */
    includeInputInList: propTypes.bool,

    /**
     * The input value.
     */
    inputValue: propTypes.string,

    /**
     * Used to determine if the option represents the given value.
     * Uses strict equality by default.
     * ⚠️ Both arguments need to be handled, an option can only match with one value.
     *
     * @param {T} option The option to test.
     * @param {T} value The value to test against.
     * @returns {boolean}
     */
    isOptionEqualToValue: propTypes.func,

    /**
     * The maximum number of tags that will be visible when not focused.
     * Set `-1` to disable the limit.
     * @default -1
     */
    limitTags: integerPropType,

    /**
     * The component used to render the listbox.
     * @default 'ul'
     */
    ListboxComponent: propTypes.elementType,

    /**
     * Props applied to the Listbox element.
     */
    ListboxProps: propTypes.object,

    /**
     * If `true`, the component is in a loading state.
     * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
     * @default false
     */
    loading: propTypes.bool,

    /**
     * Text to display when in a loading state.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Loading…'
     */
    loadingText: propTypes.node,

    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: propTypes.bool,

    /**
     * Text to display when there are no options.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'No options'
     */
    noOptionsText: propTypes.node,

    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {T|T[]} value The new value of the component.
     * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
     * @param {string} [details]
     */
    onChange: propTypes.func,

    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
     */
    onClose: propTypes.func,

    /**
     * Callback fired when the highlight option changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {T} option The highlighted option.
     * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`.
     */
    onHighlightChange: propTypes.func,

    /**
     * Callback fired when the input value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} value The new value of the text input.
     * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
     */
    onInputChange: propTypes.func,

    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * If `true`, the popup will open on input focus.
     * @default false
     */
    openOnFocus: propTypes.bool,

    /**
     * Override the default text for the *open popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Open'
     */
    openText: propTypes.string,

    /**
     * Array of options.
     */
    options: propTypes.array.isRequired,

    /**
     * The component used to render the body of the popup.
     * @default Paper
     */
    PaperComponent: propTypes.elementType,

    /**
     * The component used to position the popup.
     * @default Popper
     */
    PopperComponent: propTypes.elementType,

    /**
     * The icon to display in place of the default popup icon.
     * @default <ArrowDropDownIcon />
     */
    popupIcon: propTypes.node,

    /**
     * Render the group.
     *
     * @param {AutocompleteRenderGroupParams} params The group to render.
     * @returns {ReactNode}
     */
    renderGroup: propTypes.func,

    /**
     * Render the input.
     *
     * @param {object} params
     * @returns {ReactNode}
     */
    renderInput: propTypes.func.isRequired,

    /**
     * Render the option, use `getOptionLabel` by default.
     *
     * @param {object} props The props to apply on the li element.
     * @param {T} option The option to render.
     * @param {object} state The state of the component.
     * @returns {ReactNode}
     */
    renderOption: propTypes.func,

    /**
     * Render the selected value.
     *
     * @param {T[]} value The `value` provided to the component.
     * @param {function} getTagProps A tag props getter.
     * @returns {ReactNode}
     */
    renderTags: propTypes.func,

    /**
     * If `true`, the input's text is selected on focus.
     * It helps the user clear the selected value.
     * @default !props.freeSolo
     */
    selectOnFocus: propTypes.bool,

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the autocomplete.
     *
     * The value must have reference equality with the option in order to be selected.
     * You can customize the equality behavior with the `isOptionEqualToValue` prop.
     */
    value: chainPropTypes(propTypes.any, props => {
      if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {
        return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\n'));
      }

      return null;
    })
  } ;
  var Autocomplete$1 = Autocomplete;

  var Person = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), 'Person');

  function getAvatarUtilityClass(slot) {
    return generateUtilityClass('MuiAvatar', slot);
  }
  const avatarClasses = generateUtilityClasses('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);
  var avatarClasses$1 = avatarClasses;

  const _excluded$1O = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];

  const useUtilityClasses$1u = ownerState => {
    const {
      classes,
      variant,
      colorDefault
    } = ownerState;
    const slots = {
      root: ['root', variant, colorDefault && 'colorDefault'],
      img: ['img'],
      fallback: ['fallback']
    };
    return composeClasses(slots, getAvatarUtilityClass, classes);
  };

  const AvatarRoot = styled$1('div', {
    name: 'MuiAvatar',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: 'relative',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flexShrink: 0,
    width: 40,
    height: 40,
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(20),
    lineHeight: 1,
    borderRadius: '50%',
    overflow: 'hidden',
    userSelect: 'none'
  }, ownerState.variant === 'rounded' && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === 'square' && {
    borderRadius: 0
  }, ownerState.colorDefault && {
    color: theme.palette.background.default,
    backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
  }));
  const AvatarImg = styled$1('img', {
    name: 'MuiAvatar',
    slot: 'Img',
    overridesResolver: (props, styles) => styles.img
  })({
    width: '100%',
    height: '100%',
    textAlign: 'center',
    // Handle non-square image. The property isn't supported by IE11.
    objectFit: 'cover',
    // Hide alt text.
    color: 'transparent',
    // Hide the image broken icon, only works on Chrome.
    textIndent: 10000
  });
  const AvatarFallback = styled$1(Person, {
    name: 'MuiAvatar',
    slot: 'Fallback',
    overridesResolver: (props, styles) => styles.fallback
  })({
    width: '75%',
    height: '75%'
  });

  function useLoaded({
    crossOrigin,
    referrerPolicy,
    src,
    srcSet
  }) {
    const [loaded, setLoaded] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      if (!src && !srcSet) {
        return undefined;
      }

      setLoaded(false);
      let active = true;
      const image = new Image();

      image.onload = () => {
        if (!active) {
          return;
        }

        setLoaded('loaded');
      };

      image.onerror = () => {
        if (!active) {
          return;
        }

        setLoaded('error');
      };

      image.crossOrigin = crossOrigin;
      image.referrerPolicy = referrerPolicy;
      image.src = src;

      if (srcSet) {
        image.srcset = srcSet;
      }

      return () => {
        active = false;
      };
    }, [crossOrigin, referrerPolicy, src, srcSet]);
    return loaded;
  }

  const Avatar = /*#__PURE__*/React__namespace.forwardRef(function Avatar(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAvatar'
    });

    const {
      alt,
      children: childrenProp,
      className,
      component = 'div',
      imgProps,
      sizes,
      src,
      srcSet,
      variant = 'circular'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1O);

    let children = null; // Use a hook instead of onError on the img element to support server-side rendering.

    const loaded = useLoaded(_extends({}, imgProps, {
      src,
      srcSet
    }));
    const hasImg = src || srcSet;
    const hasImgNotFailing = hasImg && loaded !== 'error';

    const ownerState = _extends({}, props, {
      colorDefault: !hasImgNotFailing,
      component,
      variant
    });

    const classes = useUtilityClasses$1u(ownerState);

    if (hasImgNotFailing) {
      children = /*#__PURE__*/jsxRuntime_1(AvatarImg, _extends({
        alt: alt,
        src: src,
        srcSet: srcSet,
        sizes: sizes,
        ownerState: ownerState,
        className: classes.img
      }, imgProps));
    } else if (childrenProp != null) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = /*#__PURE__*/jsxRuntime_1(AvatarFallback, {
        className: classes.fallback
      });
    }

    return /*#__PURE__*/jsxRuntime_1(AvatarRoot, _extends({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: children
    }));
  });
  Avatar.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Used in combination with `src` or `srcSet` to
     * provide an alt attribute for the rendered `img` element.
     */
    alt: propTypes.string,

    /**
     * Used to render icon or text elements inside the Avatar if `src` is not set.
     * This can be an element, or just a string.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
     * It can be used to listen for the loading error event.
     */
    imgProps: propTypes.object,

    /**
     * The `sizes` attribute for the `img` element.
     */
    sizes: propTypes.string,

    /**
     * The `src` attribute for the `img` element.
     */
    src: propTypes.string,

    /**
     * The `srcSet` attribute for the `img` element.
     * Use this attribute for responsive image display.
     */
    srcSet: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The shape of the avatar.
     * @default 'circular'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['circular', 'rounded', 'square']), propTypes.string])
  } ;
  var Avatar$1 = Avatar;

  function getAvatarGroupUtilityClass(slot) {
    return generateUtilityClass('MuiAvatarGroup', slot);
  }
  const avatarGroupClasses = generateUtilityClasses('MuiAvatarGroup', ['root', 'avatar']);
  var avatarGroupClasses$1 = avatarGroupClasses;

  const _excluded$1N = ["children", "className", "max", "spacing", "variant"];
  const SPACINGS$1 = {
    small: -16,
    medium: null
  };

  const useUtilityClasses$1t = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      avatar: ['avatar']
    };
    return composeClasses(slots, getAvatarGroupUtilityClass, classes);
  };

  const AvatarGroupRoot = styled$1('div', {
    name: 'MuiAvatarGroup',
    slot: 'Root',
    overridesResolver: (props, styles) => _extends({
      [`& .${avatarGroupClasses$1.avatar}`]: styles.avatar
    }, styles.root)
  })(({
    theme
  }) => ({
    [`& .${avatarClasses$1.root}`]: {
      border: `2px solid ${theme.palette.background.default}`,
      boxSizing: 'content-box',
      marginLeft: -8,
      '&:last-child': {
        marginLeft: 0
      }
    },
    display: 'flex',
    flexDirection: 'row-reverse'
  }));
  const AvatarGroupAvatar = styled$1(Avatar$1, {
    name: 'MuiAvatarGroup',
    slot: 'Avatar',
    overridesResolver: (props, styles) => styles.avatar
  })(({
    theme
  }) => ({
    border: `2px solid ${theme.palette.background.default}`,
    boxSizing: 'content-box',
    marginLeft: -8,
    '&:last-child': {
      marginLeft: 0
    }
  }));
  const AvatarGroup = /*#__PURE__*/React__namespace.forwardRef(function AvatarGroup(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiAvatarGroup'
    });

    const {
      children: childrenProp,
      className,
      max = 5,
      spacing = 'medium',
      variant = 'circular'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1N);

    const clampedMax = max < 2 ? 2 : max;

    const ownerState = _extends({}, props, {
      max,
      spacing,
      variant
    });

    const classes = useUtilityClasses$1t(ownerState);
    const children = React__namespace.Children.toArray(childrenProp).filter(child => {
      {
        if (reactIs_2(child)) {
          console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      return /*#__PURE__*/React__namespace.isValidElement(child);
    });
    const extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;
    const marginLeft = spacing && SPACINGS$1[spacing] !== undefined ? SPACINGS$1[spacing] : -spacing;
    return /*#__PURE__*/jsxRuntime_2(AvatarGroupRoot, _extends({
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: [extraAvatars ? /*#__PURE__*/jsxRuntime_2(AvatarGroupAvatar, {
        ownerState: ownerState,
        className: classes.avatar,
        style: {
          marginLeft
        },
        variant: variant,
        children: ["+", extraAvatars]
      }) : null, children.slice(0, children.length - extraAvatars).reverse().map(child => {
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          className: clsx(child.props.className, classes.avatar),
          style: _extends({
            marginLeft
          }, child.props.style),
          variant: child.props.variant || variant
        });
      })]
    }));
  });
  AvatarGroup.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The avatars to stack.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Max avatars to show before +x.
     * @default 5
     */
    max: chainPropTypes(propTypes.number, props => {
      if (props.max < 2) {
        return new Error(['MUI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\n'));
      }

      return null;
    }),

    /**
     * Spacing between avatars.
     * @default 'medium'
     */
    spacing: propTypes.oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.number]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'circular'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['circular', 'rounded', 'square']), propTypes.string])
  } ;
  var AvatarGroup$1 = AvatarGroup;

  const _excluded$1M = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  const styles$4 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  const defaultTimeout$2 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  /**
   * The Fade transition is used by the [Modal](/components/modal/) component.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  const Fade = /*#__PURE__*/React__namespace.forwardRef(function Fade(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout = defaultTimeout$2,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1M);

    const theme = useTheme();
    const nodeRef = React__namespace.useRef(null);
    const foreignRef = useForkRef(children.ref, ref);
    const handleRef = useForkRef(nodeRef, foreignRef);

    const normalizedTransitionCallback = callback => maybeIsAppearing => {
      if (callback) {
        const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

        if (maybeIsAppearing === undefined) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };

    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      reflow(node); // So the animation always start from the start.

      const transitionProps = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'enter'
      });
      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
      node.style.transition = theme.transitions.create('opacity', transitionProps);

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback(node => {
      const transitionProps = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'exit'
      });
      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
      node.style.transition = theme.transitions.create('opacity', transitionProps);

      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);

    const handleAddEndListener = next => {
      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
      }
    };

    return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      appear: appear,
      in: inProp,
      nodeRef: nodeRef ,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout
    }, other, {
      children: (state, childProps) => {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$4[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Fade.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: propTypes.func,

    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: propTypes.bool,

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: propTypes.oneOfType([propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string
    }), propTypes.string]),

    /**
     * If `true`, the component will transition in.
     */
    in: propTypes.bool,

    /**
     * @ignore
     */
    onEnter: propTypes.func,

    /**
     * @ignore
     */
    onEntered: propTypes.func,

    /**
     * @ignore
     */
    onEntering: propTypes.func,

    /**
     * @ignore
     */
    onExit: propTypes.func,

    /**
     * @ignore
     */
    onExited: propTypes.func,

    /**
     * @ignore
     */
    onExiting: propTypes.func,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: duration.enteringScreen,
     *   exit: duration.leavingScreen,
     * }
     */
    timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })])
  } ;
  var Fade$1 = Fade;

  const _excluded$1L = ["children", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];
  const backdropClasses = backdropUnstyledClasses$1;

  const extendUtilityClasses$3 = ownerState => {
    const {
      classes
    } = ownerState;
    return classes;
  };

  const BackdropRoot = styled$1('div', {
    name: 'MuiBackdrop',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.invisible && styles.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: 'fixed',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    WebkitTapHighlightColor: 'transparent'
  }, ownerState.invisible && {
    backgroundColor: 'transparent'
  }));
  const Backdrop = /*#__PURE__*/React__namespace.forwardRef(function Backdrop(inProps, ref) {
    var _componentsProps$root;

    const props = useThemeProps({
      props: inProps,
      name: 'MuiBackdrop'
    });

    const {
      children,
      components = {},
      componentsProps = {},
      className,
      invisible = false,
      open,
      transitionDuration,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Fade$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1L);

    const ownerState = _extends({}, props, {
      invisible
    });

    const classes = extendUtilityClasses$3(ownerState);
    return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(BackdropUnstyled$1, {
        className: className,
        invisible: invisible,
        components: _extends({
          Root: BackdropRoot
        }, components),
        componentsProps: {
          root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent(components.Root)) && {
            ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
          })
        },
        classes: classes,
        ref: ref,
        children: children
      })
    }));
  });
  Backdrop.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The components used for each slot inside the Backdrop.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Backdrop.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: propTypes.bool,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })])
  } ;
  var Backdrop$1 = Backdrop;

  const _excluded$1K = ["components", "componentsProps", "color", "invisible", "badgeContent", "showZero", "variant"];
  const badgeClasses = _extends({}, badgeUnstyledClasses$1, generateUtilityClasses('MuiBadge', ['colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning']));
  const RADIUS_STANDARD = 10;
  const RADIUS_DOT = 4;

  const extendUtilityClasses$2 = ownerState => {
    const {
      color,
      classes = {}
    } = ownerState;
    return _extends({}, classes, {
      badge: clsx(classes.badge, color !== 'default' && [getBadgeUtilityClass(`color${capitalize(color)}`), classes[`color${capitalize(color)}`]])
    });
  };

  const BadgeRoot = styled$1('span', {
    name: 'MuiBadge',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    position: 'relative',
    display: 'inline-flex',
    // For correct alignment with the text.
    verticalAlign: 'middle',
    flexShrink: 0
  });
  const BadgeBadge = styled$1('span', {
    name: 'MuiBadge',
    slot: 'Badge',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    alignContent: 'center',
    alignItems: 'center',
    position: 'absolute',
    boxSizing: 'border-box',
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(12),
    minWidth: RADIUS_STANDARD * 2,
    lineHeight: 1,
    padding: '0 6px',
    height: RADIUS_STANDARD * 2,
    borderRadius: RADIUS_STANDARD,
    zIndex: 1,
    // Render the badge on top of potential ripples.
    transition: theme.transitions.create('transform', {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    })
  }, ownerState.color !== 'default' && {
    backgroundColor: theme.palette[ownerState.color].main,
    color: theme.palette[ownerState.color].contrastText
  }, ownerState.variant === 'dot' && {
    borderRadius: RADIUS_DOT,
    height: RADIUS_DOT * 2,
    minWidth: RADIUS_DOT * 2,
    padding: 0
  }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
    top: 0,
    right: 0,
    transform: 'scale(1) translate(50%, -50%)',
    transformOrigin: '100% 0%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(50%, -50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
    bottom: 0,
    right: 0,
    transform: 'scale(1) translate(50%, 50%)',
    transformOrigin: '100% 100%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(50%, 50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
    top: 0,
    left: 0,
    transform: 'scale(1) translate(-50%, -50%)',
    transformOrigin: '0% 0%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(-50%, -50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
    bottom: 0,
    left: 0,
    transform: 'scale(1) translate(-50%, 50%)',
    transformOrigin: '0% 100%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(-50%, 50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
    top: '14%',
    right: '14%',
    transform: 'scale(1) translate(50%, -50%)',
    transformOrigin: '100% 0%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(50%, -50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
    bottom: '14%',
    right: '14%',
    transform: 'scale(1) translate(50%, 50%)',
    transformOrigin: '100% 100%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(50%, 50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
    top: '14%',
    left: '14%',
    transform: 'scale(1) translate(-50%, -50%)',
    transformOrigin: '0% 0%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(-50%, -50%)'
    }
  }, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
    bottom: '14%',
    left: '14%',
    transform: 'scale(1) translate(-50%, 50%)',
    transformOrigin: '0% 100%',
    [`&.${badgeClasses.invisible}`]: {
      transform: 'scale(0) translate(-50%, 50%)'
    }
  }, ownerState.invisible && {
    transition: theme.transitions.create('transform', {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.leavingScreen
    })
  }));
  const Badge = /*#__PURE__*/React__namespace.forwardRef(function Badge(inProps, ref) {
    var _componentsProps$root, _componentsProps$badg;

    const props = useThemeProps({
      props: inProps,
      name: 'MuiBadge'
    });

    const {
      components = {},
      componentsProps = {},
      color: colorProp = 'default',
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero = false,
      variant: variantProp = 'standard'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1K);

    const prevProps = usePreviousProps$1({
      color: colorProp
    });
    let invisible = invisibleProp;

    if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
      invisible = true;
    }

    const {
      color = colorProp
    } = invisible ? prevProps : props;

    const ownerState = _extends({}, props, {
      invisible,
      color
    });

    const classes = extendUtilityClasses$2(ownerState);
    return /*#__PURE__*/jsxRuntime_1(BadgeUnstyled$1, _extends({
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero: showZero,
      variant: variantProp
    }, other, {
      components: _extends({
        Root: BadgeRoot,
        Badge: BadgeBadge
      }, components),
      componentsProps: {
        root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent(components.Root)) && {
          ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
            color
          })
        }),
        badge: _extends({}, componentsProps.badge, (!components.Thumb || !isHostComponent(components.Thumb)) && {
          ownerState: _extends({}, (_componentsProps$badg = componentsProps.badge) == null ? void 0 : _componentsProps$badg.ownerState, {
            color
          })
        })
      },
      classes: classes,
      ref: ref
    }));
  });
  Badge.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The anchor of the badge.
     * @default {
     *   vertical: 'top',
     *   horizontal: 'right',
     * }
     */
    anchorOrigin: propTypes.shape({
      horizontal: propTypes.oneOf(['left', 'right']).isRequired,
      vertical: propTypes.oneOf(['bottom', 'top']).isRequired
    }),

    /**
     * The content rendered within the badge.
     */
    badgeContent: propTypes.node,

    /**
     * The badge will be added relative to this node.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Badge: propTypes.elementType,
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * If `true`, the badge is invisible.
     */
    invisible: propTypes.bool,

    /**
     * Max count to show.
     * @default 99
     */
    max: propTypes.number,

    /**
     * Wrapped shape the badge should overlap.
     * @default 'rectangular'
     */
    overlap: propTypes.oneOf(['circular', 'rectangular']),

    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['dot', 'standard']), propTypes.string])
  } ;
  var Badge$1 = Badge;

  function getBottomNavigationUtilityClass(slot) {
    return generateUtilityClass('MuiBottomNavigation', slot);
  }
  const bottomNavigationClasses = generateUtilityClasses('MuiBottomNavigation', ['root']);
  var bottomNavigationClasses$1 = bottomNavigationClasses;

  const _excluded$1J = ["children", "className", "component", "onChange", "showLabels", "value"];

  const useUtilityClasses$1s = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getBottomNavigationUtilityClass, classes);
  };

  const BottomNavigationRoot = styled$1('div', {
    name: 'MuiBottomNavigation',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => ({
    display: 'flex',
    justifyContent: 'center',
    height: 56,
    backgroundColor: theme.palette.background.paper
  }));
  const BottomNavigation = /*#__PURE__*/React__namespace.forwardRef(function BottomNavigation(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiBottomNavigation'
    });

    const {
      children,
      className,
      component = 'div',
      onChange,
      showLabels = false,
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1J);

    const ownerState = _extends({}, props, {
      component,
      showLabels
    });

    const classes = useUtilityClasses$1s(ownerState);
    return /*#__PURE__*/jsxRuntime_1(BottomNavigationRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: React__namespace.Children.map(children, (child, childIndex) => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        {
          if (reactIs_2(child)) {
            console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        const childValue = child.props.value === undefined ? childIndex : child.props.value;
        return /*#__PURE__*/React__namespace.cloneElement(child, {
          selected: childValue === value,
          showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
          value: childValue,
          onChange
        });
      })
    }));
  });
  BottomNavigation.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child.
     */
    onChange: propTypes.func,

    /**
     * If `true`, all `BottomNavigationAction`s will show their labels.
     * By default, only the selected `BottomNavigationAction` will show its label.
     * @default false
     */
    showLabels: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the currently selected `BottomNavigationAction`.
     */
    value: propTypes.any
  } ;
  var BottomNavigation$1 = BottomNavigation;

  function getBottomNavigationActionUtilityClass(slot) {
    return generateUtilityClass('MuiBottomNavigationAction', slot);
  }
  const bottomNavigationActionClasses = generateUtilityClasses('MuiBottomNavigationAction', ['root', 'iconOnly', 'selected', 'label']);
  var bottomNavigationActionClasses$1 = bottomNavigationActionClasses;

  const _excluded$1I = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"];

  const useUtilityClasses$1r = ownerState => {
    const {
      classes,
      showLabel,
      selected
    } = ownerState;
    const slots = {
      root: ['root', !showLabel && !selected && 'iconOnly', selected && 'selected'],
      label: ['label', !showLabel && !selected && 'iconOnly', selected && 'selected']
    };
    return composeClasses(slots, getBottomNavigationActionUtilityClass, classes);
  };

  const BottomNavigationActionRoot = styled$1(ButtonBase$1, {
    name: 'MuiBottomNavigationAction',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.showLabel && !ownerState.selected && styles.iconOnly];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    transition: theme.transitions.create(['color', 'padding-top'], {
      duration: theme.transitions.duration.short
    }),
    padding: '6px 12px 8px',
    minWidth: 80,
    maxWidth: 168,
    color: theme.palette.text.secondary,
    flexDirection: 'column',
    flex: '1'
  }, !ownerState.showLabel && !ownerState.selected && {
    paddingTop: 16
  }, {
    [`&.${bottomNavigationActionClasses$1.selected}`]: {
      paddingTop: 6,
      color: theme.palette.primary.main
    }
  }));
  const BottomNavigationActionLabel = styled$1('span', {
    name: 'MuiBottomNavigationAction',
    slot: 'Label',
    overridesResolver: (props, styles) => styles.label
  })(({
    theme,
    ownerState
  }) => _extends({
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(12),
    opacity: 1,
    transition: 'font-size 0.2s, opacity 0.2s',
    transitionDelay: '0.1s'
  }, !ownerState.showLabel && !ownerState.selected && {
    opacity: 0,
    transitionDelay: '0s'
  }, {
    [`&.${bottomNavigationActionClasses$1.selected}`]: {
      fontSize: theme.typography.pxToRem(14)
    }
  }));
  const BottomNavigationAction = /*#__PURE__*/React__namespace.forwardRef(function BottomNavigationAction(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiBottomNavigationAction'
    });

    const {
      className,
      icon,
      label,
      onChange,
      onClick,
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1I);

    const ownerState = props;
    const classes = useUtilityClasses$1r(ownerState);

    const handleChange = event => {
      if (onChange) {
        onChange(event, value);
      }

      if (onClick) {
        onClick(event);
      }
    };

    return /*#__PURE__*/jsxRuntime_2(BottomNavigationActionRoot, _extends({
      ref: ref,
      className: clsx(classes.root, className),
      focusRipple: true,
      onClick: handleChange,
      ownerState: ownerState
    }, other, {
      children: [icon, /*#__PURE__*/jsxRuntime_1(BottomNavigationActionLabel, {
        className: classes.label,
        ownerState: ownerState,
        children: label
      })]
    }));
  });
  BottomNavigationAction.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The icon to display.
     */
    icon: propTypes.node,

    /**
     * The label element.
     */
    label: propTypes.node,

    /**
     * @ignore
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * If `true`, the `BottomNavigationAction` will show its label.
     * By default, only the selected `BottomNavigationAction`
     * inside `BottomNavigation` will show its label.
     *
     * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
     */
    showLabel: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: propTypes.any
  } ;
  var BottomNavigationAction$1 = BottomNavigationAction;

  const defaultTheme = createTheme();
  /**
   * @ignore - do not document.
   */

  const Box = createBox({
    defaultTheme,
    defaultClassName: 'MuiBox-root',
    generateClassName: ClassNameGenerator$1.generate
  });
  var Box$1 = Box;

  var MoreHorizIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), 'MoreHoriz');

  const BreadcrumbCollapsedButton = styled$1(ButtonBase$1, {
    skipSx: true
  })(({
    theme
  }) => _extends({
    display: 'flex',
    marginLeft: theme.spacing(0.5),
    marginRight: theme.spacing(0.5)
  }, theme.palette.mode === 'light' ? {
    backgroundColor: theme.palette.grey[100],
    color: theme.palette.grey[700]
  } : {
    backgroundColor: theme.palette.grey[700],
    color: theme.palette.grey[100]
  }, {
    borderRadius: 2,
    '&:hover, &:focus': _extends({}, theme.palette.mode === 'light' ? {
      backgroundColor: theme.palette.grey[200]
    } : {
      backgroundColor: theme.palette.grey[600]
    }),
    '&:active': _extends({
      boxShadow: theme.shadows[0]
    }, theme.palette.mode === 'light' ? {
      backgroundColor: emphasize(theme.palette.grey[200], 0.12)
    } : {
      backgroundColor: emphasize(theme.palette.grey[600], 0.12)
    })
  }));
  const BreadcrumbCollapsedIcon = styled$1(MoreHorizIcon)({
    width: 24,
    height: 16
  });
  /**
   * @ignore - internal component.
   */

  function BreadcrumbCollapsed(props) {
    const ownerState = props;
    return /*#__PURE__*/jsxRuntime_1("li", {
      children: /*#__PURE__*/jsxRuntime_1(BreadcrumbCollapsedButton, _extends({
        focusRipple: true
      }, props, {
        ownerState: ownerState,
        children: /*#__PURE__*/jsxRuntime_1(BreadcrumbCollapsedIcon, {
          ownerState: ownerState
        })
      }))
    });
  }

  BreadcrumbCollapsed.propTypes = {
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.object
  } ;

  function getBreadcrumbsUtilityClass(slot) {
    return generateUtilityClass('MuiBreadcrumbs', slot);
  }
  const breadcrumbsClasses = generateUtilityClasses('MuiBreadcrumbs', ['root', 'ol', 'li', 'separator']);
  var breadcrumbsClasses$1 = breadcrumbsClasses;

  const _excluded$1H = ["children", "className", "component", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"];

  const useUtilityClasses$1q = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      li: ['li'],
      ol: ['ol'],
      separator: ['separator']
    };
    return composeClasses(slots, getBreadcrumbsUtilityClass, classes);
  };

  const BreadcrumbsRoot = styled$1(Typography$1, {
    name: 'MuiBreadcrumbs',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      return [{
        [`& .${breadcrumbsClasses$1.li}`]: styles.li
      }, styles.root];
    }
  })({});
  const BreadcrumbsOl = styled$1('ol', {
    name: 'MuiBreadcrumbs',
    slot: 'Ol',
    overridesResolver: (props, styles) => styles.ol
  })({
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    padding: 0,
    margin: 0,
    listStyle: 'none'
  });
  const BreadcrumbsSeparator = styled$1('li', {
    name: 'MuiBreadcrumbs',
    slot: 'Separator',
    overridesResolver: (props, styles) => styles.separator
  })({
    display: 'flex',
    userSelect: 'none',
    marginLeft: 8,
    marginRight: 8
  });

  function insertSeparators(items, className, separator, ownerState) {
    return items.reduce((acc, current, index) => {
      if (index < items.length - 1) {
        acc = acc.concat(current, /*#__PURE__*/jsxRuntime_1(BreadcrumbsSeparator, {
          "aria-hidden": true,
          className: className,
          ownerState: ownerState,
          children: separator
        }, `separator-${index}`));
      } else {
        acc.push(current);
      }

      return acc;
    }, []);
  }

  const Breadcrumbs = /*#__PURE__*/React__namespace.forwardRef(function Breadcrumbs(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiBreadcrumbs'
    });

    const {
      children,
      className,
      component = 'nav',
      expandText = 'Show path',
      itemsAfterCollapse = 1,
      itemsBeforeCollapse = 1,
      maxItems = 8,
      separator = '/'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1H);

    const [expanded, setExpanded] = React__namespace.useState(false);

    const ownerState = _extends({}, props, {
      component,
      expanded,
      expandText,
      itemsAfterCollapse,
      itemsBeforeCollapse,
      maxItems,
      separator
    });

    const classes = useUtilityClasses$1q(ownerState);
    const listRef = React__namespace.useRef(null);

    const renderItemsBeforeAndAfter = allItems => {
      const handleClickExpand = () => {
        setExpanded(true); // The clicked element received the focus but gets removed from the DOM.
        // Let's keep the focus in the component after expanding.
        // Moving it to the <ol> or <nav> does not cause any announcement in NVDA.
        // By moving it to some link/button at least we have some announcement.

        const focusable = listRef.current.querySelector('a[href],button,[tabindex]');

        if (focusable) {
          focusable.focus();
        }
      }; // This defends against someone passing weird input, to ensure that if all
      // items would be shown anyway, we just show all items without the EllipsisItem


      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
        {
          console.error(['MUI: You have provided an invalid combination of props to the Breadcrumbs.', `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join('\n'));
        }

        return allItems;
      }

      return [...allItems.slice(0, itemsBeforeCollapse), /*#__PURE__*/jsxRuntime_1(BreadcrumbCollapsed, {
        "aria-label": expandText,
        onClick: handleClickExpand
      }, "ellipsis"), ...allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)];
    };

    const allItems = React__namespace.Children.toArray(children).filter(child => {
      {
        if (reactIs_2(child)) {
          console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      return /*#__PURE__*/React__namespace.isValidElement(child);
    }).map((child, index) => /*#__PURE__*/jsxRuntime_1("li", {
      className: classes.li,
      children: child
    }, `child-${index}`));
    return /*#__PURE__*/jsxRuntime_1(BreadcrumbsRoot, _extends({
      ref: ref,
      component: component,
      color: "text.secondary",
      className: clsx(classes.root, className),
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(BreadcrumbsOl, {
        className: classes.ol,
        ref: listRef,
        ownerState: ownerState,
        children: insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator, ownerState)
      })
    }));
  });
  Breadcrumbs.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Override the default label for the expand button.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Show path'
     */
    expandText: propTypes.string,

    /**
     * If max items is exceeded, the number of items to show after the ellipsis.
     * @default 1
     */
    itemsAfterCollapse: integerPropType,

    /**
     * If max items is exceeded, the number of items to show before the ellipsis.
     * @default 1
     */
    itemsBeforeCollapse: integerPropType,

    /**
     * Specifies the maximum number of breadcrumbs to display. When there are more
     * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
     * will be shown, with an ellipsis in between.
     * @default 8
     */
    maxItems: integerPropType,

    /**
     * Custom separator node.
     * @default '/'
     */
    separator: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Breadcrumbs$1 = Breadcrumbs;

  function getButtonUtilityClass(slot) {
    return generateUtilityClass('MuiButton', slot);
  }
  const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
  var buttonClasses$1 = buttonClasses;

  /**
   * @ignore - internal component.
   */
  const ButtonGroupContext = /*#__PURE__*/React__namespace.createContext({});

  {
    ButtonGroupContext.displayName = 'ButtonGroupContext';
  }

  var ButtonGroupContext$1 = ButtonGroupContext;

  const _excluded$1G = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];

  const useUtilityClasses$1p = ownerState => {
    const {
      color,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
      label: ['label'],
      startIcon: ['startIcon', `iconSize${capitalize(size)}`],
      endIcon: ['endIcon', `iconSize${capitalize(size)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {
    '& > *:nth-of-type(1)': {
      fontSize: 18
    }
  }, ownerState.size === 'medium' && {
    '& > *:nth-of-type(1)': {
      fontSize: 20
    }
  }, ownerState.size === 'large' && {
    '& > *:nth-of-type(1)': {
      fontSize: 22
    }
  });

  const ButtonRoot = styled$1(ButtonBase$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiButton',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.button, {
    minWidth: 64,
    padding: '6px 16px',
    borderRadius: theme.shape.borderRadius,
    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
      duration: theme.transitions.duration.short
    }),
    '&:hover': _extends({
      textDecoration: 'none',
      backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
      border: `1px solid ${theme.palette[ownerState.color].main}`,
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }, ownerState.variant === 'contained' && {
      backgroundColor: theme.palette.grey.A100,
      boxShadow: theme.shadows[4],
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        boxShadow: theme.shadows[2],
        backgroundColor: theme.palette.grey[300]
      }
    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
      backgroundColor: theme.palette[ownerState.color].dark,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: theme.palette[ownerState.color].main
      }
    }),
    '&:active': _extends({}, ownerState.variant === 'contained' && {
      boxShadow: theme.shadows[8]
    }),
    [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {
      boxShadow: theme.shadows[6]
    }),
    [`&.${buttonClasses$1.disabled}`]: _extends({
      color: theme.palette.action.disabled
    }, ownerState.variant === 'outlined' && {
      border: `1px solid ${theme.palette.action.disabledBackground}`
    }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
      border: `1px solid ${theme.palette.action.disabled}`
    }, ownerState.variant === 'contained' && {
      color: theme.palette.action.disabled,
      boxShadow: theme.shadows[0],
      backgroundColor: theme.palette.action.disabledBackground
    })
  }, ownerState.variant === 'text' && {
    padding: '6px 8px'
  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
    color: theme.palette[ownerState.color].main
  }, ownerState.variant === 'outlined' && {
    padding: '5px 15px',
    border: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
    color: theme.palette[ownerState.color].main,
    border: `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
  }, ownerState.variant === 'contained' && {
    color: theme.palette.getContrastText(theme.palette.grey[300]),
    backgroundColor: theme.palette.grey[300],
    boxShadow: theme.shadows[2]
  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
    color: theme.palette[ownerState.color].contrastText,
    backgroundColor: theme.palette[ownerState.color].main
  }, ownerState.color === 'inherit' && {
    color: 'inherit',
    borderColor: 'currentColor'
  }, ownerState.size === 'small' && ownerState.variant === 'text' && {
    padding: '4px 5px',
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && ownerState.variant === 'text' && {
    padding: '8px 11px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
    padding: '3px 9px',
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
    padding: '7px 21px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
    padding: '4px 10px',
    fontSize: theme.typography.pxToRem(13)
  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
    padding: '8px 22px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.fullWidth && {
    width: '100%'
  }), ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: 'none',
    '&:hover': {
      boxShadow: 'none'
    },
    [`&.${buttonClasses$1.focusVisible}`]: {
      boxShadow: 'none'
    },
    '&:active': {
      boxShadow: 'none'
    },
    [`&.${buttonClasses$1.disabled}`]: {
      boxShadow: 'none'
    }
  });
  const ButtonStartIcon = styled$1('span', {
    name: 'MuiButton',
    slot: 'StartIcon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'inherit',
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === 'small' && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  const ButtonEndIcon = styled$1('span', {
    name: 'MuiButton',
    slot: 'EndIcon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'inherit',
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === 'small' && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  const Button = /*#__PURE__*/React__namespace.forwardRef(function Button(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiButton'
    });
    const {
      className: classNameContext,
      color: colorContext,
      disabled: disabledContext,
      disableElevation: disableElevationContext,
      disableFocusRipple: disableFocusRippleContext,
      disableRipple: disableRippleContext,
      fullWidth: fullWidthContext,
      size: sizeContext,
      variant: variantContext
    } = React__namespace.useContext(ButtonGroupContext$1);

    const {
      children,
      className,
      color: colorProp,
      component = 'button',
      disabled: disabledProp,
      disableElevation: disableElevationProp,
      disableFocusRipple: disableFocusRippleProp,
      disableRipple: disableRippleProp,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth: fullWidthProp,
      size: sizeProp,
      startIcon: startIconProp,
      type,
      variant: variantProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1G);

    const color = colorProp || colorContext || 'primary'; // TODO v6: Use nullish coalescing (??) instead of OR operator for these boolean props so that these boolean props for Button with ButtonGroup context take priority. See conversation from https://github.com/mui-org/material-ui/pull/28645#discussion_r738380902.

    const disabled = disabledProp || disabledContext || false;
    const disableElevation = disableElevationProp || disableElevationContext || false;
    const disableFocusRipple = disableFocusRippleProp || disableFocusRippleContext || false;
    const fullWidth = fullWidthProp || fullWidthContext || false;
    const size = sizeProp || sizeContext || 'medium';
    const variant = variantProp || variantContext || 'text';
    const disableRipple = disableRippleProp || disableRippleContext || false;

    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });

    const classes = useUtilityClasses$1p(ownerState);

    const startIcon = startIconProp && /*#__PURE__*/jsxRuntime_1(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState: ownerState,
      children: startIconProp
    });

    const endIcon = endIconProp && /*#__PURE__*/jsxRuntime_1(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState: ownerState,
      children: endIconProp
    });

    return /*#__PURE__*/jsxRuntime_2(ButtonRoot, _extends({
      ownerState: ownerState,
      className: clsx(className, classNameContext),
      component: component,
      disabled: disabled,
      disableRipple: disableRipple,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      ref: ref,
      type: type
    }, other, {
      classes: classes,
      children: [startIcon, children, endIcon]
    }));
  });
  Button.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: propTypes.bool,

    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: propTypes.bool,

    /**
     * Element placed after the children.
     */
    endIcon: propTypes.node,

    /**
     * @ignore
     */
    focusVisibleClassName: propTypes.string,

    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: propTypes.string,

    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * Element placed before the children.
     */
    startIcon: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * @ignore
     */
    type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string]),

    /**
     * The variant to use.
     * @default 'text'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['contained', 'outlined', 'text']), propTypes.string])
  } ;
  var Button$1 = Button;

  function getButtonGroupUtilityClass(slot) {
    return generateUtilityClass('MuiButtonGroup', slot);
  }
  const buttonGroupClasses = generateUtilityClasses('MuiButtonGroup', ['root', 'contained', 'outlined', 'text', 'disableElevation', 'disabled', 'fullWidth', 'vertical', 'grouped', 'groupedHorizontal', 'groupedVertical', 'groupedText', 'groupedTextHorizontal', 'groupedTextVertical', 'groupedTextPrimary', 'groupedTextSecondary', 'groupedOutlined', 'groupedOutlinedHorizontal', 'groupedOutlinedVertical', 'groupedOutlinedPrimary', 'groupedOutlinedSecondary', 'groupedContained', 'groupedContainedHorizontal', 'groupedContainedVertical', 'groupedContainedPrimary', 'groupedContainedSecondary']);
  var buttonGroupClasses$1 = buttonGroupClasses;

  const _excluded$1F = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];

  const overridesResolver$6 = (props, styles) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${buttonGroupClasses$1.grouped}`]: styles.grouped
    }, {
      [`& .${buttonGroupClasses$1.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses$1.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}`]
    }, {
      [`& .${buttonGroupClasses$1.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses$1.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.color)}`]
    }, styles.root, styles[ownerState.variant], ownerState.disableElevation === true && styles.disableElevation, ownerState.fullWidth && styles.fullWidth, ownerState.orientation === 'vertical' && styles.vertical];
  };

  const useUtilityClasses$1o = ownerState => {
    const {
      classes,
      color,
      disabled,
      disableElevation,
      fullWidth,
      orientation,
      variant
    } = ownerState;
    const slots = {
      root: ['root', variant, orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth', disableElevation && 'disableElevation'],
      grouped: ['grouped', `grouped${capitalize(orientation)}`, `grouped${capitalize(variant)}`, `grouped${capitalize(variant)}${capitalize(orientation)}`, `grouped${capitalize(variant)}${capitalize(color)}`, disabled && 'disabled']
    };
    return composeClasses(slots, getButtonGroupUtilityClass, classes);
  };

  const ButtonGroupRoot = styled$1('div', {
    name: 'MuiButtonGroup',
    slot: 'Root',
    overridesResolver: overridesResolver$6
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'inline-flex',
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === 'contained' && {
    boxShadow: theme.shadows[2]
  }, ownerState.disableElevation && {
    boxShadow: 'none'
  }, ownerState.fullWidth && {
    width: '100%'
  }, ownerState.orientation === 'vertical' && {
    flexDirection: 'column'
  }, {
    [`& .${buttonGroupClasses$1.grouped}`]: _extends({
      minWidth: 40,
      '&:not(:first-of-type)': _extends({}, ownerState.orientation === 'horizontal' && {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      }, ownerState.orientation === 'vertical' && {
        borderTopRightRadius: 0,
        borderTopLeftRadius: 0
      }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
        marginLeft: -1
      }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
        marginTop: -1
      }),
      '&:not(:last-of-type)': _extends({}, ownerState.orientation === 'horizontal' && {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      }, ownerState.orientation === 'vertical' && {
        borderBottomRightRadius: 0,
        borderBottomLeftRadius: 0
      }, ownerState.variant === 'text' && ownerState.orientation === 'horizontal' && {
        borderRight: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
      }, ownerState.variant === 'text' && ownerState.orientation === 'vertical' && {
        borderBottom: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`
      }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
        borderColor: alpha(theme.palette[ownerState.color].main, 0.5)
      }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
        borderRightColor: 'transparent'
      }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
        borderBottomColor: 'transparent'
      }, ownerState.variant === 'contained' && ownerState.orientation === 'horizontal' && {
        borderRight: `1px solid ${theme.palette.grey[400]}`,
        [`&.${buttonGroupClasses$1.disabled}`]: {
          borderRight: `1px solid ${theme.palette.action.disabled}`
        }
      }, ownerState.variant === 'contained' && ownerState.orientation === 'vertical' && {
        borderBottom: `1px solid ${theme.palette.grey[400]}`,
        [`&.${buttonGroupClasses$1.disabled}`]: {
          borderBottom: `1px solid ${theme.palette.action.disabled}`
        }
      }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
        borderColor: theme.palette[ownerState.color].dark
      }, {
        '&:hover': _extends({}, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {
          borderRightColor: 'currentColor'
        }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {
          borderBottomColor: 'currentColor'
        })
      }),
      '&:hover': _extends({}, ownerState.variant === 'contained' && {
        boxShadow: 'none'
      })
    }, ownerState.variant === 'contained' && {
      boxShadow: 'none'
    })
  }));
  const ButtonGroup = /*#__PURE__*/React__namespace.forwardRef(function ButtonGroup(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiButtonGroup'
    });

    const {
      children,
      className,
      color = 'primary',
      component = 'div',
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      disableRipple = false,
      fullWidth = false,
      orientation = 'horizontal',
      size = 'medium',
      variant = 'outlined'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1F);

    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      orientation,
      size,
      variant
    });

    const classes = useUtilityClasses$1o(ownerState);
    const context = React__namespace.useMemo(() => ({
      className: classes.grouped,
      color,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      size,
      variant
    }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);
    return /*#__PURE__*/jsxRuntime_1(ButtonGroupRoot, _extends({
      as: component,
      role: "group",
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(ButtonGroupContext$1.Provider, {
        value: context,
        children: children
      })
    }));
  });
  ButtonGroup.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: propTypes.bool,

    /**
     * If `true`, the button keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If `true`, the button ripple effect is disabled.
     * @default false
     */
    disableRipple: propTypes.bool,

    /**
     * If `true`, the buttons will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['contained', 'outlined', 'text']), propTypes.string])
  } ;
  var ButtonGroup$1 = ButtonGroup;

  function getCardUtilityClass(slot) {
    return generateUtilityClass('MuiCard', slot);
  }
  const cardClasses = generateUtilityClasses('MuiCard', ['root']);
  var cardClasses$1 = cardClasses;

  const _excluded$1E = ["className", "raised"];

  const useUtilityClasses$1n = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getCardUtilityClass, classes);
  };

  const CardRoot = styled$1(Paper$1, {
    name: 'MuiCard',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(() => {
    return {
      overflow: 'hidden'
    };
  });
  const Card = /*#__PURE__*/React__namespace.forwardRef(function Card(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCard'
    });

    const {
      className,
      raised = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1E);

    const ownerState = _extends({}, props, {
      raised
    });

    const classes = useUtilityClasses$1n(ownerState);
    return /*#__PURE__*/jsxRuntime_1(CardRoot, _extends({
      className: clsx(classes.root, className),
      elevation: raised ? 8 : undefined,
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  Card.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the card will use raised styling.
     * @default false
     */
    raised: chainPropTypes(propTypes.bool, props => {
      if (props.raised && props.variant === 'outlined') {
        return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
      }

      return null;
    }),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Card$1 = Card;

  function getCardActionAreaUtilityClass(slot) {
    return generateUtilityClass('MuiCardActionArea', slot);
  }
  const cardActionAreaClasses = generateUtilityClasses('MuiCardActionArea', ['root', 'focusVisible', 'focusHighlight']);
  var cardActionAreaClasses$1 = cardActionAreaClasses;

  const _excluded$1D = ["children", "className", "focusVisibleClassName"];

  const useUtilityClasses$1m = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      focusHighlight: ['focusHighlight']
    };
    return composeClasses(slots, getCardActionAreaUtilityClass, classes);
  };

  const CardActionAreaRoot = styled$1(ButtonBase$1, {
    name: 'MuiCardActionArea',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => ({
    display: 'block',
    textAlign: 'inherit',
    width: '100%',
    [`&:hover .${cardActionAreaClasses$1.focusHighlight}`]: {
      opacity: theme.palette.action.hoverOpacity,
      '@media (hover: none)': {
        opacity: 0
      }
    },
    [`&.${cardActionAreaClasses$1.focusVisible} .${cardActionAreaClasses$1.focusHighlight}`]: {
      opacity: theme.palette.action.focusOpacity
    }
  }));
  const CardActionAreaFocusHighlight = styled$1('span', {
    name: 'MuiCardActionArea',
    slot: 'FocusHighlight',
    overridesResolver: (props, styles) => styles.focusHighlight
  })(({
    theme
  }) => ({
    overflow: 'hidden',
    pointerEvents: 'none',
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: 'inherit',
    opacity: 0,
    backgroundColor: 'currentcolor',
    transition: theme.transitions.create('opacity', {
      duration: theme.transitions.duration.short
    })
  }));
  const CardActionArea = /*#__PURE__*/React__namespace.forwardRef(function CardActionArea(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCardActionArea'
    });

    const {
      children,
      className,
      focusVisibleClassName
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1D);

    const ownerState = props;
    const classes = useUtilityClasses$1m(ownerState);
    return /*#__PURE__*/jsxRuntime_2(CardActionAreaRoot, _extends({
      className: clsx(classes.root, className),
      focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [children, /*#__PURE__*/jsxRuntime_1(CardActionAreaFocusHighlight, {
        className: classes.focusHighlight,
        ownerState: ownerState
      })]
    }));
  });
  CardActionArea.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * @ignore
     */
    focusVisibleClassName: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var CardActionArea$1 = CardActionArea;

  function getCardActionsUtilityClass(slot) {
    return generateUtilityClass('MuiCardActions', slot);
  }
  const cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);
  var cardActionsClasses$1 = cardActionsClasses;

  const _excluded$1C = ["disableSpacing", "className"];

  const useUtilityClasses$1l = ownerState => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ['root', !disableSpacing && 'spacing']
    };
    return composeClasses(slots, getCardActionsUtilityClass, classes);
  };

  const CardActionsRoot = styled$1('div', {
    name: 'MuiCardActions',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.disableSpacing && styles.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex',
    alignItems: 'center',
    padding: 8
  }, !ownerState.disableSpacing && {
    '& > :not(:first-of-type)': {
      marginLeft: 8
    }
  }));
  const CardActions = /*#__PURE__*/React__namespace.forwardRef(function CardActions(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCardActions'
    });

    const {
      disableSpacing = false,
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1C);

    const ownerState = _extends({}, props, {
      disableSpacing
    });

    const classes = useUtilityClasses$1l(ownerState);
    return /*#__PURE__*/jsxRuntime_1(CardActionsRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  CardActions.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var CardActions$1 = CardActions;

  function getCardContentUtilityClass(slot) {
    return generateUtilityClass('MuiCardContent', slot);
  }
  const cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);
  var cardContentClasses$1 = cardContentClasses;

  const _excluded$1B = ["className", "component"];

  const useUtilityClasses$1k = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getCardContentUtilityClass, classes);
  };

  const CardContentRoot = styled$1('div', {
    name: 'MuiCardContent',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(() => {
    return {
      padding: 16,
      '&:last-child': {
        paddingBottom: 24
      }
    };
  });
  const CardContent = /*#__PURE__*/React__namespace.forwardRef(function CardContent(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCardContent'
    });

    const {
      className,
      component = 'div'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1B);

    const ownerState = _extends({}, props, {
      component
    });

    const classes = useUtilityClasses$1k(ownerState);
    return /*#__PURE__*/jsxRuntime_1(CardContentRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  CardContent.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var CardContent$1 = CardContent;

  function getCardHeaderUtilityClass(slot) {
    return generateUtilityClass('MuiCardHeader', slot);
  }
  const cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);
  var cardHeaderClasses$1 = cardHeaderClasses;

  const _excluded$1A = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];

  const useUtilityClasses$1j = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      avatar: ['avatar'],
      action: ['action'],
      content: ['content'],
      title: ['title'],
      subheader: ['subheader']
    };
    return composeClasses(slots, getCardHeaderUtilityClass, classes);
  };

  const CardHeaderRoot = styled$1('div', {
    name: 'MuiCardHeader',
    slot: 'Root',
    overridesResolver: (props, styles) => _extends({
      [`& .${cardHeaderClasses$1.title}`]: styles.title,
      [`& .${cardHeaderClasses$1.subheader}`]: styles.subheader
    }, styles.root)
  })({
    display: 'flex',
    alignItems: 'center',
    padding: 16
  });
  const CardHeaderAvatar = styled$1('div', {
    name: 'MuiCardHeader',
    slot: 'Avatar',
    overridesResolver: (props, styles) => styles.avatar
  })({
    display: 'flex',
    flex: '0 0 auto',
    marginRight: 16
  });
  const CardHeaderAction = styled$1('div', {
    name: 'MuiCardHeader',
    slot: 'Action',
    overridesResolver: (props, styles) => styles.action
  })({
    flex: '0 0 auto',
    alignSelf: 'flex-start',
    marginTop: -4,
    marginRight: -8,
    marginBottom: -4
  });
  const CardHeaderContent = styled$1('div', {
    name: 'MuiCardHeader',
    slot: 'Content',
    overridesResolver: (props, styles) => styles.content
  })({
    flex: '1 1 auto'
  });
  const CardHeader = /*#__PURE__*/React__namespace.forwardRef(function CardHeader(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCardHeader'
    });

    const {
      action,
      avatar,
      className,
      component = 'div',
      disableTypography = false,
      subheader: subheaderProp,
      subheaderTypographyProps,
      title: titleProp,
      titleTypographyProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1A);

    const ownerState = _extends({}, props, {
      component,
      disableTypography
    });

    const classes = useUtilityClasses$1j(ownerState);
    let title = titleProp;

    if (title != null && title.type !== Typography$1 && !disableTypography) {
      title = /*#__PURE__*/jsxRuntime_1(Typography$1, _extends({
        variant: avatar ? 'body2' : 'h5',
        className: classes.title,
        component: "span",
        display: "block"
      }, titleTypographyProps, {
        children: title
      }));
    }

    let subheader = subheaderProp;

    if (subheader != null && subheader.type !== Typography$1 && !disableTypography) {
      subheader = /*#__PURE__*/jsxRuntime_1(Typography$1, _extends({
        variant: avatar ? 'body2' : 'body1',
        className: classes.subheader,
        color: "text.secondary",
        component: "span",
        display: "block"
      }, subheaderTypographyProps, {
        children: subheader
      }));
    }

    return /*#__PURE__*/jsxRuntime_2(CardHeaderRoot, _extends({
      className: clsx(classes.root, className),
      as: component,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [avatar && /*#__PURE__*/jsxRuntime_1(CardHeaderAvatar, {
        className: classes.avatar,
        ownerState: ownerState,
        children: avatar
      }), /*#__PURE__*/jsxRuntime_2(CardHeaderContent, {
        className: classes.content,
        ownerState: ownerState,
        children: [title, subheader]
      }), action && /*#__PURE__*/jsxRuntime_1(CardHeaderAction, {
        className: classes.action,
        ownerState: ownerState,
        children: action
      })]
    }));
  });
  CardHeader.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The action to display in the card header.
     */
    action: propTypes.node,

    /**
     * The Avatar element to display.
     */
    avatar: propTypes.node,

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes
    /* @typescript-to-proptypes-ignore */
    .elementType,

    /**
     * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `title` text, and optional `subheader` text
     * with the Typography component.
     * @default false
     */
    disableTypography: propTypes.bool,

    /**
     * The content of the component.
     */
    subheader: propTypes.node,

    /**
     * These props will be forwarded to the subheader
     * (as long as disableTypography is not `true`).
     */
    subheaderTypographyProps: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The content of the component.
     */
    title: propTypes.node,

    /**
     * These props will be forwarded to the title
     * (as long as disableTypography is not `true`).
     */
    titleTypographyProps: propTypes.object
  } ;
  var CardHeader$1 = CardHeader;

  function getCardMediaUtilityClass(slot) {
    return generateUtilityClass('MuiCardMedia', slot);
  }
  const cardMediaClasses = generateUtilityClasses('MuiCardMedia', ['root', 'media', 'img']);
  var cardMediaClasses$1 = cardMediaClasses;

  const _excluded$1z = ["children", "className", "component", "image", "src", "style"];

  const useUtilityClasses$1i = ownerState => {
    const {
      classes,
      isMediaComponent,
      isImageComponent
    } = ownerState;
    const slots = {
      root: ['root', isMediaComponent && 'media', isImageComponent && 'img']
    };
    return composeClasses(slots, getCardMediaUtilityClass, classes);
  };

  const CardMediaRoot = styled$1('div', {
    name: 'MuiCardMedia',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      const {
        isMediaComponent,
        isImageComponent
      } = ownerState;
      return [styles.root, isMediaComponent && styles.media, isImageComponent && styles.img];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'block',
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'center'
  }, ownerState.isMediaComponent && {
    width: '100%'
  }, ownerState.isImageComponent && {
    // ⚠️ object-fit is not supported by IE11.
    objectFit: 'cover'
  }));
  const MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];
  const IMAGE_COMPONENTS = ['picture', 'img'];
  const CardMedia = /*#__PURE__*/React__namespace.forwardRef(function CardMedia(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCardMedia'
    });

    const {
      children,
      className,
      component = 'div',
      image,
      src,
      style
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1z);

    const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;
    const composedStyle = !isMediaComponent && image ? _extends({
      backgroundImage: `url("${image}")`
    }, style) : style;

    const ownerState = _extends({}, props, {
      component,
      isMediaComponent,
      isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1
    });

    const classes = useUtilityClasses$1i(ownerState);
    return /*#__PURE__*/jsxRuntime_1(CardMediaRoot, _extends({
      className: clsx(classes.root, className),
      as: component,
      role: !isMediaComponent && image ? 'img' : undefined,
      ref: ref,
      style: composedStyle,
      ownerState: ownerState,
      src: isMediaComponent ? image || src : undefined
    }, other, {
      children: children
    }));
  });
  CardMedia.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: chainPropTypes(propTypes.node, props => {
      if (!props.children && !props.image && !props.src && !props.component) {
        return new Error('MUI: Either `children`, `image`, `src` or `component` prop must be specified.');
      }

      return null;
    }),

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Image to be displayed as a background image.
     * Either `image` or `src` prop must be specified.
     * Note that caller must specify height otherwise the image will not be visible.
     */
    image: propTypes.string,

    /**
     * An alias for `image` property.
     * Available only with media components.
     * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
     */
    src: propTypes.string,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var CardMedia$1 = CardMedia;

  /**
   * @ignore - internal component.
   */

  const FormControlContext = /*#__PURE__*/React__namespace.createContext();

  {
    FormControlContext.displayName = 'FormControlContext';
  }

  var FormControlContext$1 = FormControlContext;

  function useFormControl() {
    return React__namespace.useContext(FormControlContext$1);
  }

  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass('PrivateSwitchBase', slot);
  }
  generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);

  const _excluded$1y = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];

  const useUtilityClasses$1h = ownerState => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],
      input: ['input']
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };

  const SwitchBaseRoot = styled$1(ButtonBase$1, {
    skipSx: true
  })(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: '50%'
  }, ownerState.edge === 'start' && {
    marginLeft: ownerState.size === 'small' ? -3 : -12
  }, ownerState.edge === 'end' && {
    marginRight: ownerState.size === 'small' ? -3 : -12
  }));
  const SwitchBaseInput = styled$1('input', {
    skipSx: true
  })({
    cursor: 'inherit',
    position: 'absolute',
    opacity: 0,
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  /**
   * @ignore - internal component.
   */

  const SwitchBase = /*#__PURE__*/React__namespace.forwardRef(function SwitchBase(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required,
      tabIndex,
      type,
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1y);

    const [checked, setCheckedState] = useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: 'SwitchBase',
      state: 'checked'
    });
    const muiFormControl = useFormControl();

    const handleFocus = event => {
      if (onFocus) {
        onFocus(event);
      }

      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };

    const handleBlur = event => {
      if (onBlur) {
        onBlur(event);
      }

      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };

    const handleInputChange = event => {
      // Workaround for https://github.com/facebook/react/issues/9023
      if (event.nativeEvent.defaultPrevented) {
        return;
      }

      const newChecked = event.target.checked;
      setCheckedState(newChecked);

      if (onChange) {
        // TODO v6: remove the second argument.
        onChange(event, newChecked);
      }
    };

    let disabled = disabledProp;

    if (muiFormControl) {
      if (typeof disabled === 'undefined') {
        disabled = muiFormControl.disabled;
      }
    }

    const hasLabelFor = type === 'checkbox' || type === 'radio';

    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });

    const classes = useUtilityClasses$1h(ownerState);
    return /*#__PURE__*/jsxRuntime_2(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled: disabled,
      tabIndex: null,
      role: undefined,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: [/*#__PURE__*/jsxRuntime_1(SwitchBaseInput, _extends({
        autoFocus: autoFocus,
        checked: checkedProp,
        defaultChecked: defaultChecked,
        className: classes.input,
        disabled: disabled,
        id: hasLabelFor && id,
        name: name,
        onChange: handleInputChange,
        readOnly: readOnly,
        ref: inputRef,
        required: required,
        ownerState: ownerState,
        tabIndex: tabIndex,
        type: type
      }, type === 'checkbox' && value === undefined ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  }); // NB: If changed, please update Checkbox, Switch and Radio
  // so that the API documentation is updated.

  SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: propTypes.bool,

    /**
     * If `true`, the component is checked.
     */
    checked: propTypes.bool,

    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: propTypes.node.isRequired,

    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * @ignore
     */
    defaultChecked: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: propTypes.oneOf(['end', 'start', false]),

    /**
     * The icon to display when the component is unchecked.
     */
    icon: propTypes.node.isRequired,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /*
     * @ignore
     */
    name: propTypes.string,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: propTypes.bool,

    /**
     * If `true`, the `input` element is required.
     */
    required: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.object,

    /**
     * @ignore
     */
    tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * The input component prop `type`.
     */
    type: propTypes.string.isRequired,

    /**
     * The value of the component.
     */
    value: propTypes.any
  } ;
  var SwitchBase$1 = SwitchBase;

  var CheckBoxOutlineBlankIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), 'CheckBoxOutlineBlank');

  var CheckBoxIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), 'CheckBox');

  var IndeterminateCheckBoxIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), 'IndeterminateCheckBox');

  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass('MuiCheckbox', slot);
  }
  const checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);
  var checkboxClasses$1 = checkboxClasses;

  const _excluded$1x = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"];

  const useUtilityClasses$1g = ownerState => {
    const {
      classes,
      indeterminate,
      color
    } = ownerState;
    const slots = {
      root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const CheckboxRoot = styled$1(SwitchBase$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiCheckbox',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, !ownerState.disableRipple && {
    '&:hover': {
      backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }
  }, ownerState.color !== 'default' && {
    [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
      color: theme.palette[ownerState.color].main
    },
    [`&.${checkboxClasses$1.disabled}`]: {
      color: theme.palette.action.disabled
    }
  }));

  const defaultCheckedIcon$1 = /*#__PURE__*/jsxRuntime_1(CheckBoxIcon, {});

  const defaultIcon$2 = /*#__PURE__*/jsxRuntime_1(CheckBoxOutlineBlankIcon, {});

  const defaultIndeterminateIcon = /*#__PURE__*/jsxRuntime_1(IndeterminateCheckBoxIcon, {});

  const Checkbox = /*#__PURE__*/React__namespace.forwardRef(function Checkbox(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;

    const props = useThemeProps({
      props: inProps,
      name: 'MuiCheckbox'
    });

    const {
      checkedIcon = defaultCheckedIcon$1,
      color = 'primary',
      icon: iconProp = defaultIcon$2,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = 'medium'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1x);

    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;

    const ownerState = _extends({}, props, {
      color,
      indeterminate,
      size
    });

    const classes = useUtilityClasses$1g(ownerState);
    return /*#__PURE__*/jsxRuntime_1(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        'data-indeterminate': indeterminate
      }, inputProps),
      icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /*#__PURE__*/React__namespace.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState: ownerState,
      ref: ref
    }, other, {
      classes: classes
    }));
  });
  Checkbox.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the component is checked.
     */
    checked: propTypes.bool,

    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     */
    disableRipple: propTypes.bool,

    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: propTypes.node,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: propTypes.bool,

    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: propTypes.node,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: propTypes.func,

    /**
     * If `true`, the `input` element is required.
     */
    required: propTypes.bool,

    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: propTypes.any
  } ;
  var Checkbox$1 = Checkbox;

  function getCircularProgressUtilityClass(slot) {
    return generateUtilityClass('MuiCircularProgress', slot);
  }
  const circularProgressClasses = generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);
  var circularProgressClasses$1 = circularProgressClasses;

  const _excluded$1w = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];

  let _$2 = t => t,
      _t$2,
      _t2$2,
      _t3$2,
      _t4$2;
  const SIZE = 44;
  const circularRotateKeyframe = keyframes(_t$2 || (_t$2 = _$2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  const circularDashKeyframe = keyframes(_t2$2 || (_t2$2 = _$2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));

  const useUtilityClasses$1f = ownerState => {
    const {
      classes,
      variant,
      color,
      disableShrink
    } = ownerState;
    const slots = {
      root: ['root', variant, `color${capitalize(color)}`],
      svg: ['svg'],
      circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']
    };
    return composeClasses(slots, getCircularProgressUtilityClass, classes);
  };

  const CircularProgressRoot = styled$1('span', {
    name: 'MuiCircularProgress',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: 'inline-block'
  }, ownerState.variant === 'determinate' && {
    transition: theme.transitions.create('transform')
  }, ownerState.color !== 'inherit' && {
    color: theme.palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === 'indeterminate' && css(_t3$2 || (_t3$2 = _$2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  const CircularProgressSVG = styled$1('svg', {
    name: 'MuiCircularProgress',
    slot: 'Svg',
    overridesResolver: (props, styles) => styles.svg
  })({
    display: 'block' // Keeps the progress centered

  });
  const CircularProgressCircle = styled$1('circle', {
    name: 'MuiCircularProgress',
    slot: 'Circle',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: 'currentColor'
  }, ownerState.variant === 'determinate' && {
    transition: theme.transitions.create('stroke-dashoffset')
  }, ownerState.variant === 'indeterminate' && {
    // Some default value that looks fine waiting for the animation to kicks in.
    strokeDasharray: '80px, 200px',
    strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.

  }), ({
    ownerState
  }) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4$2 || (_t4$2 = _$2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  /**
   * ## ARIA
   *
   * If the progress bar is describing the loading progress of a particular region of a page,
   * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
   * attribute to `true` on that region until it has finished loading.
   */

  const CircularProgress = /*#__PURE__*/React__namespace.forwardRef(function CircularProgress(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCircularProgress'
    });

    const {
      className,
      color = 'primary',
      disableShrink = false,
      size = 40,
      style,
      thickness = 3.6,
      value = 0,
      variant = 'indeterminate'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1w);

    const ownerState = _extends({}, props, {
      color,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });

    const classes = useUtilityClasses$1f(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};

    if (variant === 'determinate') {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps['aria-valuenow'] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = 'rotate(-90deg)';
    }

    return /*#__PURE__*/jsxRuntime_1(CircularProgressRoot, _extends({
      className: clsx(classes.root, className),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style),
      ownerState: ownerState,
      ref: ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /*#__PURE__*/jsxRuntime_1(CircularProgressSVG, {
        className: classes.svg,
        ownerState: ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /*#__PURE__*/jsxRuntime_1(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState: ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  CircularProgress.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * If `true`, the shrink animation is disabled.
     * This only works if variant is `indeterminate`.
     * @default false
     */
    disableShrink: chainPropTypes(propTypes.bool, props => {
      if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
        return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
      }

      return null;
    }),

    /**
     * The size of the component.
     * If using a number, the pixel unit is assumed.
     * If using a string, you need to provide the CSS unit, e.g '3rem'.
     * @default 40
     */
    size: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The thickness of the circle.
     * @default 3.6
     */
    thickness: propTypes.number,

    /**
     * The value of the progress indicator for the determinate variant.
     * Value between 0 and 100.
     * @default 0
     */
    value: propTypes.number,

    /**
     * The variant to use.
     * Use indeterminate when there is no progress value.
     * @default 'indeterminate'
     */
    variant: propTypes.oneOf(['determinate', 'indeterminate'])
  } ;
  var CircularProgress$1 = CircularProgress;

  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }

  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }

  /**
   * Listen for click events that occur somewhere in the document, outside of the element itself.
   * For instance, if you need to hide a menu when people click anywhere else on your page.
   *
   * Demos:
   *
   * - [Click Away Listener](https://mui.com/components/click-away-listener/)
   * - [Menus](https://mui.com/components/menus/)
   *
   * API:
   *
   * - [ClickAwayListener API](https://mui.com/api/click-away-listener/)
   */
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = 'onClick',
      onClickAway,
      touchEvent = 'onTouchEnd'
    } = props;
    const movedRef = React__namespace.useRef(false);
    const nodeRef = React__namespace.useRef(null);
    const activatedRef = React__namespace.useRef(false);
    const syntheticEventRef = React__namespace.useRef(false);
    React__namespace.useEffect(() => {
      // Ensure that this component is not "activated" synchronously.
      // https://github.com/facebook/react/issues/20074
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef( // @ts-expect-error TODO upstream fix
    children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:
    //
    // event.preventDefault() is meant to stop default behaviors like
    // clicking a checkbox to check it, hitting a button to submit a form,
    // and hitting left arrow to move the cursor in a text input etc.
    // Only special HTML elements have these default behaviors.

    const handleClickAway = useEventCallback(event => {
      // Given developers can stop the propagation of the synthetic event,
      // we can only be confident with a positive value.
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind
      // 2. The child might render null.
      // 3. Behave like a blur listener.

      if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {
        return;
      } // Do not act if user performed touchmove


      if (movedRef.current) {
        movedRef.current = false;
        return;
      }

      let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js

      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node
        event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node
        event.target);
      }

      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    }); // Keep track of mouse/touch events that bubbled up through the portal.

    const createHandleSynthetic = handlerName => event => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];

      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };

    const childrenProps = {
      ref: handleRef
    };

    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }

    React__namespace.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);

        const handleTouchMove = () => {
          movedRef.current = true;
        };

        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener('touchmove', handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener('touchmove', handleTouchMove);
        };
      }

      return undefined;
    }, [handleClickAway, touchEvent]);

    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }

    React__namespace.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }

      return undefined;
    }, [handleClickAway, mouseEvent]);
    return /*#__PURE__*/jsxRuntime_1(React__namespace.Fragment, {
      children: /*#__PURE__*/React__namespace.cloneElement(children, childrenProps)
    });
  }

  ClickAwayListener.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------

    /**
     * The wrapped element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: propTypes.bool,

    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: propTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),

    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: propTypes.func.isRequired,

    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: propTypes.oneOf(['onTouchEnd', 'onTouchStart', false])
  } ;

  {
    // eslint-disable-next-line
    ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);
  }

  function getContainerUtilityClass(slot) {
    return generateUtilityClass('MuiContainer', slot);
  }
  const containerClasses = generateUtilityClasses('MuiContainer', ['root', 'disableGutters', 'fixed', 'maxWidthXs', 'maxWidthSm', 'maxWidthMd', 'maxWidthLg', 'maxWidthXl']);
  var containerClasses$1 = containerClasses;

  const _excluded$1v = ["className", "component", "disableGutters", "fixed", "maxWidth"];

  const useUtilityClasses$1e = ownerState => {
    const {
      classes,
      fixed,
      disableGutters,
      maxWidth
    } = ownerState;
    const slots = {
      root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']
    };
    return composeClasses(slots, getContainerUtilityClass, classes);
  };

  const ContainerRoot = styled$1('div', {
    name: 'MuiContainer',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    width: '100%',
    marginLeft: 'auto',
    boxSizing: 'border-box',
    marginRight: 'auto',
    display: 'block'
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up('sm')]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }), ({
    theme,
    ownerState
  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
    const value = theme.breakpoints.values[breakpoint];

    if (value !== 0) {
      acc[theme.breakpoints.up(breakpoint)] = {
        maxWidth: `${value}${theme.breakpoints.unit}`
      };
    }

    return acc;
  }, {}), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.maxWidth === 'xs' && {
    [theme.breakpoints.up('xs')]: {
      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
    }
  }, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
    [theme.breakpoints.up(ownerState.maxWidth)]: {
      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
    }
  }));
  const Container = /*#__PURE__*/React__namespace.forwardRef(function Container(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiContainer'
    });

    const {
      className,
      component = 'div',
      disableGutters = false,
      fixed = false,
      maxWidth = 'lg'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1v);

    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      fixed,
      maxWidth
    });

    const classes = useUtilityClasses$1e(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ContainerRoot, _extends({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other));
  });
  Container.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: propTypes.bool,

    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Container$1 = Container;

  function GlobalStyles(props) {
    return /*#__PURE__*/jsxRuntime_1(GlobalStyles$1, _extends({}, props, {
      defaultTheme: defaultTheme$2
    }));
  }

  GlobalStyles.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The styles you want to apply globally.
     */
    styles: propTypes.oneOfType([propTypes.func, propTypes.number, propTypes.object, propTypes.shape({
      __emotion_styles: propTypes.any.isRequired
    }), propTypes.string, propTypes.bool])
  } ;

  const html = (theme, enableColorScheme) => _extends({
    WebkitFontSmoothing: 'antialiased',
    // Antialiasing.
    MozOsxFontSmoothing: 'grayscale',
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: 'border-box',
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: '100%'
  }, enableColorScheme && {
    colorScheme: theme.palette.mode
  });
  const body = theme => _extends({
    color: theme.palette.text.primary
  }, theme.typography.body1, {
    backgroundColor: theme.palette.background.default,
    '@media print': {
      // Save printer ink.
      backgroundColor: theme.palette.common.white
    }
  });
  const styles$3 = (theme, enableColorScheme = false) => {
    var _theme$components, _theme$components$Mui;

    let defaultStyles = {
      html: html(theme, enableColorScheme),
      '*, *::before, *::after': {
        boxSizing: 'inherit'
      },
      'strong, b': {
        fontWeight: theme.typography.fontWeightBold
      },
      body: _extends({
        margin: 0
      }, body(theme), {
        // Add support for document.body.requestFullScreen().
        // Other elements, if background transparent, are not supported.
        '&::backdrop': {
          backgroundColor: theme.palette.background.default
        }
      })
    };
    const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;

    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }

    return defaultStyles;
  };
  /**
   * Kickstart an elegant, consistent, and simple baseline to build upon.
   */

  function CssBaseline(inProps) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiCssBaseline'
    });
    const {
      children,
      enableColorScheme = false
    } = props;
    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1(GlobalStyles, {
        styles: theme => styles$3(theme, enableColorScheme)
      }), children]
    });
  }

  CssBaseline.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * You can wrap a node.
     */
    children: propTypes.node,

    /**
     * Enable `color-scheme` css property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     * @default false
     */
    enableColorScheme: propTypes.bool
  } ;

  // track, thumb and active are derieved from macOS 10.15.7
  const scrollBar = {
    track: '#2b2b2b',
    thumb: '#6b6b6b',
    active: '#959595'
  };
  function darkScrollbar(options = scrollBar) {
    return {
      scrollbarColor: `${options.thumb} ${options.track}`,
      '&::-webkit-scrollbar, & *::-webkit-scrollbar': {
        backgroundColor: options.track
      },
      '&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb': {
        borderRadius: 8,
        backgroundColor: options.thumb,
        minHeight: 24,
        border: `3px solid ${options.track}`
      },
      '&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus': {
        backgroundColor: options.active
      },
      '&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active': {
        backgroundColor: options.active
      },
      '&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover': {
        backgroundColor: options.active
      },
      '&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner': {
        backgroundColor: options.track
      }
    };
  }

  const _excluded$1u = ["BackdropComponent", "closeAfterTransition", "children", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted"];
  const modalClasses = modalUnstyledClasses$1;

  const extendUtilityClasses$1 = ownerState => {
    return ownerState.classes;
  };

  const ModalRoot = styled$1('div', {
    name: 'MuiModal',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: 'fixed',
    zIndex: theme.zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: 'hidden'
  }));
  const ModalBackdrop = styled$1(Backdrop$1, {
    name: 'MuiModal',
    slot: 'Backdrop',
    overridesResolver: (props, styles) => {
      return styles.backdrop;
    }
  })({
    zIndex: -1
  });
  /**
   * Modal is a lower-level construct that is leveraged by the following components:
   *
   * - [Dialog](/api/dialog/)
   * - [Drawer](/api/drawer/)
   * - [Menu](/api/menu/)
   * - [Popover](/api/popover/)
   *
   * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
   * rather than directly using Modal.
   *
   * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
   */

  const Modal = /*#__PURE__*/React__namespace.forwardRef(function Modal(inProps, ref) {
    var _componentsProps$root;

    const props = useThemeProps({
      name: 'MuiModal',
      props: inProps
    });

    const {
      BackdropComponent = ModalBackdrop,
      closeAfterTransition = false,
      children,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1u);

    const [exited, setExited] = React__namespace.useState(true);
    const commonProps = {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    };

    const ownerState = _extends({}, props, commonProps, {
      exited
    });

    const classes = extendUtilityClasses$1(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ModalUnstyled$1, _extends({
      components: _extends({
        Root: ModalRoot
      }, components),
      componentsProps: {
        root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent(components.Root)) && {
          ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
        })
      },
      BackdropComponent: BackdropComponent,
      onTransitionEnter: () => setExited(false),
      onTransitionExited: () => setExited(true),
      ref: ref
    }, other, {
      classes: classes
    }, commonProps, {
      children: children
    }));
  });
  Modal.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: propTypes.elementType,

    /**
     * Props applied to the [`Backdrop`](/api/backdrop/) element.
     */
    BackdropProps: propTypes.object,

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: propTypes.bool,

    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([HTMLElementType, propTypes.func]),

    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: propTypes.bool,

    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: propTypes.bool,

    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: propTypes.bool,

    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: propTypes.bool,

    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden.
     * @default false
     */
    disableRestoreFocus: propTypes.bool,

    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: propTypes.bool,

    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: propTypes.bool,

    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: propTypes.bool,

    /**
     * Callback fired when the backdrop is clicked.
     */
    onBackdropClick: propTypes.func,

    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Modal$1 = Modal;

  function getDialogUtilityClass(slot) {
    return generateUtilityClass('MuiDialog', slot);
  }
  const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
  var dialogClasses$1 = dialogClasses;

  const DialogContext = /*#__PURE__*/React.createContext({});

  {
    DialogContext.displayName = 'DialogContext';
  }

  var DialogContext$1 = DialogContext;

  const _excluded$1t = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
  const DialogBackdrop = styled$1(Backdrop$1, {
    name: 'MuiDialog',
    slot: 'Backdrop',
    overrides: (props, styles) => styles.backdrop
  })({
    // Improve scrollable dialog support.
    zIndex: -1
  });

  const useUtilityClasses$1d = ownerState => {
    const {
      classes,
      scroll,
      maxWidth,
      fullWidth,
      fullScreen
    } = ownerState;
    const slots = {
      root: ['root'],
      container: ['container', `scroll${capitalize(scroll)}`],
      paper: ['paper', `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
    };
    return composeClasses(slots, getDialogUtilityClass, classes);
  };

  const DialogRoot = styled$1(Modal$1, {
    name: 'MuiDialog',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    '@media print': {
      // Use !important to override the Modal inline-style.
      position: 'absolute !important'
    }
  });
  const DialogContainer = styled$1('div', {
    name: 'MuiDialog',
    slot: 'Container',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.container, styles[`scroll${capitalize(ownerState.scroll)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    height: '100%',
    '@media print': {
      height: 'auto'
    },
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }, ownerState.scroll === 'paper' && {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  }, ownerState.scroll === 'body' && {
    overflowY: 'auto',
    overflowX: 'hidden',
    textAlign: 'center',
    '&:after': {
      content: '""',
      display: 'inline-block',
      verticalAlign: 'middle',
      height: '100%',
      width: '0'
    }
  }));
  const DialogPaper = styled$1(Paper$1, {
    name: 'MuiDialog',
    slot: 'Paper',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.paper, styles[`scrollPaper${capitalize(ownerState.scroll)}`], styles[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 32,
    position: 'relative',
    overflowY: 'auto',
    // Fix IE11 issue, to remove at some point.
    '@media print': {
      overflowY: 'visible',
      boxShadow: 'none'
    }
  }, ownerState.scroll === 'paper' && {
    display: 'flex',
    flexDirection: 'column',
    maxHeight: 'calc(100% - 64px)'
  }, ownerState.scroll === 'body' && {
    display: 'inline-block',
    verticalAlign: 'middle',
    textAlign: 'left' // 'initial' doesn't work on IE11

  }, !ownerState.maxWidth && {
    maxWidth: 'calc(100% - 64px)'
  }, ownerState.maxWidth === 'xs' && {
    maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
    [`&.${dialogClasses$1.paperScrollBody}`]: {
      [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
        maxWidth: 'calc(100% - 64px)'
      }
    }
  }, ownerState.maxWidth !== 'xs' && {
    maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
    [`&.${dialogClasses$1.paperScrollBody}`]: {
      [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
        maxWidth: 'calc(100% - 64px)'
      }
    }
  }, ownerState.fullWidth && {
    width: 'calc(100% - 64px)'
  }, ownerState.fullScreen && {
    margin: 0,
    width: '100%',
    maxWidth: '100%',
    height: '100%',
    maxHeight: 'none',
    borderRadius: 0,
    [`&.${dialogClasses$1.paperScrollBody}`]: {
      margin: 0,
      maxWidth: '100%'
    }
  }));
  const defaultTransitionDuration$1 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  /**
   * Dialogs are overlaid modal paper based components with a backdrop.
   */

  const Dialog = /*#__PURE__*/React__namespace.forwardRef(function Dialog(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDialog'
    });

    const {
      'aria-describedby': ariaDescribedby,
      'aria-labelledby': ariaLabelledbyProp,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth = 'sm',
      onBackdropClick,
      onClose,
      open,
      PaperComponent = Paper$1,
      PaperProps = {},
      scroll = 'paper',
      TransitionComponent = Fade$1,
      transitionDuration = defaultTransitionDuration$1,
      TransitionProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1t);

    const ownerState = _extends({}, props, {
      disableEscapeKeyDown,
      fullScreen,
      fullWidth,
      maxWidth,
      scroll
    });

    const classes = useUtilityClasses$1d(ownerState);
    const backdropClick = React__namespace.useRef();

    const handleMouseDown = event => {
      // We don't want to close the dialog when clicking the dialog content.
      // Make sure the event starts and ends on the same DOM element.
      backdropClick.current = event.target === event.currentTarget;
    };

    const handleBackdropClick = event => {
      // Ignore the events not coming from the "backdrop".
      if (!backdropClick.current) {
        return;
      }

      backdropClick.current = null;

      if (onBackdropClick) {
        onBackdropClick(event);
      }

      if (onClose) {
        onClose(event, 'backdropClick');
      }
    };

    const ariaLabelledby = useId(ariaLabelledbyProp);
    const dialogContextValue = React__namespace.useMemo(() => {
      return {
        titleId: ariaLabelledby
      };
    }, [ariaLabelledby]);
    return /*#__PURE__*/jsxRuntime_1(DialogRoot, _extends({
      className: clsx(classes.root, className),
      BackdropProps: _extends({
        transitionDuration,
        as: BackdropComponent
      }, BackdropProps),
      closeAfterTransition: true,
      BackdropComponent: DialogBackdrop,
      disableEscapeKeyDown: disableEscapeKeyDown,
      onClose: onClose,
      open: open,
      ref: ref,
      onClick: handleBackdropClick,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        appear: true,
        in: open,
        timeout: transitionDuration,
        role: "presentation"
      }, TransitionProps, {
        children: /*#__PURE__*/jsxRuntime_1(DialogContainer, {
          className: clsx(classes.container),
          onMouseDown: handleMouseDown,
          ownerState: ownerState,
          children: /*#__PURE__*/jsxRuntime_1(DialogPaper, _extends({
            as: PaperComponent,
            elevation: 24,
            role: "dialog",
            "aria-describedby": ariaDescribedby,
            "aria-labelledby": ariaLabelledby
          }, PaperProps, {
            className: clsx(classes.paper, PaperProps.className),
            ownerState: ownerState,
            children: /*#__PURE__*/jsxRuntime_1(DialogContext$1.Provider, {
              value: dialogContextValue,
              children: children
            })
          }))
        })
      }))
    }));
  });
  Dialog.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The id(s) of the element(s) that describe the dialog.
     */
    'aria-describedby': propTypes.string,

    /**
     * The id(s) of the element(s) that label the dialog.
     */
    'aria-labelledby': propTypes.string,

    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: propTypes.elementType,

    /**
     * @ignore
     */
    BackdropProps: propTypes.object,

    /**
     * Dialog children, usually the included sub-components.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: propTypes.bool,

    /**
     * If `true`, the dialog is full-screen.
     * @default false
     */
    fullScreen: propTypes.bool,

    /**
     * If `true`, the dialog stretches to `maxWidth`.
     *
     * Notice that the dialog width grow is limited by the default margin.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * Determine the max-width of the dialog.
     * The dialog width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'sm'
     */
    maxWidth: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), propTypes.string]),

    /**
     * Callback fired when the backdrop is clicked.
     */
    onBackdropClick: propTypes.func,

    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * The component used to render the body of the dialog.
     * @default Paper
     */
    PaperComponent: propTypes.elementType,

    /**
     * Props applied to the [`Paper`](/api/paper/) element.
     * @default {}
     */
    PaperProps: propTypes.object,

    /**
     * Determine the container for scrolling the dialog.
     * @default 'paper'
     */
    scroll: propTypes.oneOf(['body', 'paper']),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: propTypes.elementType,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }
     */
    transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     */
    TransitionProps: propTypes.object
  } ;
  var Dialog$1 = Dialog;

  function getDialogActionsUtilityClass(slot) {
    return generateUtilityClass('MuiDialogActions', slot);
  }
  const dialogActionsClasses = generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);
  var dialogActionsClasses$1 = dialogActionsClasses;

  const _excluded$1s = ["className", "disableSpacing"];

  const useUtilityClasses$1c = ownerState => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ['root', !disableSpacing && 'spacing']
    };
    return composeClasses(slots, getDialogActionsUtilityClass, classes);
  };

  const DialogActionsRoot = styled$1('div', {
    name: 'MuiDialogActions',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.disableSpacing && styles.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex',
    alignItems: 'center',
    padding: 8,
    justifyContent: 'flex-end',
    flex: '0 0 auto'
  }, !ownerState.disableSpacing && {
    '& > :not(:first-of-type)': {
      marginLeft: 8
    }
  }));
  const DialogActions = /*#__PURE__*/React__namespace.forwardRef(function DialogActions(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDialogActions'
    });

    const {
      className,
      disableSpacing = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1s);

    const ownerState = _extends({}, props, {
      disableSpacing
    });

    const classes = useUtilityClasses$1c(ownerState);
    return /*#__PURE__*/jsxRuntime_1(DialogActionsRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  DialogActions.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var DialogActions$1 = DialogActions;

  function getDialogContentUtilityClass(slot) {
    return generateUtilityClass('MuiDialogContent', slot);
  }
  const dialogContentClasses = generateUtilityClasses('MuiDialogContent', ['root', 'dividers']);
  var dialogContentClasses$1 = dialogContentClasses;

  function getDialogTitleUtilityClass(slot) {
    return generateUtilityClass('MuiDialogTitle', slot);
  }
  const dialogTitleClasses = generateUtilityClasses('MuiDialogTitle', ['root']);
  var dialogTitleClasses$1 = dialogTitleClasses;

  const _excluded$1r = ["className", "dividers"];

  const useUtilityClasses$1b = ownerState => {
    const {
      classes,
      dividers
    } = ownerState;
    const slots = {
      root: ['root', dividers && 'dividers']
    };
    return composeClasses(slots, getDialogContentUtilityClass, classes);
  };

  const DialogContentRoot = styled$1('div', {
    name: 'MuiDialogContent',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dividers && styles.dividers];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    flex: '1 1 auto',
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: 'touch',
    overflowY: 'auto',
    padding: '20px 24px'
  }, ownerState.dividers ? {
    padding: '16px 24px',
    borderTop: `1px solid ${theme.palette.divider}`,
    borderBottom: `1px solid ${theme.palette.divider}`
  } : {
    [`.${dialogTitleClasses$1.root} + &`]: {
      paddingTop: 0
    }
  }));
  const DialogContent = /*#__PURE__*/React__namespace.forwardRef(function DialogContent(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDialogContent'
    });

    const {
      className,
      dividers = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1r);

    const ownerState = _extends({}, props, {
      dividers
    });

    const classes = useUtilityClasses$1b(ownerState);
    return /*#__PURE__*/jsxRuntime_1(DialogContentRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  DialogContent.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Display the top and bottom dividers.
     * @default false
     */
    dividers: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var DialogContent$1 = DialogContent;

  function getDialogContentTextUtilityClass(slot) {
    return generateUtilityClass('MuiDialogContentText', slot);
  }
  const dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);
  var dialogContentTextClasses$1 = dialogContentTextClasses;

  const _excluded$1q = ["children"];

  const useUtilityClasses$1a = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const DialogContentTextRoot = styled$1(Typography$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiDialogContentText',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({});
  const DialogContentText = /*#__PURE__*/React__namespace.forwardRef(function DialogContentText(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDialogContentText'
    });

    const ownerState = _objectWithoutPropertiesLoose(props, _excluded$1q);

    const classes = useUtilityClasses$1a(ownerState);
    return /*#__PURE__*/jsxRuntime_1(DialogContentTextRoot, _extends({
      component: "p",
      variant: "body1",
      color: "text.secondary",
      ref: ref,
      ownerState: ownerState
    }, props, {
      classes: classes
    }));
  });
  DialogContentText.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var DialogContentText$1 = DialogContentText;

  const _excluded$1p = ["className", "id"];

  const useUtilityClasses$19 = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getDialogTitleUtilityClass, classes);
  };

  const DialogTitleRoot = styled$1(Typography$1, {
    name: 'MuiDialogTitle',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    padding: '16px 24px',
    flex: '0 0 auto'
  });
  const DialogTitle = /*#__PURE__*/React__namespace.forwardRef(function DialogTitle(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDialogTitle'
    });

    const {
      className,
      id: idProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1p);

    const ownerState = props;
    const classes = useUtilityClasses$19(ownerState);
    const {
      titleId: id = idProp
    } = React__namespace.useContext(DialogContext$1);
    return /*#__PURE__*/jsxRuntime_1(DialogTitleRoot, _extends({
      component: "h2",
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref,
      variant: "h6",
      id: id
    }, other));
  });
  DialogTitle.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * @ignore
     */
    id: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var DialogTitle$1 = DialogTitle;

  function getDividerUtilityClass(slot) {
    return generateUtilityClass('MuiDivider', slot);
  }
  const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
  var dividerClasses$1 = dividerClasses;

  const _excluded$1o = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];

  const useUtilityClasses$18 = ownerState => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],
      wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']
    };
    return composeClasses(slots, getDividerUtilityClass, classes);
  };

  const DividerRoot = styled$1('div', {
    name: 'MuiDivider',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: 'solid',
    borderColor: theme.palette.divider,
    borderBottomWidth: 'thin'
  }, ownerState.absolute && {
    position: 'absolute',
    bottom: 0,
    left: 0,
    width: '100%'
  }, ownerState.light && {
    borderColor: alpha(theme.palette.divider, 0.08)
  }, ownerState.variant === 'inset' && {
    marginLeft: 72
  }, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2)
  }, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }, ownerState.orientation === 'vertical' && {
    height: '100%',
    borderBottomWidth: 0,
    borderRightWidth: 'thin'
  }, ownerState.flexItem && {
    alignSelf: 'stretch',
    height: 'auto'
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && {
    display: 'flex',
    whiteSpace: 'nowrap',
    textAlign: 'center',
    border: 0,
    '&::before, &::after': {
      position: 'relative',
      width: '100%',
      borderTop: `thin solid ${theme.palette.divider}`,
      top: '50%',
      content: '""',
      transform: 'translateY(50%)'
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === 'vertical' && {
    flexDirection: 'column',
    '&::before, &::after': {
      height: '100%',
      top: '0%',
      left: '50%',
      borderTop: 0,
      borderLeft: `thin solid ${theme.palette.divider}`,
      transform: 'translateX(0%)'
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
    '&::before': {
      width: '90%'
    },
    '&::after': {
      width: '10%'
    }
  }, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
    '&::before': {
      width: '10%'
    },
    '&::after': {
      width: '90%'
    }
  }));
  const DividerWrapper = styled$1('span', {
    name: 'MuiDivider',
    slot: 'Wrapper',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'inline-block',
    paddingLeft: theme.spacing(1.2),
    paddingRight: theme.spacing(1.2)
  }, ownerState.orientation === 'vertical' && {
    paddingTop: theme.spacing(1.2),
    paddingBottom: theme.spacing(1.2)
  }));
  const Divider = /*#__PURE__*/React__namespace.forwardRef(function Divider(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDivider'
    });

    const {
      absolute = false,
      children,
      className,
      component = children ? 'div' : 'hr',
      flexItem = false,
      light = false,
      orientation = 'horizontal',
      role = component !== 'hr' ? 'separator' : undefined,
      textAlign = 'center',
      variant = 'fullWidth'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1o);

    const ownerState = _extends({}, props, {
      absolute,
      component,
      flexItem,
      light,
      orientation,
      role,
      textAlign,
      variant
    });

    const classes = useUtilityClasses$18(ownerState);
    return /*#__PURE__*/jsxRuntime_1(DividerRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      role: role,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: children ? /*#__PURE__*/jsxRuntime_1(DividerWrapper, {
        className: classes.wrapper,
        ownerState: ownerState,
        children: children
      }) : null
    }));
  });
  Divider.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: propTypes.bool,

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: propTypes.bool,

    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     */
    light: propTypes.bool,

    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * @ignore
     */
    role: propTypes
    /* @typescript-to-proptypes-ignore */
    .string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: propTypes.oneOf(['center', 'left', 'right']),

    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['fullWidth', 'inset', 'middle']), propTypes.string])
  } ;
  var Divider$1 = Divider;

  const _excluded$1n = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

  function getTranslateValue(direction, node, resolvedContainer) {
    const rect = node.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = ownerWindow(node);
    let transform;

    if (node.fakeTransform) {
      transform = node.fakeTransform;
    } else {
      const computedStyle = containerWindow.getComputedStyle(node);
      transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
    }

    let offsetX = 0;
    let offsetY = 0;

    if (transform && transform !== 'none' && typeof transform === 'string') {
      const transformValues = transform.split('(')[1].split(')')[0].split(',');
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }

    if (direction === 'left') {
      if (containerRect) {
        return `translateX(${containerRect.right + offsetX - rect.left}px)`;
      }

      return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }

    if (direction === 'right') {
      if (containerRect) {
        return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
      }

      return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }

    if (direction === 'up') {
      if (containerRect) {
        return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
      }

      return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    } // direction === 'down'


    if (containerRect) {
      return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    }

    return `translateY(-${rect.top + rect.height - offsetY}px)`;
  }

  function resolveContainer(containerPropProp) {
    return typeof containerPropProp === 'function' ? containerPropProp() : containerPropProp;
  }

  function setTranslateValue(direction, node, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform = getTranslateValue(direction, node, resolvedContainer);

    if (transform) {
      node.style.webkitTransform = transform;
      node.style.transform = transform;
    }
  }
  const defaultEasing = {
    enter: easing.easeOut,
    exit: easing.sharp
  };
  const defaultTimeout$1 = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  /**
   * The Slide transition is used by the [Drawer](/components/drawers/) component.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  const Slide = /*#__PURE__*/React__namespace.forwardRef(function Slide(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      container: containerProp,
      direction = 'down',
      easing: easingProp = defaultEasing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout = defaultTimeout$1,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1n);

    const theme = useTheme();
    const childrenRef = React__namespace.useRef(null);
    const handleRefIntermediary = useForkRef(children.ref, childrenRef);
    const handleRef = useForkRef(handleRefIntermediary, ref);

    const normalizedTransitionCallback = callback => isAppearing => {
      if (callback) {
        // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
        if (isAppearing === undefined) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };

    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      setTranslateValue(direction, node, containerProp);
      reflow(node);

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
      const transitionProps = getTransitionProps({
        timeout,
        style,
        easing: easingProp
      }, {
        mode: 'enter'
      });
      node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps));
      node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps));
      node.style.webkitTransform = 'none';
      node.style.transform = 'none';

      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback(node => {
      const transitionProps = getTransitionProps({
        timeout,
        style,
        easing: easingProp
      }, {
        mode: 'exit'
      });
      node.style.webkitTransition = theme.transitions.create('-webkit-transform', transitionProps);
      node.style.transition = theme.transitions.create('transform', transitionProps);
      setTranslateValue(direction, node, containerProp);

      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(node => {
      // No need for transitions when the component is hidden
      node.style.webkitTransition = '';
      node.style.transition = '';

      if (onExited) {
        onExited(node);
      }
    });

    const handleAddEndListener = next => {
      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(childrenRef.current, next);
      }
    };

    const updatePosition = React__namespace.useCallback(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    }, [direction, containerProp]);
    React__namespace.useEffect(() => {
      // Skip configuration where the position is screen size invariant.
      if (inProp || direction === 'down' || direction === 'right') {
        return undefined;
      }

      const handleResize = debounce$1(() => {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current, containerProp);
        }
      });
      const containerWindow = ownerWindow(childrenRef.current);
      containerWindow.addEventListener('resize', handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener('resize', handleResize);
      };
    }, [direction, inProp, containerProp]);
    React__namespace.useEffect(() => {
      if (!inProp) {
        // We need to update the position of the drawer when the direction change and
        // when it's hidden.
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      appear: appear,
      in: inProp,
      timeout: timeout
    }, other, {
      children: (state, childProps) => {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
          ref: handleRef,
          style: _extends({
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, style, children.props.style)
        }, childProps));
      }
    }));
  });
  Slide.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: propTypes.func,

    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: propTypes.bool,

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * An HTML element, or a function that returns one.
     * It's used to set the container the Slide is transitioning from.
     */
    container: chainPropTypes(propTypes.oneOfType([HTMLElementType, propTypes.func]), props => {
      if (props.open) {
        const resolvedContainer = resolveContainer(props.container);

        if (resolvedContainer && resolvedContainer.nodeType === 1) {
          const box = resolvedContainer.getBoundingClientRect();

          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(['MUI: The `container` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== 'function' || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
          return new Error(['MUI: The `container` prop provided to the component is invalid.', 'It should be an HTML element instance.'].join('\n'));
        }
      }

      return null;
    }),

    /**
     * Direction the child node will enter from.
     * @default 'down'
     */
    direction: propTypes.oneOf(['down', 'left', 'right', 'up']),

    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     * @default {
     *   enter: easing.easeOut,
     *   exit: easing.sharp,
     * }
     */
    easing: propTypes.oneOfType([propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string
    }), propTypes.string]),

    /**
     * If `true`, the component will transition in.
     */
    in: propTypes.bool,

    /**
     * @ignore
     */
    onEnter: propTypes.func,

    /**
     * @ignore
     */
    onEntered: propTypes.func,

    /**
     * @ignore
     */
    onEntering: propTypes.func,

    /**
     * @ignore
     */
    onExit: propTypes.func,

    /**
     * @ignore
     */
    onExited: propTypes.func,

    /**
     * @ignore
     */
    onExiting: propTypes.func,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: duration.enteringScreen,
     *   exit: duration.leavingScreen,
     * }
     */
    timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })])
  } ;
  var Slide$1 = Slide;

  function getDrawerUtilityClass(slot) {
    return generateUtilityClass('MuiDrawer', slot);
  }
  const drawerClasses = generateUtilityClasses('MuiDrawer', ['root', 'docked', 'paper', 'paperAnchorLeft', 'paperAnchorRight', 'paperAnchorTop', 'paperAnchorBottom', 'paperAnchorDockedLeft', 'paperAnchorDockedRight', 'paperAnchorDockedTop', 'paperAnchorDockedBottom', 'modal']);
  var drawerClasses$1 = drawerClasses;

  const _excluded$1m = ["BackdropProps"],
        _excluded2$9 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];

  const overridesResolver$5 = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, (ownerState.variant === 'permanent' || ownerState.variant === 'persistent') && styles.docked, styles.modal];
  };

  const useUtilityClasses$17 = ownerState => {
    const {
      classes,
      anchor,
      variant
    } = ownerState;
    const slots = {
      root: ['root'],
      docked: [(variant === 'permanent' || variant === 'persistent') && 'docked'],
      modal: ['modal'],
      paper: ['paper', `paperAnchor${capitalize(anchor)}`, variant !== 'temporary' && `paperAnchorDocked${capitalize(anchor)}`]
    };
    return composeClasses(slots, getDrawerUtilityClass, classes);
  };

  const DrawerRoot = styled$1(Modal$1, {
    name: 'MuiDrawer',
    slot: 'Root',
    overridesResolver: overridesResolver$5
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.drawer
  }));
  const DrawerDockedRoot = styled$1('div', {
    shouldForwardProp: rootShouldForwardProp,
    name: 'MuiDrawer',
    slot: 'Docked',
    skipVariantsResolver: false,
    overridesResolver: overridesResolver$5
  })({
    flex: '0 0 auto'
  });
  const DrawerPaper = styled$1(Paper$1, {
    name: 'MuiDrawer',
    slot: 'Paper',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.paper, styles[`paperAnchor${capitalize(ownerState.anchor)}`], ownerState.variant !== 'temporary' && styles[`paperAnchorDocked${capitalize(ownerState.anchor)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    overflowY: 'auto',
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    flex: '1 0 auto',
    zIndex: theme.zIndex.drawer,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: 'touch',
    // temporary style
    position: 'fixed',
    top: 0,
    // We disable the focus ring for mouse, touch and keyboard users.
    // At some point, it would be better to keep it for keyboard users.
    // :focus-ring CSS pseudo-class will help.
    outline: 0
  }, ownerState.anchor === 'left' && {
    left: 0
  }, ownerState.anchor === 'top' && {
    top: 0,
    left: 0,
    right: 0,
    height: 'auto',
    maxHeight: '100%'
  }, ownerState.anchor === 'right' && {
    right: 0
  }, ownerState.anchor === 'bottom' && {
    top: 'auto',
    left: 0,
    bottom: 0,
    right: 0,
    height: 'auto',
    maxHeight: '100%'
  }, ownerState.anchor === 'left' && ownerState.variant !== 'temporary' && {
    borderRight: `1px solid ${theme.palette.divider}`
  }, ownerState.anchor === 'top' && ownerState.variant !== 'temporary' && {
    borderBottom: `1px solid ${theme.palette.divider}`
  }, ownerState.anchor === 'right' && ownerState.variant !== 'temporary' && {
    borderLeft: `1px solid ${theme.palette.divider}`
  }, ownerState.anchor === 'bottom' && ownerState.variant !== 'temporary' && {
    borderTop: `1px solid ${theme.palette.divider}`
  }));
  const oppositeDirection = {
    left: 'right',
    right: 'left',
    top: 'down',
    bottom: 'up'
  };
  function isHorizontal(anchor) {
    return ['left', 'right'].indexOf(anchor) !== -1;
  }
  function getAnchor(theme, anchor) {
    return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  const defaultTransitionDuration = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  /**
   * The props of the [Modal](/api/modal/) component are available
   * when `variant="temporary"` is set.
   */

  const Drawer = /*#__PURE__*/React__namespace.forwardRef(function Drawer(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiDrawer'
    });

    const {
      anchor: anchorProp = 'left',
      BackdropProps,
      children,
      className,
      elevation = 16,
      hideBackdrop = false,
      ModalProps: {
        BackdropProps: BackdropPropsProp
      } = {},
      onClose,
      open = false,
      PaperProps = {},
      SlideProps,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Slide$1,
      transitionDuration = defaultTransitionDuration,
      variant = 'temporary'
    } = props,
          ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded$1m),
          other = _objectWithoutPropertiesLoose(props, _excluded2$9);

    const theme = useTheme(); // Let's assume that the Drawer will always be rendered on user space.
    // We use this state is order to skip the appear transition during the
    // initial mount of the component.

    const mounted = React__namespace.useRef(false);
    React__namespace.useEffect(() => {
      mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor(theme, anchorProp);
    const anchor = anchorProp;

    const ownerState = _extends({}, props, {
      anchor,
      elevation,
      open,
      variant
    }, other);

    const classes = useUtilityClasses$17(ownerState);

    const drawer = /*#__PURE__*/jsxRuntime_1(DrawerPaper, _extends({
      elevation: variant === 'temporary' ? elevation : 0,
      square: true
    }, PaperProps, {
      className: clsx(classes.paper, PaperProps.className),
      ownerState: ownerState,
      children: children
    }));

    if (variant === 'permanent') {
      return /*#__PURE__*/jsxRuntime_1(DrawerDockedRoot, _extends({
        className: clsx(classes.root, classes.docked, className),
        ownerState: ownerState,
        ref: ref
      }, other, {
        children: drawer
      }));
    }

    const slidingDrawer = /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      in: open,
      direction: oppositeDirection[anchorInvariant],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps, {
      children: drawer
    }));

    if (variant === 'persistent') {
      return /*#__PURE__*/jsxRuntime_1(DrawerDockedRoot, _extends({
        className: clsx(classes.root, classes.docked, className),
        ownerState: ownerState,
        ref: ref
      }, other, {
        children: slidingDrawer
      }));
    } // variant === temporary


    return /*#__PURE__*/jsxRuntime_1(DrawerRoot, _extends({
      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      className: clsx(classes.root, classes.modal, className),
      open: open,
      ownerState: ownerState,
      onClose: onClose,
      hideBackdrop: hideBackdrop,
      ref: ref
    }, other, ModalProps, {
      children: slidingDrawer
    }));
  });
  Drawer.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Side from which the drawer will appear.
     * @default 'left'
     */
    anchor: propTypes.oneOf(['bottom', 'left', 'right', 'top']),

    /**
     * @ignore
     */
    BackdropProps: propTypes.object,

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The elevation of the drawer.
     * @default 16
     */
    elevation: integerPropType,

    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: propTypes.bool,

    /**
     * Props applied to the [`Modal`](/api/modal/) element.
     * @default {}
     */
    ModalProps: propTypes.object,

    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     */
    onClose: propTypes.func,

    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: propTypes.bool,

    /**
     * Props applied to the [`Paper`](/api/paper/) element.
     * @default {}
     */
    PaperProps: propTypes.object,

    /**
     * Props applied to the [`Slide`](/api/slide/) element.
     */
    SlideProps: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }
     */
    transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * The variant to use.
     * @default 'temporary'
     */
    variant: propTypes.oneOf(['permanent', 'persistent', 'temporary'])
  } ;
  var Drawer$1 = Drawer;

  function getFabUtilityClass(slot) {
    return generateUtilityClass('MuiFab', slot);
  }
  const fabClasses = generateUtilityClasses('MuiFab', ['root', 'primary', 'secondary', 'extended', 'circular', 'focusVisible', 'disabled', 'colorInherit', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
  var fabClasses$1 = fabClasses;

  const _excluded$1l = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];

  const useUtilityClasses$16 = ownerState => {
    const {
      color,
      variant,
      classes,
      size
    } = ownerState;
    const slots = {
      root: ['root', variant, `size${capitalize(size)}`, color === 'inherit' && 'colorInherit', color === 'primary' && 'primary', color === 'secondary' && 'secondary']
    };
    return composeClasses(slots, getFabUtilityClass, classes);
  };

  const FabRoot = styled$1(ButtonBase$1, {
    name: 'MuiFab',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.color === 'primary' && styles.primary, ownerState.color === 'secondary' && styles.secondary];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.button, {
    minHeight: 36,
    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {
      duration: theme.transitions.duration.short
    }),
    borderRadius: '50%',
    padding: 0,
    minWidth: 0,
    width: 56,
    height: 56,
    boxShadow: theme.shadows[6],
    '&:active': {
      boxShadow: theme.shadows[12]
    },
    color: theme.palette.getContrastText(theme.palette.grey[300]),
    backgroundColor: theme.palette.grey[300],
    '&:hover': {
      backgroundColor: theme.palette.grey.A100,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: theme.palette.grey[300]
      },
      textDecoration: 'none'
    },
    [`&.${fabClasses$1.focusVisible}`]: {
      boxShadow: theme.shadows[6]
    },
    [`&.${fabClasses$1.disabled}`]: {
      color: theme.palette.action.disabled,
      boxShadow: theme.shadows[0],
      backgroundColor: theme.palette.action.disabledBackground
    }
  }, ownerState.size === 'small' && {
    width: 40,
    height: 40
  }, ownerState.size === 'medium' && {
    width: 48,
    height: 48
  }, ownerState.variant === 'extended' && {
    borderRadius: 48 / 2,
    padding: '0 16px',
    width: 'auto',
    minHeight: 'auto',
    minWidth: 48,
    height: 48
  }, ownerState.variant === 'extended' && ownerState.size === 'small' && {
    width: 'auto',
    padding: '0 8px',
    borderRadius: 34 / 2,
    minWidth: 34,
    height: 34
  }, ownerState.variant === 'extended' && ownerState.size === 'medium' && {
    width: 'auto',
    padding: '0 16px',
    borderRadius: 40 / 2,
    minWidth: 40,
    height: 40
  }, ownerState.color === 'inherit' && {
    color: 'inherit'
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.color === 'primary' && {
    color: theme.palette.primary.contrastText,
    backgroundColor: theme.palette.primary.main,
    '&:hover': {
      backgroundColor: theme.palette.primary.dark,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: theme.palette.primary.main
      }
    }
  }, ownerState.color === 'secondary' && {
    color: theme.palette.secondary.contrastText,
    backgroundColor: theme.palette.secondary.main,
    '&:hover': {
      backgroundColor: theme.palette.secondary.dark,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: theme.palette.secondary.main
      }
    }
  }));
  const Fab = /*#__PURE__*/React__namespace.forwardRef(function Fab(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFab'
    });

    const {
      children,
      className,
      color = 'default',
      component = 'button',
      disabled = false,
      disableFocusRipple = false,
      focusVisibleClassName,
      size = 'large',
      variant = 'circular'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1l);

    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      disableFocusRipple,
      size,
      variant
    });

    const classes = useUtilityClasses$16(ownerState);
    return /*#__PURE__*/jsxRuntime_1(FabRoot, _extends({
      className: clsx(classes.root, className),
      component: component,
      disabled: disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: children
    }));
  });
  Fab.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     */
    disableRipple: propTypes.bool,

    /**
     * @ignore
     */
    focusVisibleClassName: propTypes.string,

    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: propTypes.string,

    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'large'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'circular'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['circular', 'extended']), propTypes.string])
  } ;
  var Fab$1 = Fab;

  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];

      if (muiFormControl) {
        if (typeof props[state] === 'undefined') {
          acc[state] = muiFormControl[state];
        }
      }

      return acc;
    }, {});
  }

  // Supports determination of isControlled().
  // Controlled input accepts its current value as a prop.
  //
  // @see https://facebook.github.io/react/docs/forms.html#controlled-components
  // @param value
  // @returns {boolean} true if string (including '') or number (including zero)
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  } // Determine if field is empty or filled.
  // Response determines if label is presented above field or as placeholder.
  //
  // @param obj
  // @param SSR
  // @returns {boolean} False when not present or empty string.
  //                    True when any number or string with length.

  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
  } // Determine if an Input is adorned on start.
  // It's corresponding to the left with LTR.
  //
  // @param obj
  // @returns {boolean} False when no adornments.
  //                    True when adorned at the start.

  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  const _excluded$1k = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "startAdornment", "type", "value"];
  const rootOverridesResolver = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
  };
  const inputOverridesResolver = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
  };

  const useUtilityClasses$15 = ownerState => {
    const {
      classes,
      color,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size === 'small' && 'sizeSmall', multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel'],
      input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd']
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };

  const InputBaseRoot = styled$1('div', {
    name: 'MuiInputBase',
    slot: 'Root',
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: theme.palette.text.primary,
    lineHeight: '1.4375em',
    // 23px
    boxSizing: 'border-box',
    // Prevent padding issue with fullWidth.
    position: 'relative',
    cursor: 'text',
    display: 'inline-flex',
    alignItems: 'center',
    [`&.${inputBaseClasses$1.disabled}`]: {
      color: theme.palette.text.disabled,
      cursor: 'default'
    }
  }, ownerState.multiline && _extends({
    padding: '4px 0 5px'
  }, ownerState.size === 'small' && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: '100%'
  }));
  const InputBaseComponent = styled$1('input', {
    name: 'MuiInputBase',
    slot: 'Input',
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light = theme.palette.mode === 'light';
    const placeholder = {
      color: 'currentColor',
      opacity: light ? 0.42 : 0.5,
      transition: theme.transitions.create('opacity', {
        duration: theme.transitions.duration.shorter
      })
    };
    const placeholderHidden = {
      opacity: '0 !important'
    };
    const placeholderVisible = {
      opacity: light ? 0.42 : 0.5
    };
    return _extends({
      font: 'inherit',
      letterSpacing: 'inherit',
      color: 'currentColor',
      padding: '4px 0 5px',
      border: 0,
      boxSizing: 'content-box',
      background: 'none',
      height: '1.4375em',
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: 'transparent',
      display: 'block',
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: '100%',
      // Fix IE11 width issue
      animationName: 'mui-auto-fill-cancel',
      animationDuration: '10ms',
      '&::-webkit-input-placeholder': placeholder,
      '&::-moz-placeholder': placeholder,
      // Firefox 19+
      '&:-ms-input-placeholder': placeholder,
      // IE11
      '&::-ms-input-placeholder': placeholder,
      // Edge
      '&:focus': {
        outline: 0
      },
      // Reset Firefox invalid required input style
      '&:invalid': {
        boxShadow: 'none'
      },
      '&::-webkit-search-decoration': {
        // Remove the padding when type=search.
        WebkitAppearance: 'none'
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
        '&::-webkit-input-placeholder': placeholderHidden,
        '&::-moz-placeholder': placeholderHidden,
        // Firefox 19+
        '&:-ms-input-placeholder': placeholderHidden,
        // IE11
        '&::-ms-input-placeholder': placeholderHidden,
        // Edge
        '&:focus::-webkit-input-placeholder': placeholderVisible,
        '&:focus::-moz-placeholder': placeholderVisible,
        // Firefox 19+
        '&:focus:-ms-input-placeholder': placeholderVisible,
        // IE11
        '&:focus::-ms-input-placeholder': placeholderVisible // Edge

      },
      [`&.${inputBaseClasses$1.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: theme.palette.text.disabled // Fix opacity Safari bug

      },
      '&:-webkit-autofill': {
        animationDuration: '5000s',
        animationName: 'mui-auto-fill'
      }
    }, ownerState.size === 'small' && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: 'auto',
      resize: 'none',
      padding: 0,
      paddingTop: 0
    }, ownerState.type === 'search' && {
      // Improve type search style.
      MozAppearance: 'textfield'
    });
  });

  const inputGlobalStyles = /*#__PURE__*/jsxRuntime_1(GlobalStyles, {
    styles: {
      '@keyframes mui-auto-fill': {
        from: {
          display: 'block'
        }
      },
      '@keyframes mui-auto-fill-cancel': {
        from: {
          display: 'block'
        }
      }
    }
  });
  /**
   * `InputBase` contains as few styles as possible.
   * It aims to be a simple building block for creating an input.
   * It contains a load of style reset and some state logic.
   */


  const InputBase = /*#__PURE__*/React__namespace.forwardRef(function InputBase(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiInputBase'
    });

    const {
      'aria-describedby': ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = 'input',
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      startAdornment,
      type = 'text',
      value: valueProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1k);

    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React__namespace.useRef(value != null);
    const inputRef = React__namespace.useRef();
    const handleInputRefWarning = React__namespace.useCallback(instance => {
      {
        if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
          console.error(['MUI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
        }
      }
    }, []);
    const handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
    const handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
    const handleInputRef = useForkRef(inputRef, handleInputRefProp);
    const [focused, setFocused] = React__namespace.useState(false);
    const muiFormControl = useFormControl();

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }

        return undefined;
      }, [muiFormControl]);
    }

    const fcs = formControlState({
      props,
      muiFormControl,
      states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
    // We need to book keep the focused state manually.

    React__namespace.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);

        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React__namespace.useCallback(obj => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect$1(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);

    const handleFocus = event => {
      // Fix a bug with IE11 where the focus/blur events are triggered
      // while the component is disabled.
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }

      if (onFocus) {
        onFocus(event);
      }

      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }

      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };

    const handleBlur = event => {
      if (onBlur) {
        onBlur(event);
      }

      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }

      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };

    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;

        if (element == null) {
          throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
        }

        checkDirty({
          value: element.value
        });
      }

      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      } // Perform in the willUpdate


      if (onChange) {
        onChange(event, ...args);
      }
    }; // Check the input state on mount, in case it was filled by the user
    // or auto filled by the browser before the hydration (for SSR).


    React__namespace.useEffect(() => {
      checkDirty(inputRef.current); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const handleClick = event => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }

      if (onClick) {
        onClick(event);
      }
    };

    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;

    if (multiline && InputComponent === 'input') {
      if (rows) {
        {
          if (minRows || maxRows) {
            console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
          }
        }

        inputProps = _extends({
          type: undefined,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: undefined,
          maxRows,
          minRows
        }, inputProps);
      }

      InputComponent = TextareaAutosize$1;
    }

    const handleAutoFill = event => {
      // Provide a fake value as Chrome might not let you access it for security reasons.
      checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
        value: 'x'
      });
    };

    React__namespace.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);

    const ownerState = _extends({}, props, {
      color: fcs.color || 'primary',
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });

    const classes = useUtilityClasses$15(ownerState);
    const Root = components.Root || InputBaseRoot;
    const rootProps = componentsProps.root || {};
    const Input = components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, componentsProps.input);
    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [inputGlobalStyles, /*#__PURE__*/jsxRuntime_2(Root, _extends({}, rootProps, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref: ref,
        onClick: handleClick
      }, other, {
        className: clsx(classes.root, rootProps.className, className),
        children: [startAdornment, /*#__PURE__*/jsxRuntime_1(FormControlContext$1.Provider, {
          value: null,
          children: /*#__PURE__*/jsxRuntime_1(Input, _extends({
            ownerState: ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete: autoComplete,
            autoFocus: autoFocus,
            defaultValue: defaultValue,
            disabled: fcs.disabled,
            id: id,
            onAnimationStart: handleAutoFill,
            name: name,
            placeholder: placeholder,
            readOnly: readOnly,
            required: fcs.required,
            rows: rows,
            value: value,
            onKeyDown: onKeyDown,
            onKeyUp: onKeyUp,
            type: type
          }, inputProps, !isHostComponent(Input) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx(classes.input, inputProps.className),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  InputBase.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    'aria-describedby': propTypes.string,

    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: propTypes.string,

    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Input: propTypes.elementType,
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: propTypes.bool,

    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: propTypes.node,

    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: propTypes.bool,

    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef$1,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: propTypes.oneOf(['dense', 'none']),

    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: propTypes.bool,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: propTypes.func,

    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * @ignore
     */
    onKeyUp: propTypes.func,

    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: propTypes.string,

    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: propTypes.bool,

    /**
     * @ignore
     */
    renderSuffix: propTypes.func,

    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: propTypes.bool,

    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * The size of the component.
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: propTypes.string,

    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: propTypes.any
  } ;
  var InputBase$1 = InputBase;

  const _excluded$1j = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "type"];

  const useUtilityClasses$14 = ownerState => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ['root', !disableUnderline && 'underline'],
      input: ['input']
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const FilledInputRoot = styled$1(InputBaseRoot, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiFilledInput',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light = theme.palette.mode === 'light';
    const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
    return _extends({
      position: 'relative',
      backgroundColor,
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      '&:hover': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)',
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor
        }
      },
      [`&.${filledInputClasses$1.focused}`]: {
        backgroundColor
      },
      [`&.${filledInputClasses$1.disabled}`]: {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
      }
    }, !ownerState.disableUnderline && {
      '&:after': {
        borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: 'absolute',
        right: 0,
        transform: 'scaleX(0)',
        transition: theme.transitions.create('transform', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: 'none' // Transparent to the hover style.

      },
      [`&.${filledInputClasses$1.focused}:after`]: {
        transform: 'scaleX(1)'
      },
      [`&.${filledInputClasses$1.error}:after`]: {
        borderBottomColor: theme.palette.error.main,
        transform: 'scaleX(1)' // error is always underlined in red

      },
      '&:before': {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: 'absolute',
        right: 0,
        transition: theme.transitions.create('border-bottom-color', {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: 'none' // Transparent to the hover style.

      },
      [`&:hover:not(.${filledInputClasses$1.disabled}):before`]: {
        borderBottom: `1px solid ${theme.palette.text.primary}`
      },
      [`&.${filledInputClasses$1.disabled}:before`]: {
        borderBottomStyle: 'dotted'
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: '25px 12px 8px'
    }, ownerState.size === 'small' && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }));
  });
  const FilledInputInput = styled$1(InputBaseComponent, {
    name: 'MuiFilledInput',
    slot: 'Input',
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12,
    '&:-webkit-autofill': {
      WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
      WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
      caretColor: theme.palette.mode === 'light' ? null : '#fff',
      borderTopLeftRadius: 'inherit',
      borderTopRightRadius: 'inherit'
    }
  }, ownerState.size === 'small' && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === 'small' && {
    paddingTop: 8,
    paddingBottom: 9
  }));
  const FilledInput = /*#__PURE__*/React__namespace.forwardRef(function FilledInput(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFilledInput'
    });

    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = 'input',
      multiline = false,
      type = 'text'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1j);

    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });

    const classes = useUtilityClasses$14(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    return /*#__PURE__*/jsxRuntime_1(InputBase$1, _extends({
      components: _extends({
        Root: FilledInputRoot,
        Input: FilledInputInput
      }, components),
      componentsProps: componentsProps,
      fullWidth: fullWidth,
      inputComponent: inputComponent,
      multiline: multiline,
      ref: ref,
      type: type
    }, other, {
      classes: classes
    }));
  });
  FilledInput.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: propTypes.string,

    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary']), propTypes.string]),

    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Input: propTypes.elementType,
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: propTypes.bool,

    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: propTypes.node,

    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: propTypes.bool,

    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: propTypes.bool,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: propTypes.elementType,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: propTypes.oneOf(['dense', 'none']),

    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: propTypes.bool,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: propTypes.string,

    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: propTypes.bool,

    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: propTypes.bool,

    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: propTypes.string,

    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: propTypes.any
  } ;
  FilledInput.muiName = 'Input';
  var FilledInput$1 = FilledInput;

  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass('MuiFormControl', slot);
  }
  const formControlClasses = generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);
  var formControlClasses$1 = formControlClasses;

  const _excluded$1i = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];

  const useUtilityClasses$13 = ownerState => {
    const {
      classes,
      margin,
      fullWidth
    } = ownerState;
    const slots = {
      root: ['root', margin !== 'none' && `margin${capitalize(margin)}`, fullWidth && 'fullWidth']
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };

  const FormControlRoot = styled$1('div', {
    name: 'MuiFormControl',
    slot: 'Root',
    overridesResolver: ({
      ownerState
    }, styles) => {
      return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: 'inline-flex',
    flexDirection: 'column',
    position: 'relative',
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: 'top'
  }, ownerState.margin === 'normal' && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === 'dense' && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: '100%'
  }));
  /**
   * Provides context such as filled/focused/error/required for form inputs.
   * Relying on the context provides high flexibility and ensures that the state always stays
   * consistent across the children of the `FormControl`.
   * This context is used by the following components:
   *
   *  - FormLabel
   *  - FormHelperText
   *  - Input
   *  - InputLabel
   *
   * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
   *
   * ```jsx
   * <FormControl>
   *   <InputLabel htmlFor="my-input">Email address</InputLabel>
   *   <Input id="my-input" aria-describedby="my-helper-text" />
   *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
   * </FormControl>
   * ```
   *
   * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.
   * For instance, only one input can be focused at the same time, the state shouldn't be shared.
   */

  const FormControl = /*#__PURE__*/React__namespace.forwardRef(function FormControl(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFormControl'
    });

    const {
      children,
      className,
      color = 'primary',
      component = 'div',
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin = 'none',
      required = false,
      size = 'medium',
      variant = 'outlined'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1i);

    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin,
      required,
      size,
      variant
    });

    const classes = useUtilityClasses$13(ownerState);
    const [adornedStart, setAdornedStart] = React__namespace.useState(() => {
      // We need to iterate through the children and find the Input in order
      // to fully support server-side rendering.
      let initialAdornedStart = false;

      if (children) {
        React__namespace.Children.forEach(children, child => {
          if (!isMuiElement(child, ['Input', 'Select'])) {
            return;
          }

          const input = isMuiElement(child, ['Select']) ? child.props.input : child;

          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }

      return initialAdornedStart;
    });
    const [filled, setFilled] = React__namespace.useState(() => {
      // We need to iterate through the children and find the Input in order
      // to fully support server-side rendering.
      let initialFilled = false;

      if (children) {
        React__namespace.Children.forEach(children, child => {
          if (!isMuiElement(child, ['Input', 'Select'])) {
            return;
          }

          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }

      return initialFilled;
    });
    const [focusedState, setFocused] = React__namespace.useState(false);

    if (disabled && focusedState) {
      setFocused(false);
    }

    const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
    let registerEffect;

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const registeredInput = React__namespace.useRef(false);

      registerEffect = () => {
        if (registeredInput.current) {
          console.error(['MUI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\n'));
        }

        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }

    const onFilled = React__namespace.useCallback(() => {
      setFilled(true);
    }, []);
    const onEmpty = React__namespace.useCallback(() => {
      setFilled(false);
    }, []);
    const childContext = {
      adornedStart,
      setAdornedStart,
      color,
      disabled,
      error,
      filled,
      focused,
      fullWidth,
      hiddenLabel,
      size,
      onBlur: () => {
        setFocused(false);
      },
      onEmpty,
      onFilled,
      onFocus: () => {
        setFocused(true);
      },
      registerEffect,
      required,
      variant
    };
    return /*#__PURE__*/jsxRuntime_1(FormControlContext$1.Provider, {
      value: childContext,
      children: /*#__PURE__*/jsxRuntime_1(FormControlRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: children
      }))
    });
  });
  FormControl.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: propTypes.bool,

    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: propTypes.bool,

    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: propTypes.bool,

    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: propTypes.oneOf(['dense', 'none', 'normal']),

    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: propTypes.bool,

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  var FormControl$1 = FormControl;

  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass('MuiFormControlLabel', slot);
  }
  const formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label']);
  var formControlLabelClasses$1 = formControlLabelClasses;

  const _excluded$1h = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "value"];

  const useUtilityClasses$12 = ownerState => {
    const {
      classes,
      disabled,
      labelPlacement
    } = ownerState;
    const slots = {
      root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`],
      label: ['label', disabled && 'disabled']
    };
    return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
  };

  const FormControlLabelRoot = styled$1('label', {
    name: 'MuiFormControlLabel',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses$1.label}`]: styles.label
      }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'inline-flex',
    alignItems: 'center',
    cursor: 'pointer',
    // For correct alignment with the text.
    verticalAlign: 'middle',
    WebkitTapHighlightColor: 'transparent',
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses$1.disabled}`]: {
      cursor: 'default'
    }
  }, ownerState.labelPlacement === 'start' && {
    flexDirection: 'row-reverse',
    marginLeft: 16,
    // used for row presentation of radio/checkbox
    marginRight: -11
  }, ownerState.labelPlacement === 'top' && {
    flexDirection: 'column-reverse',
    marginLeft: 16
  }, ownerState.labelPlacement === 'bottom' && {
    flexDirection: 'column',
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses$1.label}`]: {
      [`&.${formControlLabelClasses$1.disabled}`]: {
        color: theme.palette.text.disabled
      }
    }
  }));
  /**
   * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
   * Use this component if you want to display an extra label.
   */

  const FormControlLabel = /*#__PURE__*/React__namespace.forwardRef(function FormControlLabel(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFormControlLabel'
    });

    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label,
      labelPlacement = 'end'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1h);

    const muiFormControl = useFormControl();
    let disabled = disabledProp;

    if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
      disabled = control.props.disabled;
    }

    if (typeof disabled === 'undefined' && muiFormControl) {
      disabled = muiFormControl.disabled;
    }

    const controlProps = {
      disabled
    };
    ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
      if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
        controlProps[key] = props[key];
      }
    });

    const ownerState = _extends({}, props, {
      disabled,
      label,
      labelPlacement
    });

    const classes = useUtilityClasses$12(ownerState);
    return /*#__PURE__*/jsxRuntime_2(FormControlLabelRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: [/*#__PURE__*/React__namespace.cloneElement(control, controlProps), label.type === Typography$1 || disableTypography ? label : /*#__PURE__*/jsxRuntime_1(Typography$1, _extends({
        component: "span",
        className: classes.label
      }, componentsProps.typography, {
        children: label
      }))]
    }));
  });
  FormControlLabel.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the component appears selected.
     */
    checked: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: propTypes.element.isRequired,

    /**
     * If `true`, the control is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: propTypes.bool,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: propTypes.oneOfType([propTypes.element, propTypes.number, propTypes.string]).isRequired,

    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: propTypes.oneOf(['bottom', 'end', 'start', 'top']),

    /**
     * @ignore
     */
    name: propTypes.string,

    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: propTypes.func,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the component.
     */
    value: propTypes.any
  } ;
  var FormControlLabel$1 = FormControlLabel;

  function getFormGroupUtilityClass(slot) {
    return generateUtilityClass('MuiFormGroup', slot);
  }
  const formGroupClasses = generateUtilityClasses('MuiFormGroup', ['root', 'row']);
  var formGroupClasses$1 = formGroupClasses;

  const _excluded$1g = ["className", "row"];

  const useUtilityClasses$11 = ownerState => {
    const {
      classes,
      row
    } = ownerState;
    const slots = {
      root: ['root', row && 'row']
    };
    return composeClasses(slots, getFormGroupUtilityClass, classes);
  };

  const FormGroupRoot = styled$1('div', {
    name: 'MuiFormGroup',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.row && styles.row];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex',
    flexDirection: 'column',
    flexWrap: 'wrap'
  }, ownerState.row && {
    flexDirection: 'row'
  }));
  /**
   * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
   * It provides compact row layout.
   * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
   */

  const FormGroup = /*#__PURE__*/React__namespace.forwardRef(function FormGroup(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFormGroup'
    });

    const {
      className,
      row = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1g);

    const ownerState = _extends({}, props, {
      row
    });

    const classes = useUtilityClasses$11(ownerState);
    return /*#__PURE__*/jsxRuntime_1(FormGroupRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  FormGroup.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Display group of elements in a compact row.
     * @default false
     */
    row: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var FormGroup$1 = FormGroup;

  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass('MuiFormHelperText', slot);
  }
  const formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);
  var formHelperTextClasses$1 = formHelperTextClasses;

  const _excluded$1f = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];

  const useUtilityClasses$10 = ownerState => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };

  const FormHelperTextRoot = styled$1('p', {
    name: 'MuiFormHelperText',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, theme.typography.caption, {
    textAlign: 'left',
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses$1.disabled}`]: {
      color: theme.palette.text.disabled
    },
    [`&.${formHelperTextClasses$1.error}`]: {
      color: theme.palette.error.main
    }
  }, ownerState.size === 'small' && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  const FormHelperText = /*#__PURE__*/React__namespace.forwardRef(function FormHelperText(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFormHelperText'
    });

    const {
      children,
      className,
      component = 'p'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1f);

    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
    });

    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });

    const classes = useUtilityClasses$10(ownerState);
    return /*#__PURE__*/jsxRuntime_1(FormHelperTextRoot, _extends({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: children === ' ' ?
      /*#__PURE__*/
      // notranslate needed while Google Translate will not fix zero-width space issue
      // eslint-disable-next-line react/no-danger
      jsxRuntime_1("span", {
        className: "notranslate",
        dangerouslySetInnerHTML: {
          __html: '&#8203;'
        }
      }) : children
    }));
  });
  FormHelperText.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: propTypes.bool,

    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: propTypes.bool,

    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: propTypes.bool,

    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: propTypes.oneOf(['dense']),

    /**
     * If `true`, the helper text should use required classes key.
     */
    required: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  var FormHelperText$1 = FormHelperText;

  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass('MuiFormLabel', slot);
  }
  const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
  var formLabelClasses$1 = formLabelClasses;

  const _excluded$1e = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];

  const useUtilityClasses$$ = ownerState => {
    const {
      classes,
      color,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
      asterisk: ['asterisk', error && 'error']
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };

  const FormLabelRoot = styled$1('label', {
    name: 'MuiFormLabel',
    slot: 'Root',
    overridesResolver: ({
      ownerState
    }, styles) => {
      return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: '1.4375em',
    padding: 0,
    position: 'relative',
    [`&.${formLabelClasses$1.focused}`]: {
      color: theme.palette[ownerState.color].main
    },
    [`&.${formLabelClasses$1.disabled}`]: {
      color: theme.palette.text.disabled
    },
    [`&.${formLabelClasses$1.error}`]: {
      color: theme.palette.error.main
    }
  }));
  const AsteriskComponent = styled$1('span', {
    name: 'MuiFormLabel',
    slot: 'Asterisk',
    overridesResolver: (props, styles) => styles.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses$1.error}`]: {
      color: theme.palette.error.main
    }
  }));
  const FormLabel = /*#__PURE__*/React__namespace.forwardRef(function FormLabel(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiFormLabel'
    });

    const {
      children,
      className,
      component = 'label'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1e);

    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
    });

    const ownerState = _extends({}, props, {
      color: fcs.color || 'primary',
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });

    const classes = useUtilityClasses$$(ownerState);
    return /*#__PURE__*/jsxRuntime_2(FormLabelRoot, _extends({
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: [children, fcs.required && /*#__PURE__*/jsxRuntime_2(AsteriskComponent, {
        ownerState: ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", '*']
      })]
    }));
  });
  FormLabel.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the label is displayed in an error state.
     */
    error: propTypes.bool,

    /**
     * If `true`, the label should use filled classes key.
     */
    filled: propTypes.bool,

    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: propTypes.bool,

    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var FormLabel$1 = FormLabel;

  /**
   * @ignore - internal component.
   */

  const GridContext = /*#__PURE__*/React__namespace.createContext();

  {
    GridContext.displayName = 'GridContext';
  }

  var GridContext$1 = GridContext;

  function getGridUtilityClass(slot) {
    return generateUtilityClass('MuiGrid', slot);
  }
  const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
  const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
  const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  const gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth', // spacings
  ...SPACINGS.map(spacing => `spacing-xs-${spacing}`), // direction values
  ...DIRECTIONS.map(direction => `direction-xs-${direction}`), // wrap values
  ...WRAPS.map(wrap => `wrap-xs-${wrap}`), // grid sizes for all breakpoints
  ...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);
  var gridClasses$1 = gridClasses;

  const _excluded$1d = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "lg", "md", "rowSpacing", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"];

  function getOffset(val) {
    const parse = parseFloat(val);
    return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
  }

  function generateGrid(globalStyles, theme, breakpoint, ownerState) {
    const size = ownerState[breakpoint];

    if (!size) {
      return;
    }

    let styles = {};

    if (size === true) {
      // For the auto layouting
      styles = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: '100%'
      };
    } else if (size === 'auto') {
      styles = {
        flexBasis: 'auto',
        flexGrow: 0,
        flexShrink: 0,
        maxWidth: 'none',
        width: 'auto'
      };
    } else {
      const columnsBreakpointValues = resolveBreakpointValues({
        values: ownerState.columns,
        breakpoints: theme.breakpoints.values
      });
      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues; // Keep 7 significant numbers.

      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;
      let more = {};

      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
        const themeSpacing = theme.spacing(ownerState.columnSpacing);

        if (themeSpacing !== '0px') {
          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
          more = {
            flexBasis: fullWidth,
            maxWidth: fullWidth
          };
        }
      } // Close to the bootstrap implementation:
      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41


      styles = _extends({
        flexBasis: width,
        flexGrow: 0,
        maxWidth: width
      }, more);
    } // No need for a media query for the first size.


    if (theme.breakpoints.values[breakpoint] === 0) {
      Object.assign(globalStyles, styles);
    } else {
      globalStyles[theme.breakpoints.up(breakpoint)] = styles;
    }
  }

  function generateDirection({
    theme,
    ownerState
  }) {
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    });
    return handleBreakpoints({
      theme
    }, directionValues, propValue => {
      const output = {
        flexDirection: propValue
      };

      if (propValue.indexOf('column') === 0) {
        output[`& > .${gridClasses$1.item}`] = {
          maxWidth: 'none'
        };
      }

      return output;
    });
  }
  function generateRowGap({
    theme,
    ownerState
  }) {
    const {
      container,
      rowSpacing
    } = ownerState;
    let styles = {};

    if (container && rowSpacing !== 0) {
      const rowSpacingValues = resolveBreakpointValues({
        values: rowSpacing,
        breakpoints: theme.breakpoints.values
      });
      styles = handleBreakpoints({
        theme
      }, rowSpacingValues, propValue => {
        const themeSpacing = theme.spacing(propValue);

        if (themeSpacing !== '0px') {
          return {
            marginTop: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses$1.item}`]: {
              paddingTop: getOffset(themeSpacing)
            }
          };
        }

        return {};
      });
    }

    return styles;
  }
  function generateColumnGap({
    theme,
    ownerState
  }) {
    const {
      container,
      columnSpacing
    } = ownerState;
    let styles = {};

    if (container && columnSpacing !== 0) {
      const columnSpacingValues = resolveBreakpointValues({
        values: columnSpacing,
        breakpoints: theme.breakpoints.values
      });
      styles = handleBreakpoints({
        theme
      }, columnSpacingValues, propValue => {
        const themeSpacing = theme.spacing(propValue);

        if (themeSpacing !== '0px') {
          return {
            width: `calc(100% + ${getOffset(themeSpacing)})`,
            marginLeft: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses$1.item}`]: {
              paddingLeft: getOffset(themeSpacing)
            }
          };
        }

        return {};
      });
    }

    return styles;
  } // Default CSS values
  // flex: '0 1 auto',
  // flexDirection: 'row',
  // alignItems: 'flex-start',
  // flexWrap: 'nowrap',
  // justifyContent: 'flex-start',

  const GridRoot = styled$1('div', {
    name: 'MuiGrid',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        container,
        direction,
        item,
        lg,
        md,
        sm,
        spacing,
        wrap,
        xl,
        xs,
        zeroMinWidth
      } = props.ownerState;
      return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, container && spacing !== 0 && styles[`spacing-xs-${String(spacing)}`], direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    boxSizing: 'border-box'
  }, ownerState.container && {
    display: 'flex',
    flexWrap: 'wrap',
    width: '100%'
  }, ownerState.item && {
    margin: 0 // For instance, it's useful when used with a `figure` element.

  }, ownerState.zeroMinWidth && {
    minWidth: 0
  }, ownerState.wrap === 'nowrap' && {
    flexWrap: 'nowrap'
  }, ownerState.wrap === 'reverse' && {
    flexWrap: 'wrap-reverse'
  }), generateDirection, generateRowGap, generateColumnGap, ({
    theme,
    ownerState
  }) => theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
    // Use side effect over immutability for better performance.
    generateGrid(globalStyles, theme, breakpoint, ownerState);
    return globalStyles;
  }, {}));

  const useUtilityClasses$_ = ownerState => {
    const {
      classes,
      container,
      direction,
      item,
      lg,
      md,
      sm,
      spacing,
      wrap,
      xl,
      xs,
      zeroMinWidth
    } = ownerState;
    const slots = {
      root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', container && spacing !== 0 && `spacing-xs-${String(spacing)}`, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]
    };
    return composeClasses(slots, getGridUtilityClass, classes);
  };

  const Grid = /*#__PURE__*/React__namespace.forwardRef(function Grid(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: 'MuiGrid'
    });
    const props = extendSxProp(themeProps);

    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = 'div',
      container = false,
      direction = 'row',
      item = false,
      lg = false,
      md = false,
      rowSpacing: rowSpacingProp,
      sm = false,
      spacing = 0,
      wrap = 'wrap',
      xl = false,
      xs = false,
      zeroMinWidth = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1d);

    const rowSpacing = rowSpacingProp || spacing;
    const columnSpacing = columnSpacingProp || spacing;
    const columnsContext = React__namespace.useContext(GridContext$1); // setting prop before context to accomodate nesting
    // colums set with default breakpoint unit of 12

    const columns = columnsProp || columnsContext || 12;

    const ownerState = _extends({}, props, {
      columns,
      container,
      direction,
      item,
      lg,
      md,
      sm,
      rowSpacing,
      columnSpacing,
      wrap,
      xl,
      xs,
      zeroMinWidth
    });

    const classes = useUtilityClasses$_(ownerState);

    const wrapChild = element => columns !== 12 ? /*#__PURE__*/jsxRuntime_1(GridContext$1.Provider, {
      value: columns,
      children: element
    }) : element;

    return wrapChild( /*#__PURE__*/jsxRuntime_1(GridRoot, _extends({
      ownerState: ownerState,
      className: clsx(classes.root, className),
      as: component,
      ref: ref
    }, other)));
  });
  Grid.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The number of columns.
     * @default 12
     */
    columns: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number, propTypes.object]),

    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.string])), propTypes.number, propTypes.object, propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: propTypes.bool,

    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: propTypes.oneOfType([propTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), propTypes.arrayOf(propTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), propTypes.object]),

    /**
     * If `true`, the component will have the flex *item* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    item: propTypes.bool,

    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.bool]),

    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.bool]),

    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.string])), propTypes.number, propTypes.object, propTypes.string]),

    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.bool]),

    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.string])), propTypes.number, propTypes.object, propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: propTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),

    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.bool]),

    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.bool]),

    /**
     * If `true`, it sets `min-width: 0` on the item.
     * Refer to the limitations section of the documentation to better understand the use case.
     * @default false
     */
    zeroMinWidth: propTypes.bool
  } ;

  {
    const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat

    Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {
      direction: requireProp('container'),
      lg: requireProp('item'),
      md: requireProp('item'),
      sm: requireProp('item'),
      spacing: requireProp('container'),
      wrap: requireProp('container'),
      xs: requireProp('item'),
      zeroMinWidth: requireProp('item')
    });
  }

  var Grid$1 = Grid;

  const _excluded$1c = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];

  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }

  const styles$2 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: 'none'
    }
  };
  /**
   * The Grow transition is used by the [Tooltip](/components/tooltips/) and
   * [Popover](/components/popover/) components.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  const Grow = /*#__PURE__*/React__namespace.forwardRef(function Grow(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout = 'auto',
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1c);

    const timer = React__namespace.useRef();
    const autoTimeout = React__namespace.useRef();
    const theme = useTheme();
    const nodeRef = React__namespace.useRef(null);
    const foreignRef = useForkRef(children.ref, ref);
    const handleRef = useForkRef(nodeRef, foreignRef);

    const normalizedTransitionCallback = callback => maybeIsAppearing => {
      if (callback) {
        const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

        if (maybeIsAppearing === undefined) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };

    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      reflow(node); // So the animation always start from the start.

      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'enter'
      });
      let duration;

      if (timeout === 'auto') {
        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration;
      } else {
        duration = transitionDuration;
      }

      node.style.transition = [theme.transitions.create('opacity', {
        duration,
        delay
      }), theme.transitions.create('transform', {
        duration: duration * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(',');

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback(node => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'exit'
      });
      let duration;

      if (timeout === 'auto') {
        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration;
      } else {
        duration = transitionDuration;
      }

      node.style.transition = [theme.transitions.create('opacity', {
        duration,
        delay
      }), theme.transitions.create('transform', {
        duration: duration * 0.666,
        delay: delay || duration * 0.333,
        easing: transitionTimingFunction
      })].join(',');
      node.style.opacity = '0';
      node.style.transform = getScale(0.75);

      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);

    const handleAddEndListener = next => {
      if (timeout === 'auto') {
        timer.current = setTimeout(next, autoTimeout.current || 0);
      }

      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
      }
    };

    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      appear: appear,
      in: inProp,
      nodeRef: nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout === 'auto' ? null : timeout
    }, other, {
      children: (state, childProps) => {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$2[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Grow.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: propTypes.func,

    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: propTypes.bool,

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: propTypes.oneOfType([propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string
    }), propTypes.string]),

    /**
     * If `true`, the component will transition in.
     */
    in: propTypes.bool,

    /**
     * @ignore
     */
    onEnter: propTypes.func,

    /**
     * @ignore
     */
    onEntered: propTypes.func,

    /**
     * @ignore
     */
    onEntering: propTypes.func,

    /**
     * @ignore
     */
    onExit: propTypes.func,

    /**
     * @ignore
     */
    onExited: propTypes.func,

    /**
     * @ignore
     */
    onExiting: propTypes.func,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })])
  } ;
  Grow.muiSupportAuto = true;
  var Grow$1 = Grow;

  /**
   * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
   */

  function useMediaQuery(queryInput, options = {}) {
    const theme = useTheme$2(); // Wait for jsdom to support the match media feature.
    // All the browsers MUI support have this built-in.
    // This defensive check is here for simplicity.
    // Most of the time, the match media logic isn't central to people tests.

    const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
    const {
      defaultMatches = false,
      matchMedia = supportMatchMedia ? window.matchMedia : null,
      noSsr = false,
      ssrMatchMedia = null
    } = getThemeProps({
      name: 'MuiUseMediaQuery',
      props: options,
      theme
    });

    {
      if (typeof queryInput === 'function' && theme === null) {
        console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
      }
    }

    let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, '');
    const [match, setMatch] = React__namespace.useState(() => {
      if (noSsr && supportMatchMedia) {
        return matchMedia(query).matches;
      }

      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      } // Once the component is mounted, we rely on the
      // event listeners to return the correct matches value.


      return defaultMatches;
    });
    useEnhancedEffect$1(() => {
      let active = true;

      if (!supportMatchMedia) {
        return undefined;
      }

      const queryList = matchMedia(query);

      const updateMatch = () => {
        // Workaround Safari wrong implementation of matchMedia
        // TODO can we remove it?
        // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677
        if (active) {
          setMatch(queryList.matches);
        }
      };

      updateMatch();
      queryList.addListener(updateMatch);
      return () => {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia, supportMatchMedia]);

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useDebugValue({
        query,
        match
      });
    }

    return match;
  }

  const _excluded$1b = ["initialWidth", "width"];
  const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl']; // By default, returns true if screen width is the same or greater than the given breakpoint.

  const isWidthUp = (breakpoint, width, inclusive = true) => {
    if (inclusive) {
      return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);
    }

    return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);
  }; // By default, returns true if screen width is the same or less than the given breakpoint.

  const isWidthDown = (breakpoint, width, inclusive = false) => {
    if (inclusive) {
      return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);
    }

    return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);
  };

  const withWidth = (options = {}) => Component => {
    const {
      withTheme: withThemeOption = false,
      noSSR = false,
      initialWidth: initialWidthOption
    } = options;

    function WithWidth(props) {
      const contextTheme = useTheme();
      const theme = props.theme || contextTheme;

      const _getThemeProps = getThemeProps({
        theme,
        name: 'MuiWithWidth',
        props
      }),
            {
        initialWidth,
        width
      } = _getThemeProps,
            other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded$1b);

      const [mountedState, setMountedState] = React__namespace.useState(false);
      useEnhancedEffect$1(() => {
        setMountedState(true);
      }, []);
      /**
       * innerWidth |xs      sm      md      lg      xl
       *            |-------|-------|-------|-------|------>
       * width      |  xs   |  sm   |  md   |  lg   |  xl
       */

      const keys = theme.breakpoints.keys.slice().reverse();
      const widthComputed = keys.reduce((output, key) => {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const matches = useMediaQuery(theme.breakpoints.up(key));
        return !output && matches ? key : output;
      }, null);

      const more = _extends({
        width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
      }, withThemeOption ? {
        theme
      } : {}, other); // When rendering the component on the server,
      // we have no idea about the client browser screen width.
      // In order to prevent blinks and help the reconciliation of the React tree
      // we are not rendering the child component.
      //
      // An alternative is to use the `initialWidth` property.


      if (more.width === undefined) {
        return null;
      }

      return /*#__PURE__*/jsxRuntime_1(Component, _extends({}, more));
    }

    WithWidth.propTypes = {
      /**
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use a heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

      /**
       * @ignore
       */
      theme: propTypes.object,

      /**
       * Bypass the width calculation logic.
       */
      width: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
    } ;

    {
      WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;
    }

    hoistNonReactStatics_cjs(WithWidth, Component);
    return WithWidth;
  };

  var withWidth$1 = withWidth;

  /**
   * @ignore - internal component.
   */

  function HiddenJs(props) {
    const {
      children,
      only,
      width
    } = props;
    const theme = useTheme();
    let visible = true; // `only` check is faster to get out sooner if used.

    if (only) {
      if (Array.isArray(only)) {
        for (let i = 0; i < only.length; i += 1) {
          const breakpoint = only[i];

          if (width === breakpoint) {
            visible = false;
            break;
          }
        }
      } else if (only && width === only) {
        visible = false;
      }
    } // Allow `only` to be combined with other props. If already hidden, no need to check others.


    if (visible) {
      // determine visibility based on the smallest size up
      for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
        const breakpoint = theme.breakpoints.keys[i];
        const breakpointUp = props[`${breakpoint}Up`];
        const breakpointDown = props[`${breakpoint}Down`];

        if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {
          visible = false;
          break;
        }
      }
    }

    if (!visible) {
      return null;
    }

    return children;
  }

  HiddenJs.propTypes = {
    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     */
    implementation: propTypes.oneOf(['js', 'css']),

    /**
     * You can use this prop when choosing the `js` implementation with server-side rendering.
     *
     * As `window.innerWidth` is unavailable on the server,
     * we default to rendering an empty component during the first mount.
     * You might want to use a heuristic to approximate
     * the screen width of the client browser screen width.
     *
     * For instance, you could be using the user-agent or the client-hints.
     * https://caniuse.com/#search=client%20hint
     */
    initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

    /**
     * If `true`, screens this size and down are hidden.
     */
    lgDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    lgUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     */
    mdDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    mdUp: propTypes.bool,

    /**
     * Hide the given breakpoint(s).
     */
    only: propTypes.oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

    /**
     * If `true`, screens this size and down are hidden.
     */
    smDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    smUp: propTypes.bool,

    /**
     * @ignore
     * width prop provided by withWidth decorator.
     */
    width: propTypes.string.isRequired,

    /**
     * If `true`, screens this size and down are hidden.
     */
    xlDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    xlUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     */
    xsDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    xsUp: propTypes.bool
  };

  {
    HiddenJs.propTypes = exactProp(HiddenJs.propTypes);
  }

  var HiddenJs$1 = withWidth$1()(HiddenJs);

  function getHiddenCssUtilityClass(slot) {
    return generateUtilityClass('PrivateHiddenCss', slot);
  }
  generateUtilityClasses('PrivateHiddenCss', ['root', 'xlDown', 'xlUp', 'onlyXl', 'lgDown', 'lgUp', 'onlyLg', 'mdDown', 'mdUp', 'onlyMd', 'smDown', 'smUp', 'onlySm', 'xsDown', 'xsUp', 'onlyXs']);

  const _excluded$1a = ["children", "className", "only"];

  const useUtilityClasses$Z = ownerState => {
    const {
      classes,
      breakpoints
    } = ownerState;
    const slots = {
      root: ['root', ...breakpoints.map(({
        breakpoint,
        dir
      }) => {
        return dir === 'only' ? `${dir}${capitalize(breakpoint)}` : `${breakpoint}${capitalize(dir)}`;
      })]
    };
    return composeClasses(slots, getHiddenCssUtilityClass, classes);
  };

  const HiddenCssRoot = styled$1('div', {
    name: 'PrivateHiddenCss',
    slot: 'Root'
  })(({
    theme,
    ownerState
  }) => {
    const hidden = {
      display: 'none'
    };
    return _extends({}, ownerState.breakpoints.map(({
      breakpoint,
      dir
    }) => {
      if (dir === 'only') {
        return {
          [theme.breakpoints.only(breakpoint)]: hidden
        };
      }

      return dir === 'up' ? {
        [theme.breakpoints.up(breakpoint)]: hidden
      } : {
        [theme.breakpoints.down(breakpoint)]: hidden
      };
    }).reduce((r, o) => {
      Object.keys(o).forEach(k => {
        r[k] = o[k];
      });
      return r;
    }, {}));
  });
  /**
   * @ignore - internal component.
   */

  function HiddenCss(props) {
    const {
      children,
      className,
      only
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1a);

    const theme = useTheme();

    {
      const unknownProps = Object.keys(other).filter(propName => {
        const isUndeclaredBreakpoint = !theme.breakpoints.keys.some(breakpoint => {
          return `${breakpoint}Up` === propName || `${breakpoint}Down` === propName;
        });
        return !['classes', 'theme', 'isRtl', 'sx'].includes(propName) && isUndeclaredBreakpoint;
      });

      if (unknownProps.length > 0) {
        console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${unknownProps.join(', ')}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
      }
    }

    const breakpoints = [];

    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
      const breakpoint = theme.breakpoints.keys[i];
      const breakpointUp = other[`${breakpoint}Up`];
      const breakpointDown = other[`${breakpoint}Down`];

      if (breakpointUp) {
        breakpoints.push({
          breakpoint,
          dir: 'up'
        });
      }

      if (breakpointDown) {
        breakpoints.push({
          breakpoint,
          dir: 'down'
        });
      }
    }

    if (only) {
      const onlyBreakpoints = Array.isArray(only) ? only : [only];
      onlyBreakpoints.forEach(breakpoint => {
        breakpoints.push({
          breakpoint,
          dir: 'only'
        });
      });
    }

    const ownerState = _extends({}, props, {
      breakpoints
    });

    const classes = useUtilityClasses$Z(ownerState);
    return /*#__PURE__*/jsxRuntime_1(HiddenCssRoot, {
      className: clsx(classes.root, className),
      ownerState: ownerState,
      children: children
    });
  }

  HiddenCss.propTypes = {
    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     */
    implementation: propTypes.oneOf(['js', 'css']),

    /**
     * If `true`, screens this size and down are hidden.
     */
    lgDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    lgUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     */
    mdDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    mdUp: propTypes.bool,

    /**
     * Hide the given breakpoint(s).
     */
    only: propTypes.oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

    /**
     * If `true`, screens this size and down are hidden.
     */
    smDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    smUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     */
    xlDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    xlUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     */
    xsDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     */
    xsUp: propTypes.bool
  } ;

  const _excluded$19 = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];

  function Hidden(props) {
    const {
      implementation = 'js',
      lgDown = false,
      lgUp = false,
      mdDown = false,
      mdUp = false,
      smDown = false,
      smUp = false,
      xlDown = false,
      xlUp = false,
      xsDown = false,
      xsUp = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$19);

    if (implementation === 'js') {
      return /*#__PURE__*/jsxRuntime_1(HiddenJs$1, _extends({
        lgDown: lgDown,
        lgUp: lgUp,
        mdDown: mdDown,
        mdUp: mdUp,
        smDown: smDown,
        smUp: smUp,
        xlDown: xlDown,
        xlUp: xlUp,
        xsDown: xsDown,
        xsUp: xsUp
      }, other));
    }

    return /*#__PURE__*/jsxRuntime_1(HiddenCss, _extends({
      lgDown: lgDown,
      lgUp: lgUp,
      mdDown: mdDown,
      mdUp: mdUp,
      smDown: smDown,
      smUp: smUp,
      xlDown: xlDown,
      xlUp: xlUp,
      xsDown: xsDown,
      xsUp: xsUp
    }, other));
  }

  Hidden.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     * @default 'js'
     */
    implementation: propTypes.oneOf(['css', 'js']),

    /**
     * You can use this prop when choosing the `js` implementation with server-side rendering.
     *
     * As `window.innerWidth` is unavailable on the server,
     * we default to rendering an empty component during the first mount.
     * You might want to use a heuristic to approximate
     * the screen width of the client browser screen width.
     *
     * For instance, you could be using the user-agent or the client-hints.
     * https://caniuse.com/#search=client%20hint
     */
    initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

    /**
     * If `true`, screens this size and down are hidden.
     * @default false
     */
    lgDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     * @default false
     */
    lgUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     * @default false
     */
    mdDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     * @default false
     */
    mdUp: propTypes.bool,

    /**
     * Hide the given breakpoint(s).
     */
    only: propTypes.oneOfType([propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']).isRequired)]),

    /**
     * If `true`, screens this size and down are hidden.
     * @default false
     */
    smDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     * @default false
     */
    smUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     * @default false
     */
    xlDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     * @default false
     */
    xlUp: propTypes.bool,

    /**
     * If `true`, screens this size and down are hidden.
     * @default false
     */
    xsDown: propTypes.bool,

    /**
     * If `true`, screens this size and up are hidden.
     * @default false
     */
    xsUp: propTypes.bool
  } ;

  function getIconUtilityClass(slot) {
    return generateUtilityClass('MuiIcon', slot);
  }
  const iconClasses = generateUtilityClasses('MuiIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);
  var iconClasses$1 = iconClasses;

  const _excluded$18 = ["baseClassName", "className", "color", "component", "fontSize"];

  const useUtilityClasses$Y = ownerState => {
    const {
      color,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
    };
    return composeClasses(slots, getIconUtilityClass, classes);
  };

  const IconRoot = styled$1('span', {
    name: 'MuiIcon',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => ({
    userSelect: 'none',
    width: '1em',
    height: '1em',
    // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
    // To remove at some point.
    overflow: 'hidden',
    display: 'inline-block',
    // allow overflow hidden to take action
    textAlign: 'center',
    // support non-square icon
    flexShrink: 0,
    fontSize: {
      inherit: 'inherit',
      small: theme.typography.pxToRem(20),
      medium: theme.typography.pxToRem(24),
      large: theme.typography.pxToRem(36)
    }[ownerState.fontSize],
    // TODO v5 deprecate, v6 remove for sx
    color: {
      primary: theme.palette.primary.main,
      secondary: theme.palette.secondary.main,
      info: theme.palette.info.main,
      success: theme.palette.success.main,
      warning: theme.palette.warning.main,
      action: theme.palette.action.active,
      error: theme.palette.error.main,
      disabled: theme.palette.action.disabled,
      inherit: undefined
    }[ownerState.color]
  }));
  const Icon = /*#__PURE__*/React__namespace.forwardRef(function Icon(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiIcon'
    });

    const {
      baseClassName = 'material-icons',
      className,
      color = 'inherit',
      component: Component = 'span',
      fontSize = 'medium'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$18);

    const ownerState = _extends({}, props, {
      baseClassName,
      color,
      component: Component,
      fontSize
    });

    const classes = useUtilityClasses$Y(ownerState);
    return /*#__PURE__*/jsxRuntime_1(IconRoot, _extends({
      as: Component,
      className: clsx(baseClassName, // Prevent the translation of the text content.
      // The font relies on the exact text content to render the icon.
      'notranslate', classes.root, className),
      ownerState: ownerState,
      "aria-hidden": true,
      ref: ref
    }, other));
  });
  Icon.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any
     * other base class that suits the icon font you're using (e.g. material-icons-rounded, fas, etc).
     * @default 'material-icons'
     */
    baseClassName: propTypes.string,

    /**
     * The name of the icon font ligature.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'inherit'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'large', 'medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  Icon.muiName = 'Icon';
  var Icon$1 = Icon;

  function getImageListUtilityClass(slot) {
    return generateUtilityClass('MuiImageList', slot);
  }
  const imageListClasses = generateUtilityClasses('MuiImageList', ['root', 'masonry', 'quilted', 'standard', 'woven']);
  var imageListClasses$1 = imageListClasses;

  /**
   * @ignore - internal component.
   * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
   */

  const ImageListContext = /*#__PURE__*/React__namespace.createContext({});

  {
    ImageListContext.displayName = 'ImageListContext';
  }

  var ImageListContext$1 = ImageListContext;

  const _excluded$17 = ["children", "className", "cols", "component", "rowHeight", "gap", "style", "variant"];

  const useUtilityClasses$X = ownerState => {
    const {
      classes,
      variant
    } = ownerState;
    const slots = {
      root: ['root', variant]
    };
    return composeClasses(slots, getImageListUtilityClass, classes);
  };

  const ImageListRoot = styled$1('ul', {
    name: 'MuiImageList',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant]];
    }
  })(({
    ownerState
  }) => {
    return _extends({
      display: 'grid',
      overflowY: 'auto',
      listStyle: 'none',
      padding: 0,
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: 'touch'
    }, ownerState.variant === 'masonry' && {
      display: 'block'
    });
  });
  const ImageList = /*#__PURE__*/React__namespace.forwardRef(function ImageList(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiImageList'
    });

    const {
      children,
      className,
      cols = 2,
      component = 'ul',
      rowHeight = 'auto',
      gap = 4,
      style: styleProp,
      variant = 'standard'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$17);

    const contextValue = React__namespace.useMemo(() => ({
      rowHeight,
      gap,
      variant
    }), [rowHeight, gap, variant]);
    React__namespace.useEffect(() => {
      {
        // Detect Internet Explorer 8+
        if (document !== undefined && 'objectFit' in document.documentElement.style === false) {
          console.error(['MUI: ImageList v5+ no longer natively supports Internet Explorer.', 'Use v4 of this component instead, or polyfill CSS object-fit.'].join('\n'));
        }
      }
    }, []);
    const style = variant === 'masonry' ? _extends({
      columnCount: cols,
      columnGap: gap
    }, styleProp) : _extends({
      gridTemplateColumns: `repeat(${cols}, 1fr)`,
      gap
    }, styleProp);

    const ownerState = _extends({}, props, {
      component,
      gap,
      rowHeight,
      variant
    });

    const classes = useUtilityClasses$X(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ImageListRoot, _extends({
      as: component,
      className: clsx(classes.root, classes[variant], className),
      ref: ref,
      style: style,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(ImageListContext$1.Provider, {
        value: contextValue,
        children: children
      })
    }));
  });
  ImageList.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally `ImageListItem`s.
     */
    children: propTypes
    /* @typescript-to-proptypes-ignore */
    .node.isRequired,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Number of columns.
     * @default 2
     */
    cols: integerPropType,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The gap between items in px.
     * @default 4
     */
    gap: propTypes.number,

    /**
     * The height of one row in px.
     * @default 'auto'
     */
    rowHeight: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number]),

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: propTypes.oneOf(['masonry', 'quilted', 'standard', 'woven'])
  } ;
  var ImageList$1 = ImageList;

  function getImageListItemUtilityClass(slot) {
    return generateUtilityClass('MuiImageListItem', slot);
  }
  const imageListItemClasses = generateUtilityClasses('MuiImageListItem', ['root', 'img', 'standard', 'woven', 'masonry', 'quilted']);
  var imageListItemClasses$1 = imageListItemClasses;

  const _excluded$16 = ["children", "className", "cols", "component", "rows", "style"];

  const useUtilityClasses$W = ownerState => {
    const {
      classes,
      variant
    } = ownerState;
    const slots = {
      root: ['root', variant],
      img: ['img']
    };
    return composeClasses(slots, getImageListItemUtilityClass, classes);
  };

  const ImageListItemRoot = styled$1('li', {
    name: 'MuiImageListItem',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${imageListItemClasses$1.img}`]: styles.img
      }, styles.root, styles[ownerState.variant]];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'inline-block',
    position: 'relative',
    lineHeight: 0
  }, ownerState.variant === 'standard' && {
    // For titlebar under list item
    display: 'flex',
    flexDirection: 'column'
  }, ownerState.variant === 'woven' && {
    height: '100%',
    alignSelf: 'center',
    '&:nth-of-type(even)': {
      height: '70%'
    }
  }, {
    [`& .${imageListItemClasses$1.img}`]: _extends({
      objectFit: 'cover',
      width: '100%',
      height: '100%'
    }, ownerState.variant === 'standard' && {
      height: 'auto',
      flexGrow: 1
    })
  }));
  const ImageListItem = /*#__PURE__*/React__namespace.forwardRef(function ImageListItem(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiImageListItem'
    }); // TODO: - Use jsdoc @default?: "cols rows default values are for docs only"

    const {
      children,
      className,
      cols = 1,
      component = 'li',
      rows = 1,
      style
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$16);

    const {
      rowHeight = 'auto',
      gap,
      variant
    } = React__namespace.useContext(ImageListContext$1);
    let height = 'auto';

    if (variant === 'woven') {
      height = undefined;
    } else if (rowHeight !== 'auto') {
      height = rowHeight * rows + gap * (rows - 1);
    }

    const ownerState = _extends({}, props, {
      cols,
      component,
      gap,
      rowHeight,
      rows,
      variant
    });

    const classes = useUtilityClasses$W(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ImageListItemRoot, _extends({
      as: component,
      className: clsx(classes.root, classes[variant], className),
      ref: ref,
      style: _extends({
        height,
        gridColumnEnd: variant !== 'masonry' ? `span ${cols}` : undefined,
        gridRowEnd: variant !== 'masonry' ? `span ${rows}` : undefined,
        marginBottom: variant === 'masonry' ? gap : undefined
      }, style),
      ownerState: ownerState
    }, other, {
      children: React__namespace.Children.map(children, child => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        {
          if (reactIs_2(child)) {
            console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        if (child.type === 'img' || isMuiElement(child, ['Image'])) {
          return /*#__PURE__*/React__namespace.cloneElement(child, {
            className: clsx(classes.img, child.props.className)
          });
        }

        return child;
      })
    }));
  });
  ImageListItem.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally an `<img>`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Width of the item in number of grid columns.
     * @default 1
     */
    cols: integerPropType,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Height of the item in number of grid rows.
     * @default 1
     */
    rows: integerPropType,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ImageListItem$1 = ImageListItem;

  function getImageListItemBarUtilityClass(slot) {
    return generateUtilityClass('MuiImageListItemBar', slot);
  }
  const imageListItemBarClasses = generateUtilityClasses('MuiImageListItemBar', ['root', 'positionBottom', 'positionTop', 'positionBelow', 'titleWrap', 'titleWrapBottom', 'titleWrapTop', 'titleWrapBelow', 'titleWrapActionPosLeft', 'titleWrapActionPosRight', 'title', 'subtitle', 'actionIcon', 'actionIconActionPosLeft', 'actionIconActionPosRight']);
  var imageListItemBarClasses$1 = imageListItemBarClasses;

  const _excluded$15 = ["actionIcon", "actionPosition", "className", "subtitle", "title", "position"];

  const useUtilityClasses$V = ownerState => {
    const {
      classes,
      position,
      actionIcon,
      actionPosition
    } = ownerState;
    const slots = {
      root: ['root', `position${capitalize(position)}`],
      titleWrap: ['titleWrap', `titleWrap${capitalize(position)}`, actionIcon && `titleWrapActionPos${capitalize(actionPosition)}`],
      title: ['title'],
      subtitle: ['subtitle'],
      actionIcon: ['actionIcon', `actionIconActionPos${capitalize(actionPosition)}`]
    };
    return composeClasses(slots, getImageListItemBarUtilityClass, classes);
  };

  const ImageListItemBarRoot = styled$1('div', {
    name: 'MuiImageListItemBar',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`position${capitalize(ownerState.position)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({
      position: 'absolute',
      left: 0,
      right: 0,
      background: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      fontFamily: theme.typography.fontFamily
    }, ownerState.position === 'bottom' && {
      bottom: 0
    }, ownerState.position === 'top' && {
      top: 0
    }, ownerState.position === 'below' && {
      position: 'relative',
      background: 'transparent',
      alignItems: 'normal'
    });
  });
  const ImageListItemBarTitleWrap = styled$1('div', {
    name: 'MuiImageListItemBar',
    slot: 'TitleWrap',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.titleWrap, styles[`titleWrap${capitalize(ownerState.position)}`], ownerState.actionIcon && styles[`titleWrapActionPos${capitalize(ownerState.actionPosition)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({
      flexGrow: 1,
      padding: '12px 16px',
      color: theme.palette.common.white,
      overflow: 'hidden'
    }, ownerState.position === 'below' && {
      padding: '6px 0 12px',
      color: 'inherit'
    }, ownerState.actionIcon && ownerState.actionPosition === 'left' && {
      paddingLeft: 0
    }, ownerState.actionIcon && ownerState.actionPosition === 'right' && {
      paddingRight: 0
    });
  });
  const ImageListItemBarTitle = styled$1('div', {
    name: 'MuiImageListItemBar',
    slot: 'Title',
    overridesResolver: (props, styles) => styles.title
  })(({
    theme
  }) => {
    return {
      fontSize: theme.typography.pxToRem(16),
      lineHeight: '24px',
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap'
    };
  });
  const ImageListItemBarSubtitle = styled$1('div', {
    name: 'MuiImageListItemBar',
    slot: 'Subtitle',
    overridesResolver: (props, styles) => styles.subtitle
  })(({
    theme
  }) => {
    return {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1,
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap'
    };
  });
  const ImageListItemBarActionIcon = styled$1('div', {
    name: 'MuiImageListItemBar',
    slot: 'ActionIcon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.actionIcon, styles[`actionIconActionPos${capitalize(ownerState.actionPosition)}`]];
    }
  })(({
    ownerState
  }) => {
    return _extends({}, ownerState.actionPosition === 'left' && {
      order: -1
    });
  });
  const ImageListItemBar = /*#__PURE__*/React__namespace.forwardRef(function ImageListItemBar(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiImageListItemBar'
    });

    const {
      actionIcon,
      actionPosition = 'right',
      className,
      subtitle,
      title,
      position = 'bottom'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$15);

    const ownerState = _extends({}, props, {
      position,
      actionPosition
    });

    const classes = useUtilityClasses$V(ownerState);
    return /*#__PURE__*/jsxRuntime_2(ImageListItemBarRoot, _extends({
      ownerState: ownerState,
      className: clsx(classes.root, className),
      ref: ref
    }, other, {
      children: [/*#__PURE__*/jsxRuntime_2(ImageListItemBarTitleWrap, {
        ownerState: ownerState,
        className: classes.titleWrap,
        children: [/*#__PURE__*/jsxRuntime_1(ImageListItemBarTitle, {
          className: classes.title,
          children: title
        }), subtitle ? /*#__PURE__*/jsxRuntime_1(ImageListItemBarSubtitle, {
          className: classes.subtitle,
          children: subtitle
        }) : null]
      }), actionIcon ? /*#__PURE__*/jsxRuntime_1(ImageListItemBarActionIcon, {
        ownerState: ownerState,
        className: classes.actionIcon,
        children: actionIcon
      }) : null]
    }));
  });
  ImageListItemBar.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * An IconButton element to be used as secondary action target
     * (primary action target is the item itself).
     */
    actionIcon: propTypes.node,

    /**
     * Position of secondary action IconButton.
     * @default 'right'
     */
    actionPosition: propTypes.oneOf(['left', 'right']),

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Position of the title bar.
     * @default 'bottom'
     */
    position: propTypes.oneOf(['below', 'bottom', 'top']),

    /**
     * String or element serving as subtitle (support text).
     */
    subtitle: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Title to be displayed.
     */
    title: propTypes.node
  } ;
  var ImageListItemBar$1 = ImageListItemBar;

  const _excluded$14 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "type"];

  const useUtilityClasses$U = ownerState => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ['root', !disableUnderline && 'underline'],
      input: ['input']
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const InputRoot = styled$1(InputBaseRoot, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiInput',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light = theme.palette.mode === 'light';
    const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    return _extends({
      position: 'relative'
    }, ownerState.formControl && {
      'label + &': {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      '&:after': {
        borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: 'absolute',
        right: 0,
        transform: 'scaleX(0)',
        transition: theme.transitions.create('transform', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: 'none' // Transparent to the hover style.

      },
      [`&.${inputClasses$1.focused}:after`]: {
        transform: 'scaleX(1)'
      },
      [`&.${inputClasses$1.error}:after`]: {
        borderBottomColor: theme.palette.error.main,
        transform: 'scaleX(1)' // error is always underlined in red

      },
      '&:before': {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: 'absolute',
        right: 0,
        transition: theme.transitions.create('border-bottom-color', {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: 'none' // Transparent to the hover style.

      },
      [`&:hover:not(.${inputClasses$1.disabled}):before`]: {
        borderBottom: `2px solid ${theme.palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses$1.disabled}:before`]: {
        borderBottomStyle: 'dotted'
      }
    });
  });
  const InputInput = styled$1(InputBaseComponent, {
    name: 'MuiInput',
    slot: 'Input',
    overridesResolver: inputOverridesResolver
  })({});
  const Input = /*#__PURE__*/React__namespace.forwardRef(function Input(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiInput'
    });

    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = 'input',
      multiline = false,
      type = 'text'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$14);

    const classes = useUtilityClasses$U(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    return /*#__PURE__*/jsxRuntime_1(InputBase$1, _extends({
      components: _extends({
        Root: InputRoot,
        Input: InputInput
      }, components),
      componentsProps: componentsProps,
      fullWidth: fullWidth,
      inputComponent: inputComponent,
      multiline: multiline,
      ref: ref,
      type: type
    }, other, {
      classes: classes
    }));
  });
  Input.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: propTypes.string,

    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary']), propTypes.string]),

    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Input: propTypes.elementType,
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: propTypes.bool,

    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: propTypes.node,

    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: propTypes.bool,

    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: propTypes.elementType,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: propTypes.oneOf(['dense', 'none']),

    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: propTypes.bool,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: propTypes.string,

    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: propTypes.bool,

    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: propTypes.bool,

    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: propTypes.string,

    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: propTypes.any
  } ;
  Input.muiName = 'Input';
  var Input$1 = Input;

  function getInputAdornmentUtilityClass(slot) {
    return generateUtilityClass('MuiInputAdornment', slot);
  }
  const inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);
  var inputAdornmentClasses$1 = inputAdornmentClasses;

  const _excluded$13 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];

  const overridesResolver$4 = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];
  };

  const useUtilityClasses$T = ownerState => {
    const {
      classes,
      disablePointerEvents,
      hiddenLabel,
      position,
      size,
      variant
    } = ownerState;
    const slots = {
      root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]
    };
    return composeClasses(slots, getInputAdornmentUtilityClass, classes);
  };

  const InputAdornmentRoot = styled$1('div', {
    name: 'MuiInputAdornment',
    slot: 'Root',
    overridesResolver: overridesResolver$4
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'flex',
    height: '0.01em',
    // Fix IE11 flexbox alignment. To remove at some point.
    maxHeight: '2em',
    alignItems: 'center',
    whiteSpace: 'nowrap',
    color: theme.palette.action.active
  }, ownerState.variant === 'filled' && {
    // Styles applied to the root element if `variant="filled"`.
    [`&.${inputAdornmentClasses$1.positionStart}&:not(.${inputAdornmentClasses$1.hiddenLabel})`]: {
      marginTop: 16
    }
  }, ownerState.position === 'start' && {
    // Styles applied to the root element if `position="start"`.
    marginRight: 8
  }, ownerState.position === 'end' && {
    // Styles applied to the root element if `position="end"`.
    marginLeft: 8
  }, ownerState.disablePointerEvents === true && {
    // Styles applied to the root element if `disablePointerEvents={true}`.
    pointerEvents: 'none'
  }));
  const InputAdornment = /*#__PURE__*/React__namespace.forwardRef(function InputAdornment(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiInputAdornment'
    });

    const {
      children,
      className,
      component = 'div',
      disablePointerEvents = false,
      disableTypography = false,
      position,
      variant: variantProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$13);

    const muiFormControl = useFormControl() || {};
    let variant = variantProp;

    if (variantProp && muiFormControl.variant) {
      {
        if (variantProp === muiFormControl.variant) {
          console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
        }
      }
    }

    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }

    const ownerState = _extends({}, props, {
      hiddenLabel: muiFormControl.hiddenLabel,
      size: muiFormControl.size,
      disablePointerEvents,
      position,
      variant
    });

    const classes = useUtilityClasses$T(ownerState);
    return /*#__PURE__*/jsxRuntime_1(FormControlContext$1.Provider, {
      value: null,
      children: /*#__PURE__*/jsxRuntime_1(InputAdornmentRoot, _extends({
        as: component,
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/jsxRuntime_1(Typography$1, {
          color: "text.secondary",
          children: children
        }) : /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
          children: [position === 'start' ?
          /*#__PURE__*/

          /* notranslate needed while Google Translate will not fix zero-width space issue */

          /* eslint-disable-next-line react/no-danger */
          jsxRuntime_1("span", {
            className: "notranslate",
            dangerouslySetInnerHTML: {
              __html: '&#8203;'
            }
          }) : null, children]
        })
      }))
    });
  });
  InputAdornment.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally an `IconButton` or string.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Disable pointer events on the root.
     * This allows for the content of the adornment to focus the `input` on click.
     * @default false
     */
    disablePointerEvents: propTypes.bool,

    /**
     * If children is a string then disable wrapping in a Typography component.
     * @default false
     */
    disableTypography: propTypes.bool,

    /**
     * The position this adornment should appear relative to the `Input`.
     */
    position: propTypes.oneOf(['end', 'start']).isRequired,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * Note: If you are using the `TextField` component or the `FormControl` component
     * you do not have to set this manually.
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  var InputAdornment$1 = InputAdornment;

  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass('MuiInputLabel', slot);
  }
  const inputLabelClasses = generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);
  var inputLabelClasses$1 = inputLabelClasses;

  const _excluded$12 = ["disableAnimation", "margin", "shrink", "variant"];

  const useUtilityClasses$S = ownerState => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size === 'small' && 'sizeSmall', variant],
      asterisk: [required && 'asterisk']
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };

  const InputLabelRoot = styled$1(FormLabel$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiInputLabel',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses$1.asterisk}`]: styles.asterisk
      }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'block',
    transformOrigin: 'top left',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    maxWidth: '100%'
  }, ownerState.formControl && {
    position: 'absolute',
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: 'translate(0, 20px) scale(1)'
  }, ownerState.size === 'small' && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: 'translate(0, 17px) scale(1)'
  }, ownerState.shrink && {
    transform: 'translate(0, -1.5px) scale(0.75)',
    transformOrigin: 'top left',
    maxWidth: '133%'
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(['color', 'transform', 'max-width'], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === 'filled' && _extends({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: 'none',
    transform: 'translate(12px, 16px) scale(1)',
    maxWidth: 'calc(100% - 24px)'
  }, ownerState.size === 'small' && {
    transform: 'translate(12px, 13px) scale(1)'
  }, ownerState.shrink && _extends({
    transform: 'translate(12px, 7px) scale(0.75)',
    maxWidth: 'calc(133% - 24px)'
  }, ownerState.size === 'small' && {
    transform: 'translate(12px, 4px) scale(0.75)'
  })), ownerState.variant === 'outlined' && _extends({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: 'none',
    transform: 'translate(14px, 16px) scale(1)',
    maxWidth: 'calc(100% - 24px)'
  }, ownerState.size === 'small' && {
    transform: 'translate(14px, 9px) scale(1)'
  }, ownerState.shrink && {
    maxWidth: 'calc(133% - 24px)',
    transform: 'translate(14px, -9px) scale(0.75)'
  })));
  const InputLabel = /*#__PURE__*/React__namespace.forwardRef(function InputLabel(inProps, ref) {
    const props = useThemeProps({
      name: 'MuiInputLabel',
      props: inProps
    });

    const {
      disableAnimation = false,
      shrink: shrinkProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$12);

    const muiFormControl = useFormControl();
    let shrink = shrinkProp;

    if (typeof shrink === 'undefined' && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }

    const fcs = formControlState({
      props,
      muiFormControl,
      states: ['size', 'variant', 'required']
    });

    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required
    });

    const classes = useUtilityClasses$S(ownerState);
    return /*#__PURE__*/jsxRuntime_1(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState: ownerState,
      ref: ref
    }, other, {
      classes: classes
    }));
  });
  InputLabel.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), propTypes.string]),

    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the label is displayed in an error state.
     */
    error: propTypes.bool,

    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: propTypes.bool,

    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: propTypes.oneOf(['dense']),

    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: propTypes.bool,

    /**
     * If `true`, the label is shrunk.
     */
    shrink: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  var InputLabel$1 = InputLabel;

  function getLinearProgressUtilityClass(slot) {
    return generateUtilityClass('MuiLinearProgress', slot);
  }
  const linearProgressClasses = generateUtilityClasses('MuiLinearProgress', ['root', 'colorPrimary', 'colorSecondary', 'determinate', 'indeterminate', 'buffer', 'query', 'dashed', 'dashedColorPrimary', 'dashedColorSecondary', 'bar', 'barColorPrimary', 'barColorSecondary', 'bar1Indeterminate', 'bar1Determinate', 'bar1Buffer', 'bar2Indeterminate', 'bar2Buffer']);
  var linearProgressClasses$1 = linearProgressClasses;

  const _excluded$11 = ["className", "color", "value", "valueBuffer", "variant"];

  let _$1 = t => t,
      _t$1,
      _t2$1,
      _t3$1,
      _t4$1,
      _t5,
      _t6;
  const TRANSITION_DURATION = 4; // seconds

  const indeterminate1Keyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`));
  const indeterminate2Keyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`));
  const bufferKeyframe = keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`));

  const useUtilityClasses$R = ownerState => {
    const {
      classes,
      variant,
      color
    } = ownerState;
    const slots = {
      root: ['root', `color${capitalize(color)}`, variant],
      dashed: ['dashed', `dashedColor${capitalize(color)}`],
      bar1: ['bar', `barColor${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar1Indeterminate', variant === 'determinate' && 'bar1Determinate', variant === 'buffer' && 'bar1Buffer'],
      bar2: ['bar', variant !== 'buffer' && `barColor${capitalize(color)}`, variant === 'buffer' && `color${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar2Indeterminate', variant === 'buffer' && 'bar2Buffer']
    };
    return composeClasses(slots, getLinearProgressUtilityClass, classes);
  };

  const getColorShade = (theme, color) => {
    if (color === 'inherit') {
      return 'currentColor';
    }

    return theme.palette.mode === 'light' ? lighten(theme.palette[color].main, 0.62) : darken(theme.palette[color].main, 0.5);
  };

  const LinearProgressRoot = styled$1('span', {
    name: 'MuiLinearProgress',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`color${capitalize(ownerState.color)}`], styles[ownerState.variant]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    position: 'relative',
    overflow: 'hidden',
    display: 'block',
    height: 4,
    zIndex: 0,
    // Fix Safari's bug during composition of different paint.
    '@media print': {
      colorAdjust: 'exact'
    },
    backgroundColor: getColorShade(theme, ownerState.color)
  }, ownerState.color === 'inherit' && ownerState.variant !== 'buffer' && {
    backgroundColor: 'none',
    '&::before': {
      content: '""',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'currentColor',
      opacity: 0.3
    }
  }, ownerState.variant === 'buffer' && {
    backgroundColor: 'transparent'
  }, ownerState.variant === 'query' && {
    transform: 'rotate(180deg)'
  }));
  const LinearProgressDashed = styled$1('span', {
    name: 'MuiLinearProgress',
    slot: 'Dashed',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.dashed, styles[`dashedColor${capitalize(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => {
    const backgroundColor = getColorShade(theme, ownerState.color);
    return _extends({
      position: 'absolute',
      marginTop: 0,
      height: '100%',
      width: '100%'
    }, ownerState.color === 'inherit' && {
      opacity: 0.3
    }, {
      backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,
      backgroundSize: '10px 10px',
      backgroundPosition: '0 -23px'
    });
  }, css(_t4$1 || (_t4$1 = _$1`
    animation: ${0} 3s infinite linear;
  `), bufferKeyframe));
  const LinearProgressBar1 = styled$1('span', {
    name: 'MuiLinearProgress',
    slot: 'Bar1',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.bar, styles[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar1Indeterminate, ownerState.variant === 'determinate' && styles.bar1Determinate, ownerState.variant === 'buffer' && styles.bar1Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    width: '100%',
    position: 'absolute',
    left: 0,
    bottom: 0,
    top: 0,
    transition: 'transform 0.2s linear',
    transformOrigin: 'left',
    backgroundColor: ownerState.color === 'inherit' ? 'currentColor' : theme.palette[ownerState.color].main
  }, ownerState.variant === 'determinate' && {
    transition: `transform .${TRANSITION_DURATION}s linear`
  }, ownerState.variant === 'buffer' && {
    zIndex: 1,
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && css(_t5 || (_t5 = _$1`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), indeterminate1Keyframe));
  const LinearProgressBar2 = styled$1('span', {
    name: 'MuiLinearProgress',
    slot: 'Bar2',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.bar, styles[`barColor${capitalize(ownerState.color)}`], (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && styles.bar2Indeterminate, ownerState.variant === 'buffer' && styles.bar2Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    width: '100%',
    position: 'absolute',
    left: 0,
    bottom: 0,
    top: 0,
    transition: 'transform 0.2s linear',
    transformOrigin: 'left'
  }, ownerState.variant !== 'buffer' && {
    backgroundColor: ownerState.color === 'inherit' ? 'currentColor' : theme.palette[ownerState.color].main
  }, ownerState.color === 'inherit' && {
    opacity: 0.3
  }, ownerState.variant === 'buffer' && {
    backgroundColor: getColorShade(theme, ownerState.color),
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === 'indeterminate' || ownerState.variant === 'query') && css(_t6 || (_t6 = _$1`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), indeterminate2Keyframe));
  /**
   * ## ARIA
   *
   * If the progress bar is describing the loading progress of a particular region of a page,
   * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
   * attribute to `true` on that region until it has finished loading.
   */

  const LinearProgress = /*#__PURE__*/React__namespace.forwardRef(function LinearProgress(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiLinearProgress'
    });

    const {
      className,
      color = 'primary',
      value,
      valueBuffer,
      variant = 'indeterminate'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$11);

    const ownerState = _extends({}, props, {
      color,
      variant
    });

    const classes = useUtilityClasses$R(ownerState);
    const theme = useTheme();
    const rootProps = {};
    const inlineStyles = {
      bar1: {},
      bar2: {}
    };

    if (variant === 'determinate' || variant === 'buffer') {
      if (value !== undefined) {
        rootProps['aria-valuenow'] = Math.round(value);
        rootProps['aria-valuemin'] = 0;
        rootProps['aria-valuemax'] = 100;
        let transform = value - 100;

        if (theme.direction === 'rtl') {
          transform = -transform;
        }

        inlineStyles.bar1.transform = `translateX(${transform}%)`;
      } else {
        console.error('MUI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');
      }
    }

    if (variant === 'buffer') {
      if (valueBuffer !== undefined) {
        let transform = (valueBuffer || 0) - 100;

        if (theme.direction === 'rtl') {
          transform = -transform;
        }

        inlineStyles.bar2.transform = `translateX(${transform}%)`;
      } else {
        console.error('MUI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');
      }
    }

    return /*#__PURE__*/jsxRuntime_2(LinearProgressRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      role: "progressbar"
    }, rootProps, {
      ref: ref
    }, other, {
      children: [variant === 'buffer' ? /*#__PURE__*/jsxRuntime_1(LinearProgressDashed, {
        className: classes.dashed,
        ownerState: ownerState
      }) : null, /*#__PURE__*/jsxRuntime_1(LinearProgressBar1, {
        className: classes.bar1,
        ownerState: ownerState,
        style: inlineStyles.bar1
      }), variant === 'determinate' ? null : /*#__PURE__*/jsxRuntime_1(LinearProgressBar2, {
        className: classes.bar2,
        ownerState: ownerState,
        style: inlineStyles.bar2
      })]
    }));
  });
  LinearProgress.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['inherit', 'primary', 'secondary']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the progress indicator for the determinate and buffer variants.
     * Value between 0 and 100.
     */
    value: propTypes.number,

    /**
     * The value for the buffer variant.
     * Value between 0 and 100.
     */
    valueBuffer: propTypes.number,

    /**
     * The variant to use.
     * Use indeterminate or query when there is no progress value.
     * @default 'indeterminate'
     */
    variant: propTypes.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])
  } ;
  var LinearProgress$1 = LinearProgress;

  function getLinkUtilityClass(slot) {
    return generateUtilityClass('MuiLink', slot);
  }
  const linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);
  var linkClasses$1 = linkClasses;

  const _excluded$10 = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"];
  const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main'
  };

  const transformDeprecatedColors = color => {
    return colorTransformations[color] || color;
  };

  const useUtilityClasses$Q = ownerState => {
    const {
      classes,
      component,
      focusVisible,
      underline
    } = ownerState;
    const slots = {
      root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']
    };
    return composeClasses(slots, getLinkUtilityClass, classes);
  };

  const LinkRoot = styled$1(Typography$1, {
    name: 'MuiLink',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];
    }
  })(({
    theme,
    ownerState
  }) => {
    const color = getPath(theme, `palette.${transformDeprecatedColors(ownerState.color)}`) || ownerState.color;
    return _extends({}, ownerState.underline === 'none' && {
      textDecoration: 'none'
    }, ownerState.underline === 'hover' && {
      textDecoration: 'none',
      '&:hover': {
        textDecoration: 'underline'
      }
    }, ownerState.underline === 'always' && {
      textDecoration: 'underline',
      textDecorationColor: color !== 'inherit' ? alpha(color, 0.4) : undefined,
      '&:hover': {
        textDecorationColor: 'inherit'
      }
    }, ownerState.component === 'button' && {
      position: 'relative',
      WebkitTapHighlightColor: 'transparent',
      backgroundColor: 'transparent',
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: 'pointer',
      userSelect: 'none',
      verticalAlign: 'middle',
      MozAppearance: 'none',
      // Reset
      WebkitAppearance: 'none',
      // Reset
      '&::-moz-focus-inner': {
        borderStyle: 'none' // Remove Firefox dotted outline.

      },
      [`&.${linkClasses$1.focusVisible}`]: {
        outline: 'auto'
      }
    });
  });
  const Link = /*#__PURE__*/React__namespace.forwardRef(function Link(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiLink'
    });

    const {
      className,
      color = 'primary',
      component = 'a',
      onBlur,
      onFocus,
      TypographyClasses,
      underline = 'always',
      variant = 'inherit'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$10);

    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    const handlerRef = useForkRef(ref, focusVisibleRef);

    const handleBlur = event => {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }

      if (onBlur) {
        onBlur(event);
      }
    };

    const handleFocus = event => {
      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }

      if (onFocus) {
        onFocus(event);
      }
    };

    const ownerState = _extends({}, props, {
      color,
      component,
      focusVisible,
      underline,
      variant
    });

    const classes = useUtilityClasses$Q(ownerState);
    return /*#__PURE__*/jsxRuntime_1(LinkRoot, _extends({
      className: clsx(classes.root, className),
      classes: TypographyClasses,
      color: color,
      component: component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref: handlerRef,
      ownerState: ownerState,
      variant: variant
    }, other));
  });
  Link.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the link.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .any,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef$1,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * `classes` prop applied to the [`Typography`](/api/typography/) element.
     */
    TypographyClasses: propTypes.object,

    /**
     * Controls when the link should have an underline.
     * @default 'always'
     */
    underline: propTypes.oneOf(['always', 'hover', 'none']),

    /**
     * Applies the theme typography styles.
     * @default 'inherit'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), propTypes.string])
  } ;
  var Link$1 = Link;

  /**
   * @ignore - internal component.
   */

  const ListContext = /*#__PURE__*/React__namespace.createContext({});

  {
    ListContext.displayName = 'ListContext';
  }

  var ListContext$1 = ListContext;

  function getListUtilityClass(slot) {
    return generateUtilityClass('MuiList', slot);
  }
  const listClasses = generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);
  var listClasses$1 = listClasses;

  const _excluded$$ = ["children", "className", "component", "dense", "disablePadding", "subheader"];

  const useUtilityClasses$P = ownerState => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };

  const ListRoot = styled$1('ul', {
    name: 'MuiList',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: 'none',
    margin: 0,
    padding: 0,
    position: 'relative'
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  const List = /*#__PURE__*/React__namespace.forwardRef(function List(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiList'
    });

    const {
      children,
      className,
      component = 'ul',
      dense = false,
      disablePadding = false,
      subheader
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$$);

    const context = React__namespace.useMemo(() => ({
      dense
    }), [dense]);

    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });

    const classes = useUtilityClasses$P(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
      value: context,
      children: /*#__PURE__*/jsxRuntime_2(ListRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  List.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: propTypes.bool,

    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: propTypes.bool,

    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var List$1 = List;

  function getListItemUtilityClass(slot) {
    return generateUtilityClass('MuiListItem', slot);
  }
  const listItemClasses = generateUtilityClasses('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
  var listItemClasses$1 = listItemClasses;

  function getListItemButtonUtilityClass(slot) {
    return generateUtilityClass('MuiListItemButton', slot);
  }
  const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
  var listItemButtonClasses$1 = listItemButtonClasses;

  const _excluded$_ = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected"];
  const overridesResolver$3 = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
  };

  const useUtilityClasses$O = ownerState => {
    const {
      alignItems,
      classes,
      dense,
      disabled,
      disableGutters,
      divider,
      selected
    } = ownerState;
    const slots = {
      root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']
    };
    const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const ListItemButtonRoot = styled$1(ButtonBase$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiListItemButton',
    slot: 'Root',
    overridesResolver: overridesResolver$3
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'flex',
    flexGrow: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    position: 'relative',
    textDecoration: 'none',
    boxSizing: 'border-box',
    textAlign: 'left',
    paddingTop: 8,
    paddingBottom: 8,
    transition: theme.transitions.create('background-color', {
      duration: theme.transitions.duration.shortest
    }),
    '&:hover': {
      textDecoration: 'none',
      backgroundColor: theme.palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    },
    [`&.${listItemButtonClasses$1.selected}`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${listItemButtonClasses$1.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${listItemButtonClasses$1.selected}:hover`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${listItemButtonClasses$1.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`&.${listItemButtonClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    }
  }, ownerState.divider && {
    borderBottom: `1px solid ${theme.palette.divider}`,
    backgroundClip: 'padding-box'
  }, ownerState.alignItems === 'flex-start' && {
    alignItems: 'flex-start'
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }));
  const ListItemButton = /*#__PURE__*/React__namespace.forwardRef(function ListItemButton(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListItemButton'
    });

    const {
      alignItems = 'center',
      autoFocus = false,
      component = 'div',
      children,
      dense = false,
      disableGutters = false,
      divider = false,
      focusVisibleClassName,
      selected = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$_);

    const context = React__namespace.useContext(ListContext$1);
    const childContext = {
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    };
    const listItemRef = React__namespace.useRef(null);
    useEnhancedEffect$1(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else {
          console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');
        }
      }
    }, [autoFocus]);

    const ownerState = _extends({}, props, {
      alignItems,
      dense: childContext.dense,
      disableGutters,
      divider,
      selected
    });

    const classes = useUtilityClasses$O(ownerState);
    const handleRef = useForkRef(listItemRef, ref);
    return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
      value: childContext,
      children: /*#__PURE__*/jsxRuntime_1(ListItemButtonRoot, _extends({
        ref: handleRef,
        component: component,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ownerState: ownerState
      }, other, {
        classes: classes,
        children: children
      }))
    });
  });
  ListItemButton.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: propTypes.oneOf(['center', 'flex-start']),

    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: propTypes.bool,

    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: propTypes.bool,

    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: propTypes.string,

    /**
     * Use to apply selected styling.
     * @default false
     */
    selected: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ListItemButton$1 = ListItemButton;

  function getListItemSecondaryActionClassesUtilityClass(slot) {
    return generateUtilityClass('MuiListItemSecondaryAction', slot);
  }
  const listItemSecondaryActionClasses = generateUtilityClasses('MuiListItemSecondaryAction', ['root', 'disableGutters']);
  var listItemSecondaryActionClasses$1 = listItemSecondaryActionClasses;

  const _excluded$Z = ["className"];

  const useUtilityClasses$N = ownerState => {
    const {
      disableGutters,
      classes
    } = ownerState;
    const slots = {
      root: ['root', disableGutters && 'disableGutters']
    };
    return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
  };

  const ListItemSecondaryActionRoot = styled$1('div', {
    name: 'MuiListItemSecondaryAction',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.disableGutters && styles.disableGutters];
    }
  })(({
    ownerState
  }) => _extends({
    position: 'absolute',
    right: 16,
    top: '50%',
    transform: 'translateY(-50%)'
  }, ownerState.disableGutters && {
    right: 0
  }));
  /**
   * Must be used as the last child of ListItem to function properly.
   */

  const ListItemSecondaryAction = /*#__PURE__*/React__namespace.forwardRef(function ListItemSecondaryAction(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListItemSecondaryAction'
    });

    const {
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$Z);

    const context = React__namespace.useContext(ListContext$1);

    const ownerState = _extends({}, props, {
      disableGutters: context.disableGutters
    });

    const classes = useUtilityClasses$N(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ListItemSecondaryActionRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  ListItemSecondaryAction.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally an `IconButton` or selection control.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
  var ListItemSecondaryAction$1 = ListItemSecondaryAction;

  const _excluded$Y = ["className"],
        _excluded2$8 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected"];
  const overridesResolver$2 = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
  };

  const useUtilityClasses$M = ownerState => {
    const {
      alignItems,
      button,
      classes,
      dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    } = ownerState;
    const slots = {
      root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
      container: ['container']
    };
    return composeClasses(slots, getListItemUtilityClass, classes);
  };

  const ListItemRoot = styled$1('div', {
    name: 'MuiListItem',
    slot: 'Root',
    overridesResolver: overridesResolver$2
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'flex',
    justifyContent: 'flex-start',
    alignItems: 'center',
    position: 'relative',
    textDecoration: 'none',
    width: '100%',
    boxSizing: 'border-box',
    textAlign: 'left'
  }, !ownerState.disablePadding && _extends({
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, !!ownerState.secondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }), !!ownerState.secondaryAction && {
    [`& > .${listItemButtonClasses$1.root}`]: {
      paddingRight: 48
    }
  }, {
    [`&.${listItemClasses$1.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`&.${listItemClasses$1.selected}`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${listItemClasses$1.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${listItemClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    }
  }, ownerState.alignItems === 'flex-start' && {
    alignItems: 'flex-start'
  }, ownerState.divider && {
    borderBottom: `1px solid ${theme.palette.divider}`,
    backgroundClip: 'padding-box'
  }, ownerState.button && {
    transition: theme.transitions.create('background-color', {
      duration: theme.transitions.duration.shortest
    }),
    '&:hover': {
      textDecoration: 'none',
      backgroundColor: theme.palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    },
    [`&.${listItemClasses$1.selected}:hover`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    }
  }, ownerState.hasSecondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }));
  const ListItemContainer = styled$1('li', {
    name: 'MuiListItem',
    slot: 'Container',
    overridesResolver: (props, styles) => styles.container
  })({
    position: 'relative'
  });
  /**
   * Uses an additional container component if `ListItemSecondaryAction` is the last child.
   */

  const ListItem = /*#__PURE__*/React__namespace.forwardRef(function ListItem(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListItem'
    });

    const {
      alignItems = 'center',
      autoFocus = false,
      button = false,
      children: childrenProp,
      className,
      component: componentProp,
      components = {},
      componentsProps = {},
      ContainerComponent = 'li',
      ContainerProps: {
        className: ContainerClassName
      } = {},
      dense = false,
      disabled = false,
      disableGutters = false,
      disablePadding = false,
      divider = false,
      focusVisibleClassName,
      secondaryAction,
      selected = false
    } = props,
          ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$Y),
          other = _objectWithoutPropertiesLoose(props, _excluded2$8);

    const context = React__namespace.useContext(ListContext$1);
    const childContext = {
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    };
    const listItemRef = React__namespace.useRef(null);
    useEnhancedEffect$1(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else {
          console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
        }
      }
    }, [autoFocus]);
    const children = React__namespace.Children.toArray(childrenProp); // v4 implementation, deprecated in v5, will be removed in v6

    const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);

    const ownerState = _extends({}, props, {
      alignItems,
      autoFocus,
      button,
      dense: childContext.dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    });

    const classes = useUtilityClasses$M(ownerState);
    const handleRef = useForkRef(listItemRef, ref);
    const Root = components.Root || ListItemRoot;
    const rootProps = componentsProps.root || {};

    const componentProps = _extends({
      className: clsx(classes.root, rootProps.className, className),
      disabled
    }, other);

    let Component = componentProp || 'li';

    if (button) {
      componentProps.component = componentProp || 'div';
      componentProps.focusVisibleClassName = clsx(listItemClasses$1.focusVisible, focusVisibleClassName);
      Component = ButtonBase$1;
    } // v4 implementation, deprecated in v5, will be removed in v6


    if (hasSecondaryAction) {
      // Use div by default.
      Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.

      if (ContainerComponent === 'li') {
        if (Component === 'li') {
          Component = 'div';
        } else if (componentProps.component === 'li') {
          componentProps.component = 'div';
        }
      }

      return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
        value: childContext,
        children: /*#__PURE__*/jsxRuntime_2(ListItemContainer, _extends({
          as: ContainerComponent,
          className: clsx(classes.container, ContainerClassName),
          ref: handleRef,
          ownerState: ownerState
        }, ContainerProps, {
          children: [/*#__PURE__*/jsxRuntime_1(Root, _extends({}, rootProps, !isHostComponent(Root) && {
            as: Component,
            ownerState: _extends({}, ownerState, rootProps.ownerState)
          }, componentProps, {
            children: children
          })), children.pop()]
        }))
      });
    }

    return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
      value: childContext,
      children: /*#__PURE__*/jsxRuntime_2(Root, _extends({}, rootProps, {
        as: Component,
        ref: handleRef,
        ownerState: ownerState
      }, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, componentProps, {
        children: [children, secondaryAction && /*#__PURE__*/jsxRuntime_1(ListItemSecondaryAction$1, {
          children: secondaryAction
        })]
      }))
    });
  });
  ListItem.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: propTypes.oneOf(['center', 'flex-start']),

    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
     */
    autoFocus: propTypes.bool,

    /**
     * If `true`, the list item is a button (using `ButtonBase`). Props intended
     * for `ButtonBase` can then be applied to `ListItem`.
     * @default false
     * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
     */
    button: propTypes.bool,

    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: chainPropTypes(propTypes.node, props => {
      const children = React__namespace.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)

      let secondaryActionIndex = -1;

      for (let i = children.length - 1; i >= 0; i -= 1) {
        const child = children[i];

        if (isMuiElement(child, ['ListItemSecondaryAction'])) {
          secondaryActionIndex = i;
          break;
        }
      } //  is ListItemSecondaryAction the last child of ListItem


      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error('MUI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
      }

      return null;
    }),

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Root: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The container component used when a `ListItemSecondaryAction` is the last child.
     * @default 'li'
     * @deprecated
     */
    ContainerComponent: elementTypeAcceptingRef$1,

    /**
     * Props applied to the container component if used.
     * @default {}
     * @deprecated
     */
    ContainerProps: propTypes.object,

    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     * @default false
     * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * If `true`, all padding is removed.
     * @default false
     */
    disablePadding: propTypes.bool,

    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: propTypes.bool,

    /**
     * @ignore
     */
    focusVisibleClassName: propTypes.string,

    /**
     * The element to display at the end of ListItem.
     */
    secondaryAction: propTypes.node,

    /**
     * Use to apply selected styling.
     * @default false
     * @deprecated checkout [ListItemButton](/api/list-item-button/) instead
     */
    selected: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ListItem$1 = ListItem;

  function getListItemAvatarUtilityClass(slot) {
    return generateUtilityClass('MuiListItemAvatar', slot);
  }
  const listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);
  var listItemAvatarClasses$1 = listItemAvatarClasses;

  const _excluded$X = ["className"];

  const useUtilityClasses$L = ownerState => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
    };
    return composeClasses(slots, getListItemAvatarUtilityClass, classes);
  };

  const ListItemAvatarRoot = styled$1('div', {
    name: 'MuiListItemAvatar',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
    }
  })(({
    ownerState
  }) => _extends({
    minWidth: 56,
    flexShrink: 0
  }, ownerState.alignItems === 'flex-start' && {
    marginTop: 8
  }));
  /**
   * A simple wrapper to apply `List` styles to an `Avatar`.
   */

  const ListItemAvatar = /*#__PURE__*/React__namespace.forwardRef(function ListItemAvatar(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListItemAvatar'
    });

    const {
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$X);

    const context = React__namespace.useContext(ListContext$1);

    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });

    const classes = useUtilityClasses$L(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ListItemAvatarRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  ListItemAvatar.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally an `Avatar`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ListItemAvatar$1 = ListItemAvatar;

  function getListItemIconUtilityClass(slot) {
    return generateUtilityClass('MuiListItemIcon', slot);
  }
  const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
  var listItemIconClasses$1 = listItemIconClasses;

  const _excluded$W = ["className"];

  const useUtilityClasses$K = ownerState => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
    };
    return composeClasses(slots, getListItemIconUtilityClass, classes);
  };

  const ListItemIconRoot = styled$1('div', {
    name: 'MuiListItemIcon',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: theme.palette.action.active,
    flexShrink: 0,
    display: 'inline-flex'
  }, ownerState.alignItems === 'flex-start' && {
    marginTop: 8
  }));
  /**
   * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
   */

  const ListItemIcon = /*#__PURE__*/React__namespace.forwardRef(function ListItemIcon(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListItemIcon'
    });

    const {
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$W);

    const context = React__namespace.useContext(ListContext$1);

    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });

    const classes = useUtilityClasses$K(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ListItemIconRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other));
  });
  ListItemIcon.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ListItemIcon$1 = ListItemIcon;

  function getListItemTextUtilityClass(slot) {
    return generateUtilityClass('MuiListItemText', slot);
  }
  const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
  var listItemTextClasses$1 = listItemTextClasses;

  const _excluded$V = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];

  const useUtilityClasses$J = ownerState => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
      primary: ['primary'],
      secondary: ['secondary']
    };
    return composeClasses(slots, getListItemTextUtilityClass, classes);
  };

  const ListItemTextRoot = styled$1('div', {
    name: 'MuiListItemText',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses$1.primary}`]: styles.primary
      }, {
        [`& .${listItemTextClasses$1.secondary}`]: styles.secondary
      }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: '1 1 auto',
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  const ListItemText = /*#__PURE__*/React__namespace.forwardRef(function ListItemText(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiListItemText'
    });

    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$V);

    const {
      dense
    } = React__namespace.useContext(ListContext$1);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;

    const ownerState = _extends({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });

    const classes = useUtilityClasses$J(ownerState);

    if (primary != null && primary.type !== Typography$1 && !disableTypography) {
      primary = /*#__PURE__*/jsxRuntime_1(Typography$1, _extends({
        variant: dense ? 'body2' : 'body1',
        className: classes.primary,
        component: "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }

    if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
      secondary = /*#__PURE__*/jsxRuntime_1(Typography$1, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }

    return /*#__PURE__*/jsxRuntime_2(ListItemTextRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  ListItemText.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Alias for the `primary` prop.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: propTypes.bool,

    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: propTypes.bool,

    /**
     * The main content element.
     */
    primary: propTypes.node,

    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     */
    primaryTypographyProps: propTypes.object,

    /**
     * The secondary content element.
     */
    secondary: propTypes.node,

    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     */
    secondaryTypographyProps: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var ListItemText$1 = ListItemText;

  const _excluded$U = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];

  function nextItem$1(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }

    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }

    return disableListWrap ? null : list.firstChild;
  }

  function previousItem$1(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }

    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }

    return disableListWrap ? null : list.lastChild;
  }

  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === undefined) {
      return true;
    }

    let text = nextFocus.innerText;

    if (text === undefined) {
      // jsdom doesn't support innerText
      text = nextFocus.textContent;
    }

    text = text.trim().toLowerCase();

    if (text.length === 0) {
      return false;
    }

    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }

    return text.indexOf(textCriteria.keys.join('')) === 0;
  }

  function moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

    while (nextFocus) {
      // Prevent infinite loop.
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }

        wrappedOnce = true;
      } // Same logic as useAutocomplete.js


      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

      if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        // Move to the next element.
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }

    return false;
  }
  /**
   * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
   * It's exposed to help customization of the [`Menu`](/api/menu/) component if you
   * use it separately you need to move focus into the component manually. Once
   * the focus is placed inside the component it is fully keyboard accessible.
   */


  const MenuList = /*#__PURE__*/React__namespace.forwardRef(function MenuList(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = 'selectedMenu'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$U);

    const listRef = React__namespace.useRef(null);
    const textCriteriaRef = React__namespace.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect$1(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React__namespace.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        // Let's ignore that piece of logic if users are already overriding the width
        // of the menu.
        const noExplicitWidth = !listRef.current.style.width;

        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
          listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }

        return listRef.current;
      }
    }), []);

    const handleKeyDown = event => {
      const list = listRef.current;
      const key = event.key;
      /**
       * @type {Element} - will always be defined since we are in a keydown handler
       * attached to an element. A keydown event is either dispatched to the activeElement
       * or document.body or document.documentElement. Only the first case will
       * trigger this specific handler.
       */

      const currentFocus = ownerDocument(list).activeElement;

      if (key === 'ArrowDown') {
        // Prevent scroll of the page
        event.preventDefault();
        moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem$1);
      } else if (key === 'ArrowUp') {
        event.preventDefault();
        moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem$1);
      } else if (key === 'Home') {
        event.preventDefault();
        moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, nextItem$1);
      } else if (key === 'End') {
        event.preventDefault();
        moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, previousItem$1);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();

        if (criteria.keys.length > 0) {
          // Reset
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }

        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus$1(list, currentFocus, false, disabledItemsFocusable, nextItem$1, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }

      if (onKeyDown) {
        onKeyDown(event);
      }
    };

    const handleRef = useForkRef(listRef, ref);
    /**
     * the index of the item should receive focus
     * in a `variant="selectedMenu"` it's the first `selected` item
     * otherwise it's the very first item.
     */

    let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback

    React__namespace.Children.forEach(children, (child, index) => {
      if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
        return;
      }

      {
        if (reactIs_2(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      if (!child.props.disabled) {
        if (variant === 'selectedMenu' && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const items = React__namespace.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};

        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }

        if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
          newChildProps.tabIndex = 0;
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, newChildProps);
      }

      return child;
    });
    return /*#__PURE__*/jsxRuntime_1(List$1, _extends({
      role: "menu",
      ref: handleRef,
      className: className,
      onKeyDown: handleKeyDown,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  MenuList.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: propTypes.bool,

    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: propTypes.bool,

    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: propTypes.node,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: propTypes.bool,

    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: propTypes.bool,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: propTypes.oneOf(['menu', 'selectedMenu'])
  } ;
  var MenuList$1 = MenuList;

  function getPopoverUtilityClass(slot) {
    return generateUtilityClass('MuiPopover', slot);
  }
  const popoverClasses = generateUtilityClasses('MuiPopover', ['root', 'paper']);
  var popoverClasses$1 = popoverClasses;

  const _excluded$T = ["onEntering"],
        _excluded2$7 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
  function getOffsetTop(rect, vertical) {
    let offset = 0;

    if (typeof vertical === 'number') {
      offset = vertical;
    } else if (vertical === 'center') {
      offset = rect.height / 2;
    } else if (vertical === 'bottom') {
      offset = rect.height;
    }

    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset = 0;

    if (typeof horizontal === 'number') {
      offset = horizontal;
    } else if (horizontal === 'center') {
      offset = rect.width / 2;
    } else if (horizontal === 'right') {
      offset = rect.width;
    }

    return offset;
  }

  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
  }

  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
  }

  const useUtilityClasses$I = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      paper: ['paper']
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };

  const PopoverRoot = styled$1(Modal$1, {
    name: 'MuiPopover',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({});
  const PopoverPaper = styled$1(Paper$1, {
    name: 'MuiPopover',
    slot: 'Paper',
    overridesResolver: (props, styles) => styles.paper
  })({
    position: 'absolute',
    overflowY: 'auto',
    overflowX: 'hidden',
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: 'calc(100% - 32px)',
    maxHeight: 'calc(100% - 32px)',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  const Popover = /*#__PURE__*/React__namespace.forwardRef(function Popover(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiPopover'
    });

    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: 'top',
        horizontal: 'left'
      },
      anchorPosition,
      anchorReference = 'anchorEl',
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps = {},
      transformOrigin = {
        vertical: 'top',
        horizontal: 'left'
      },
      TransitionComponent = Grow$1,
      transitionDuration: transitionDurationProp = 'auto',
      TransitionProps: {
        onEntering
      } = {}
    } = props,
          TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$T),
          other = _objectWithoutPropertiesLoose(props, _excluded2$7);

    const paperRef = React__namespace.useRef();
    const handlePaperRef = useForkRef(paperRef, PaperProps.ref);

    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      PaperProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });

    const classes = useUtilityClasses$I(ownerState); // Returns the top/left offset of the position
    // to attach to on the anchor element (or body if none is provided)

    const getAnchorOffset = React__namespace.useCallback(() => {
      if (anchorReference === 'anchorPosition') {
        {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
          }
        }

        return anchorPosition;
      }

      const resolvedAnchorEl = resolveAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();

      {
        const box = anchorElement.getBoundingClientRect();

        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
        }
      }

      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the base transform origin using the element

    const getTransformOrigin = React__namespace.useCallback(elemRect => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React__namespace.useCallback(element => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      }; // Get the transform origin point on the element itself

      const elemTransformOrigin = getTransformOrigin(elemRect);

      if (anchorReference === 'none') {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      } // Get the offset of the anchoring element


      const anchorOffset = getAnchorOffset(); // Calculate element positioning

      let top = anchorOffset.top - elemTransformOrigin.vertical;
      let left = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom = top + elemRect.height;
      const right = left + elemRect.width; // Use the parent window of the anchorEl if provided

      const containerWindow = ownerWindow(resolveAnchorEl(anchorEl)); // Window thresholds taking required margin into account

      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

      if (top < marginThreshold) {
        const diff = top - marginThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom > heightThreshold) {
        const diff = bottom - heightThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      }

      {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
        }
      } // Check if the horizontal axis needs shifting


      if (left < marginThreshold) {
        const diff = left - marginThreshold;
        left -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right > widthThreshold) {
        const diff = right - widthThreshold;
        left -= diff;
        elemTransformOrigin.horizontal += diff;
      }

      return {
        top: `${Math.round(top)}px`,
        left: `${Math.round(left)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const setPositioningStyles = React__namespace.useCallback(() => {
      const element = paperRef.current;

      if (!element) {
        return;
      }

      const positioning = getPositioningStyle(element);

      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }

      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }

      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);

    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }

      setPositioningStyles();
    };

    React__namespace.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React__namespace.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React__namespace.useEffect(() => {
      if (!open) {
        return undefined;
      }

      const handleResize = debounce$1(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow(anchorEl);
      containerWindow.addEventListener('resize', handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener('resize', handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;

    if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
      transitionDuration = undefined;
    } // If the container prop is provided, use that
    // If the anchorEl prop is provided, use its parent body element as the container
    // If neither are provided let the Modal take care of choosing the container


    const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
    return /*#__PURE__*/jsxRuntime_1(PopoverRoot, _extends({
      BackdropProps: {
        invisible: true
      },
      className: clsx(classes.root, className),
      container: container,
      open: open,
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /*#__PURE__*/jsxRuntime_1(PopoverPaper, _extends({
          elevation: elevation
        }, PaperProps, {
          ref: handlePaperRef,
          className: clsx(classes.paper, PaperProps.className),
          children: children
        }))
      }))
    }));
  });
  Popover.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType$1,

    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(propTypes.oneOfType([HTMLElementType, propTypes.func]), props => {
      if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);

        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();

          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
          }
        } else {
          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join('\n'));
        }
      }

      return null;
    }),

    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: propTypes.shape({
      horizontal: propTypes.oneOfType([propTypes.oneOf(['center', 'left', 'right']), propTypes.number]).isRequired,
      vertical: propTypes.oneOfType([propTypes.oneOf(['bottom', 'center', 'top']), propTypes.number]).isRequired
    }),

    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: propTypes.shape({
      left: propTypes.number.isRequired,
      top: propTypes.number.isRequired
    }),

    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: propTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([HTMLElementType, propTypes.func]),

    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType,

    /**
     * Specifies how close to the edge of the window the popover can appear.
     * @default 16
     */
    marginThreshold: propTypes.number,

    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * Props applied to the [`Paper`](/api/paper/) element.
     * @default {}
     */
    PaperProps: propTypes
    /* @typescript-to-proptypes-ignore */
    .shape({
      component: elementTypeAcceptingRef$1
    }),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: propTypes.shape({
      horizontal: propTypes.oneOfType([propTypes.oneOf(['center', 'left', 'right']), propTypes.number]).isRequired,
      vertical: propTypes.oneOfType([propTypes.oneOf(['bottom', 'center', 'top']), propTypes.number]).isRequired
    }),

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: propTypes.elementType,

    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     * @default {}
     */
    TransitionProps: propTypes.object
  } ;
  var Popover$1 = Popover;

  function getMenuUtilityClass(slot) {
    return generateUtilityClass('MuiMenu', slot);
  }
  const menuClasses = generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);
  var menuClasses$1 = menuClasses;

  const _excluded$S = ["onEntering"],
        _excluded2$6 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
  const RTL_ORIGIN = {
    vertical: 'top',
    horizontal: 'right'
  };
  const LTR_ORIGIN = {
    vertical: 'top',
    horizontal: 'left'
  };

  const useUtilityClasses$H = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      paper: ['paper'],
      list: ['list']
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };

  const MenuRoot = styled$1(Popover$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiMenu',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({});
  const MenuPaper = styled$1(Paper$1, {
    name: 'MuiMenu',
    slot: 'Paper',
    overridesResolver: (props, styles) => styles.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: 'calc(100% - 96px)',
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: 'touch'
  });
  const MenuMenuList = styled$1(MenuList$1, {
    name: 'MuiMenu',
    slot: 'List',
    overridesResolver: (props, styles) => styles.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  const Menu = /*#__PURE__*/React__namespace.forwardRef(function Menu(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiMenu'
    });

    const {
      autoFocus = true,
      children,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = 'auto',
      TransitionProps: {
        onEntering
      } = {},
      variant = 'selectedMenu'
    } = props,
          TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$S),
          other = _objectWithoutPropertiesLoose(props, _excluded2$6);

    const theme = useTheme();
    const isRtl = theme.direction === 'rtl';

    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });

    const classes = useUtilityClasses$H(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React__namespace.useRef(null);

    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }

      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };

    const handleListKeyDown = event => {
      if (event.key === 'Tab') {
        event.preventDefault();

        if (onClose) {
          onClose(event, 'tabKeyDown');
        }
      }
    };
    /**
     * the index of the item should receive focus
     * in a `variant="selectedMenu"` it's the first `selected` item
     * otherwise it's the very first item.
     */


    let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
    // to check if there is a `selected` item. We're looking for the last `selected`
    // item and use the first valid item as a fallback

    React__namespace.Children.map(children, (child, index) => {
      if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
        return;
      }

      {
        if (reactIs_2(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      if (!child.props.disabled) {
        if (variant === 'selectedMenu' && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    return /*#__PURE__*/jsxRuntime_1(MenuRoot, _extends({
      classes: PopoverClasses,
      onClose: onClose,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRtl ? 'right' : 'left'
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({
        component: MenuPaper
      }, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      className: classes.root,
      open: open,
      ref: ref,
      transitionDuration: transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem: autoFocusItem,
        variant: variant
      }, MenuListProps, {
        className: clsx(classes.list, MenuListProps.className),
        children: children
      }))
    }));
  });
  Menu.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([HTMLElementType, propTypes.func]),

    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: propTypes.bool,

    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: propTypes.bool,

    /**
     * Props applied to the [`MenuList`](/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: propTypes.object,

    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * @ignore
     */
    PaperProps: propTypes.object,

    /**
     * `classes` prop applied to the [`Popover`](/api/popover/) element.
     */
    PopoverClasses: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     * @default {}
     */
    TransitionProps: propTypes.object,

    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: propTypes.oneOf(['menu', 'selectedMenu'])
  } ;
  var Menu$1 = Menu;

  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass('MuiMenuItem', slot);
  }
  const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
  var menuItemClasses$1 = menuItemClasses;

  const _excluded$R = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex"];
  const overridesResolver$1 = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
  };

  const useUtilityClasses$G = ownerState => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
    };
    const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const MenuItemRoot = styled$1(ButtonBase$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiMenuItem',
    slot: 'Root',
    overridesResolver: overridesResolver$1
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    display: 'flex',
    justifyContent: 'flex-start',
    alignItems: 'center',
    position: 'relative',
    textDecoration: 'none',
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: 'border-box',
    whiteSpace: 'nowrap'
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${theme.palette.divider}`,
    backgroundClip: 'padding-box'
  }, {
    '&:hover': {
      textDecoration: 'none',
      backgroundColor: theme.palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    },
    [`&.${menuItemClasses$1.selected}`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses$1.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses$1.selected}:hover`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses$1.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`&.${menuItemClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    },
    [`& + .${dividerClasses$1.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses$1.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses$1.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses$1.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses$1.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up('sm')]: {
      minHeight: 'auto'
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    // https://material.io/components/menus#specs > Dense
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses$1.root} svg`]: {
      fontSize: '1.25rem'
    }
  })));
  const MenuItem = /*#__PURE__*/React__namespace.forwardRef(function MenuItem(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiMenuItem'
    });

    const {
      autoFocus = false,
      component = 'li',
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = 'menuitem',
      tabIndex: tabIndexProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$R);

    const context = React__namespace.useContext(ListContext$1);
    const childContext = {
      dense: dense || context.dense || false,
      disableGutters
    };
    const menuItemRef = React__namespace.useRef(null);
    useEnhancedEffect$1(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else {
          console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');
        }
      }
    }, [autoFocus]);

    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });

    const classes = useUtilityClasses$G(props);
    const handleRef = useForkRef(menuItemRef, ref);
    let tabIndex;

    if (!props.disabled) {
      tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
    }

    return /*#__PURE__*/jsxRuntime_1(ListContext$1.Provider, {
      value: childContext,
      children: /*#__PURE__*/jsxRuntime_1(MenuItemRoot, _extends({
        ref: handleRef,
        role: role,
        tabIndex: tabIndex,
        component: component,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName)
      }, other, {
        ownerState: ownerState,
        classes: classes
      }))
    });
  });
  MenuItem.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: propTypes.bool,

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: propTypes.bool,

    /**
     * @ignore
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: propTypes.bool,

    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: propTypes.string,

    /**
     * @ignore
     */
    role: propTypes
    /* @typescript-to-proptypes-ignore */
    .string,

    /**
     * @ignore
     */
    selected: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * @default 0
     */
    tabIndex: propTypes.number
  } ;
  var MenuItem$1 = MenuItem;

  function getMobileStepperUtilityClass(slot) {
    return generateUtilityClass('MuiMobileStepper', slot);
  }
  const mobileStepperClasses = generateUtilityClasses('MuiMobileStepper', ['root', 'positionBottom', 'positionTop', 'positionStatic', 'dots', 'dot', 'dotActive', 'progress']);
  var mobileStepperClasses$1 = mobileStepperClasses;

  const _excluded$Q = ["activeStep", "backButton", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"];

  const useUtilityClasses$F = ownerState => {
    const {
      classes,
      position
    } = ownerState;
    const slots = {
      root: ['root', `position${capitalize(position)}`],
      dots: ['dots'],
      dot: ['dot'],
      dotActive: ['dotActive'],
      progress: ['progress']
    };
    return composeClasses(slots, getMobileStepperUtilityClass, classes);
  };

  const MobileStepperRoot = styled$1(Paper$1, {
    name: 'MuiMobileStepper',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`position${capitalize(ownerState.position)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    background: theme.palette.background.default,
    padding: 8
  }, ownerState.position === 'bottom' && {
    position: 'fixed',
    bottom: 0,
    left: 0,
    right: 0,
    zIndex: theme.zIndex.mobileStepper
  }, ownerState.position === 'top' && {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    zIndex: theme.zIndex.mobileStepper
  }));
  const MobileStepperDots = styled$1('div', {
    name: 'MuiMobileStepper',
    slot: 'Dots',
    overridesResolver: (props, styles) => styles.dots
  })(({
    ownerState
  }) => _extends({}, ownerState.variant === 'dots' && {
    display: 'flex',
    flexDirection: 'row'
  }));
  const MobileStepperDot = styled$1('div', {
    name: 'MuiMobileStepper',
    slot: 'Dot',
    shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'dotActive',
    overridesResolver: (props, styles) => {
      const {
        dotActive
      } = props;
      return [styles.dot, dotActive && styles.dotActive];
    }
  })(({
    theme,
    ownerState,
    dotActive
  }) => _extends({}, ownerState.variant === 'dots' && _extends({
    transition: theme.transitions.create('background-color', {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.palette.action.disabled,
    borderRadius: '50%',
    width: 8,
    height: 8,
    margin: '0 2px'
  }, dotActive && {
    backgroundColor: theme.palette.primary.main
  })));
  const MobileStepperProgress = styled$1(LinearProgress$1, {
    name: 'MuiMobileStepper',
    slot: 'Progress',
    overridesResolver: (props, styles) => styles.progress
  })(({
    ownerState
  }) => _extends({}, ownerState.variant === 'progress' && {
    width: '50%'
  }));
  const MobileStepper = /*#__PURE__*/React__namespace.forwardRef(function MobileStepper(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiMobileStepper'
    });

    const {
      activeStep = 0,
      backButton,
      className,
      LinearProgressProps,
      nextButton,
      position = 'bottom',
      steps,
      variant = 'dots'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$Q);

    const ownerState = _extends({}, props, {
      activeStep,
      position,
      variant
    });

    const classes = useUtilityClasses$F(ownerState);
    return /*#__PURE__*/jsxRuntime_2(MobileStepperRoot, _extends({
      square: true,
      elevation: 0,
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [backButton, variant === 'text' && /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [activeStep + 1, " / ", steps]
      }), variant === 'dots' && /*#__PURE__*/jsxRuntime_1(MobileStepperDots, {
        ownerState: ownerState,
        className: classes.dots,
        children: [...new Array(steps)].map((_, index) => /*#__PURE__*/jsxRuntime_1(MobileStepperDot, {
          className: clsx(classes.dot, index === activeStep && classes.dotActive),
          ownerState: ownerState,
          dotActive: index === activeStep
        }, index))
      }), variant === 'progress' && /*#__PURE__*/jsxRuntime_1(MobileStepperProgress, _extends({
        ownerState: ownerState,
        className: classes.progress,
        variant: "determinate",
        value: Math.ceil(activeStep / (steps - 1) * 100)
      }, LinearProgressProps)), nextButton]
    }));
  });
  MobileStepper.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Set the active step (zero based index).
     * Defines which dot is highlighted when the variant is 'dots'.
     * @default 0
     */
    activeStep: integerPropType,

    /**
     * A back button element. For instance, it can be a `Button` or an `IconButton`.
     */
    backButton: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Props applied to the `LinearProgress` element.
     */
    LinearProgressProps: propTypes.object,

    /**
     * A next button element. For instance, it can be a `Button` or an `IconButton`.
     */
    nextButton: propTypes.node,

    /**
     * Set the positioning type.
     * @default 'bottom'
     */
    position: propTypes.oneOf(['bottom', 'static', 'top']),

    /**
     * The total steps.
     */
    steps: integerPropType.isRequired,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'dots'
     */
    variant: propTypes.oneOf(['dots', 'progress', 'text'])
  } ;
  var MobileStepper$1 = MobileStepper;

  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass('MuiNativeSelect', slot);
  }
  const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
  var nativeSelectClasses$1 = nativeSelectClasses;

  const _excluded$P = ["className", "disabled", "IconComponent", "inputRef", "variant"];

  const useUtilityClasses$E = ownerState => {
    const {
      classes,
      variant,
      disabled,
      open
    } = ownerState;
    const slots = {
      select: ['select', variant, disabled && 'disabled'],
      icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled']
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };

  const nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: 'none',
    // Reset
    WebkitAppearance: 'none',
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: 'none',
    borderRadius: 0,
    // Reset
    cursor: 'pointer',
    '&:focus': {
      // Show that it's not an text input
      backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
      borderRadius: 0 // Reset Chrome style

    },
    // Remove IE11 arrow
    '&::-ms-expand': {
      display: 'none'
    },
    [`&.${nativeSelectClasses$1.disabled}`]: {
      cursor: 'default'
    },
    '&[multiple]': {
      height: 'auto'
    },
    '&:not([multiple]) option, &:not([multiple]) optgroup': {
      backgroundColor: theme.palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    '&&&': {
      paddingRight: 24,
      minWidth: 16 // So it doesn't collapse.

    }
  }, ownerState.variant === 'filled' && {
    '&&&': {
      paddingRight: 32
    }
  }, ownerState.variant === 'outlined' && {
    borderRadius: theme.shape.borderRadius,
    '&:focus': {
      borderRadius: theme.shape.borderRadius // Reset the reset for Chrome style

    },
    '&&&': {
      paddingRight: 32
    }
  });
  const NativeSelectSelect = styled$1('select', {
    name: 'MuiNativeSelect',
    slot: 'Select',
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.select, styles[ownerState.variant]];
    }
  })(nativeSelectSelectStyles);
  const nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: 'absolute',
    right: 0,
    top: 'calc(50% - .5em)',
    // Center vertically, height is 1em
    pointerEvents: 'none',
    // Don't block pointer events on the select under the icon.
    color: theme.palette.action.active,
    [`&.${nativeSelectClasses$1.disabled}`]: {
      color: theme.palette.action.disabled
    }
  }, ownerState.open && {
    transform: 'rotate(180deg)'
  }, ownerState.variant === 'filled' && {
    right: 7
  }, ownerState.variant === 'outlined' && {
    right: 7
  });
  const NativeSelectIcon = styled$1('svg', {
    name: 'MuiNativeSelect',
    slot: 'Icon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
    }
  })(nativeSelectIconStyles);
  /**
   * @ignore - internal component.
   */

  const NativeSelectInput = /*#__PURE__*/React__namespace.forwardRef(function NativeSelectInput(props, ref) {
    const {
      className,
      disabled,
      IconComponent,
      inputRef,
      variant = 'standard'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$P);

    const ownerState = _extends({}, props, {
      disabled,
      variant
    });

    const classes = useUtilityClasses$E(ownerState);
    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1(NativeSelectSelect, _extends({
        ownerState: ownerState,
        className: clsx(classes.select, className),
        disabled: disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /*#__PURE__*/jsxRuntime_1(NativeSelectIcon, {
        as: IconComponent,
        ownerState: ownerState,
        className: classes.icon
      })]
    });
  });
  NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object,

    /**
     * The CSS class name of the select element.
     */
    className: propTypes.string,

    /**
     * If `true`, the select is disabled.
     */
    disabled: propTypes.bool,

    /**
     * The icon that displays the arrow.
     */
    IconComponent: propTypes.elementType.isRequired,

    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType$1,

    /**
     * @ignore
     */
    multiple: propTypes.bool,

    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: propTypes.string,

    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * The input value.
     */
    value: propTypes.any,

    /**
     * The variant to use.
     */
    variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
  } ;
  var NativeSelectInput$1 = NativeSelectInput;

  const _excluded$O = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"],
        _excluded2$5 = ["root"];

  const useUtilityClasses$D = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };

  const defaultInput = /*#__PURE__*/jsxRuntime_1(Input$1, {});
  /**
   * An alternative to `<Select native />` with a much smaller bundle size footprint.
   */


  const NativeSelect = /*#__PURE__*/React__namespace.forwardRef(function NativeSelect(inProps, ref) {
    const props = useThemeProps({
      name: 'MuiNativeSelect',
      props: inProps
    });

    const {
      className,
      children,
      classes: classesProp = {},
      IconComponent = ArrowDropDownIcon,
      input = defaultInput,
      inputProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$O);

    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ['variant']
    });

    const ownerState = _extends({}, props, {
      classes: classesProp
    });

    const classes = useUtilityClasses$D(ownerState);

    const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2$5);

    return /*#__PURE__*/React__namespace.cloneElement(input, _extends({
      // Most of the logic is implemented in `NativeSelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: NativeSelectInput$1,
      inputProps: _extends({
        children,
        classes: otherClasses,
        IconComponent,
        variant: fcs.variant,
        type: undefined
      }, inputProps, input ? input.props.inputProps : {}),
      ref
    }, other, {
      className: clsx(classes.root, input.props.className, className)
    }));
  });
  NativeSelect.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: propTypes.elementType,

    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     * @default <Input />
     */
    input: propTypes.element,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
     */
    inputProps: propTypes.object,

    /**
     * Callback fired when a menu item is selected.
     *
     * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The `input` value. The DOM API casts this to a string.
     */
    value: propTypes.any,

    /**
     * The variant to use.
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  NativeSelect.muiName = 'Select';
  var NativeSelect$1 = NativeSelect;

  const _excluded$N = ["children", "classes", "className", "label", "notched"];
  const NotchedOutlineRoot$1 = styled$1('fieldset')({
    textAlign: 'left',
    position: 'absolute',
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: '0 8px',
    pointerEvents: 'none',
    borderRadius: 'inherit',
    borderStyle: 'solid',
    borderWidth: 1,
    overflow: 'hidden',
    minWidth: '0%'
  });
  const NotchedOutlineLegend = styled$1('legend', {
    skipSx: true
  })(({
    ownerState,
    theme
  }) => _extends({
    float: 'unset'
  }, ownerState.label === undefined && {
    padding: 0,
    lineHeight: '11px',
    // sync with `height` in `legend` styles
    transition: theme.transitions.create('width', {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.label !== undefined && _extends({
    display: 'block',
    // Fix conflict with normalize.css and sanitize.css
    width: 'auto',
    // Fix conflict with bootstrap
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: '0.75em',
    visibility: 'hidden',
    maxWidth: 0.01,
    transition: theme.transitions.create('max-width', {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: 'nowrap',
    '& > span': {
      paddingLeft: 5,
      paddingRight: 5,
      display: 'inline-block'
    }
  }, ownerState.notched && {
    maxWidth: '100%',
    transition: theme.transitions.create('max-width', {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  /**
   * @ignore - internal component.
   */

  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$N);

    const ownerState = _extends({}, props, {
      notched,
      label
    });

    return /*#__PURE__*/jsxRuntime_1(NotchedOutlineRoot$1, _extends({
      "aria-hidden": true,
      className: className,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(NotchedOutlineLegend, {
        ownerState: ownerState,
        children: label ? /*#__PURE__*/jsxRuntime_1("span", {
          children: label
        }) :
        /*#__PURE__*/
        // notranslate needed while Google Translate will not fix zero-width space issue
        // eslint-disable-next-line react/no-danger
        jsxRuntime_1("span", {
          className: "notranslate",
          dangerouslySetInnerHTML: {
            __html: '&#8203;'
          }
        })
      })
    }));
  }
  NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The label.
     */
    label: propTypes.node,

    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: propTypes.bool.isRequired,

    /**
     * @ignore
     */
    style: propTypes.object
  } ;

  const _excluded$M = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "type"];

  const useUtilityClasses$C = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      notchedOutline: ['notchedOutline'],
      input: ['input']
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const OutlinedInputRoot = styled$1(InputBaseRoot, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiOutlinedInput',
    slot: 'Root',
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
    return _extends({
      position: 'relative',
      borderRadius: theme.shape.borderRadius,
      [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
        borderColor: theme.palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor
        }
      },
      [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
        borderColor: theme.palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
        borderColor: theme.palette.error.main
      },
      [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
        borderColor: theme.palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: '16.5px 14px'
    }, ownerState.size === 'small' && {
      padding: '8.5px 14px'
    }));
  });
  const NotchedOutlineRoot = styled$1(NotchedOutline, {
    name: 'MuiOutlinedInput',
    slot: 'NotchedOutline',
    overridesResolver: (props, styles) => styles.notchedOutline
  })(({
    theme
  }) => ({
    borderColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'
  }));
  const OutlinedInputInput = styled$1(InputBaseComponent, {
    name: 'MuiOutlinedInput',
    slot: 'Input',
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: '16.5px 14px',
    '&:-webkit-autofill': {
      WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
      WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
      caretColor: theme.palette.mode === 'light' ? null : '#fff',
      borderRadius: 'inherit'
    }
  }, ownerState.size === 'small' && {
    padding: '8.5px 14px'
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  const OutlinedInput = /*#__PURE__*/React__namespace.forwardRef(function OutlinedInput(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiOutlinedInput'
    });

    const {
      components = {},
      fullWidth = false,
      inputComponent = 'input',
      label,
      multiline = false,
      notched,
      type = 'text'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$M);

    const classes = useUtilityClasses$C(props);
    return /*#__PURE__*/jsxRuntime_1(InputBase$1, _extends({
      components: _extends({
        Root: OutlinedInputRoot,
        Input: OutlinedInputInput
      }, components),
      renderSuffix: state => /*#__PURE__*/jsxRuntime_1(NotchedOutlineRoot, {
        className: classes.notchedOutline,
        label: label,
        notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth: fullWidth,
      inputComponent: inputComponent,
      multiline: multiline,
      ref: ref,
      type: type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  OutlinedInput.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: propTypes.string,

    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary']), propTypes.string]),

    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Input: propTypes.elementType,
      Root: propTypes.elementType
    }),

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: propTypes.bool,

    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: propTypes.node,

    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: propTypes.bool,

    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: propTypes.elementType,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: propTypes.node,

    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: propTypes.oneOf(['dense', 'none']),

    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: propTypes.bool,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: propTypes.bool,

    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: propTypes.string,

    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: propTypes.bool,

    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: propTypes.bool,

    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: propTypes.string,

    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: propTypes.any
  } ;
  OutlinedInput.muiName = 'Input';
  var OutlinedInput$1 = OutlinedInput;

  function getPaginationUtilityClass(slot) {
    return generateUtilityClass('MuiPagination', slot);
  }
  const paginationClasses = generateUtilityClasses('MuiPagination', ['root', 'ul', 'outlined', 'text']);
  var paginationClasses$1 = paginationClasses;

  const _excluded$L = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
  function usePagination(props = {}) {
    // keep default values in sync with @default tags in Pagination.propTypes
    const {
      boundaryCount = 1,
      componentName = 'usePagination',
      count = 1,
      defaultPage = 1,
      disabled = false,
      hideNextButton = false,
      hidePrevButton = false,
      onChange: handleChange,
      page: pageProp,
      showFirstButton = false,
      showLastButton = false,
      siblingCount = 1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$L);

    const [page, setPageState] = useControlled({
      controlled: pageProp,
      default: defaultPage,
      name: componentName,
      state: 'page'
    });

    const handleClick = (event, value) => {
      if (!pageProp) {
        setPageState(value);
      }

      if (handleChange) {
        handleChange(event, value);
      }
    }; // https://dev.to/namirsab/comment/2050


    const range = (start, end) => {
      const length = end - start + 1;
      return Array.from({
        length
      }, (_, i) => start + i);
    };

    const startPages = range(1, Math.min(boundaryCount, count));
    const endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
    const siblingsStart = Math.max(Math.min( // Natural start
    page - siblingCount, // Lower boundary when page is high
    count - boundaryCount - siblingCount * 2 - 1), // Greater than startPages
    boundaryCount + 2);
    const siblingsEnd = Math.min(Math.max( // Natural end
    page + siblingCount, // Upper boundary when page is low
    boundaryCount + siblingCount * 2 + 2), // Less than endPages
    endPages.length > 0 ? endPages[0] - 2 : count - 1); // Basic list of items to render
    // e.g. itemList = ['first', 'previous', 1, 'ellipsis', 4, 5, 6, 'ellipsis', 10, 'next', 'last']

    const itemList = [...(showFirstButton ? ['first'] : []), ...(hidePrevButton ? [] : ['previous']), ...startPages, // Start ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...(siblingsStart > boundaryCount + 2 ? ['start-ellipsis'] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []), // Sibling pages
    ...range(siblingsStart, siblingsEnd), // End ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...(siblingsEnd < count - boundaryCount - 1 ? ['end-ellipsis'] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), ...endPages, ...(hideNextButton ? [] : ['next']), ...(showLastButton ? ['last'] : [])]; // Map the button type to its page number

    const buttonPage = type => {
      switch (type) {
        case 'first':
          return 1;

        case 'previous':
          return page - 1;

        case 'next':
          return page + 1;

        case 'last':
          return count;

        default:
          return null;
      }
    }; // Convert the basic item list to PaginationItem props objects


    const items = itemList.map(item => {
      return typeof item === 'number' ? {
        onClick: event => {
          handleClick(event, item);
        },
        type: 'page',
        page: item,
        selected: item === page,
        disabled,
        'aria-current': item === page ? 'true' : undefined
      } : {
        onClick: event => {
          handleClick(event, buttonPage(item));
        },
        type: item,
        page: buttonPage(item),
        selected: false,
        disabled: disabled || item.indexOf('ellipsis') === -1 && (item === 'next' || item === 'last' ? page >= count : page <= 1)
      };
    });
    return _extends({
      items
    }, other);
  }

  function getPaginationItemUtilityClass(slot) {
    return generateUtilityClass('MuiPaginationItem', slot);
  }
  const paginationItemClasses = generateUtilityClasses('MuiPaginationItem', ['root', 'page', 'sizeSmall', 'sizeLarge', 'text', 'textPrimary', 'textSecondary', 'outlined', 'outlinedPrimary', 'outlinedSecondary', 'rounded', 'ellipsis', 'firstLast', 'previousNext', 'focusVisible', 'disabled', 'selected', 'icon']);
  var paginationItemClasses$1 = paginationItemClasses;

  var FirstPageIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), 'FirstPage');

  var LastPageIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), 'LastPage');

  var NavigateBeforeIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
  }), 'NavigateBefore');

  var NavigateNextIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
  }), 'NavigateNext');

  const _excluded$K = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "type", "variant"];

  const overridesResolver = (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.variant === 'text' && styles[`text${capitalize(ownerState.color)}`], ownerState.variant === 'outlined' && styles[`outlined${capitalize(ownerState.color)}`], ownerState.shape === 'rounded' && styles.rounded, ownerState.type === 'page' && styles.page, (ownerState.type === 'start-ellipsis' || ownerState.type === 'end-ellipsis') && styles.ellipsis, (ownerState.type === 'previous' || ownerState.type === 'next') && styles.previousNext, (ownerState.type === 'first' || ownerState.type === 'last') && styles.firstLast];
  };

  const useUtilityClasses$B = ownerState => {
    const {
      classes,
      color,
      disabled,
      selected,
      size,
      shape,
      type,
      variant
    } = ownerState;
    const slots = {
      root: ['root', `size${capitalize(size)}`, variant, shape, color !== 'standard' && `${variant}${capitalize(color)}`, disabled && 'disabled', selected && 'selected', {
        page: 'page',
        first: 'firstLast',
        last: 'firstLast',
        'start-ellipsis': 'ellipsis',
        'end-ellipsis': 'ellipsis',
        previous: 'previousNext',
        next: 'previousNext'
      }[type]],
      icon: ['icon']
    };
    return composeClasses(slots, getPaginationItemUtilityClass, classes);
  };

  const PaginationItemEllipsis = styled$1('div', {
    name: 'MuiPaginationItem',
    slot: 'Root',
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    borderRadius: 32 / 2,
    textAlign: 'center',
    boxSizing: 'border-box',
    minWidth: 32,
    padding: '0 6px',
    margin: '0 3px',
    color: theme.palette.text.primary,
    height: 'auto',
    [`&.${paginationItemClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    }
  }, ownerState.size === 'small' && {
    minWidth: 26,
    borderRadius: 26 / 2,
    margin: '0 1px',
    padding: '0 4px'
  }, ownerState.size === 'large' && {
    minWidth: 40,
    borderRadius: 40 / 2,
    padding: '0 10px',
    fontSize: theme.typography.pxToRem(15)
  }));
  const PaginationItemPage = styled$1(ButtonBase$1, {
    name: 'MuiPaginationItem',
    slot: 'Root',
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    borderRadius: 32 / 2,
    textAlign: 'center',
    boxSizing: 'border-box',
    minWidth: 32,
    height: 32,
    padding: '0 6px',
    margin: '0 3px',
    color: theme.palette.text.primary,
    [`&.${paginationItemClasses$1.focusVisible}`]: {
      backgroundColor: theme.palette.action.focus
    },
    [`&.${paginationItemClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    },
    transition: theme.transitions.create(['color', 'background-color'], {
      duration: theme.transitions.duration.short
    }),
    '&:hover': {
      backgroundColor: theme.palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    },
    [`&.${paginationItemClasses$1.selected}`]: {
      backgroundColor: theme.palette.action.selected,
      '&:hover': {
        backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.action.selected
        }
      },
      [`&.${paginationItemClasses$1.focusVisible}`]: {
        backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      [`&.${paginationItemClasses$1.disabled}`]: {
        opacity: 1,
        color: theme.palette.action.disabled,
        backgroundColor: theme.palette.action.selected
      }
    }
  }, ownerState.size === 'small' && {
    minWidth: 26,
    height: 26,
    borderRadius: 26 / 2,
    margin: '0 1px',
    padding: '0 4px'
  }, ownerState.size === 'large' && {
    minWidth: 40,
    height: 40,
    borderRadius: 40 / 2,
    padding: '0 10px',
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.shape === 'rounded' && {
    borderRadius: theme.shape.borderRadius
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === 'text' && {
    [`&.${paginationItemClasses$1.selected}`]: _extends({}, ownerState.color !== 'standard' && {
      color: theme.palette[ownerState.color].contrastText,
      backgroundColor: theme.palette[ownerState.color].main,
      '&:hover': {
        backgroundColor: theme.palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette[ownerState.color].main
        }
      },
      [`&.${paginationItemClasses$1.focusVisible}`]: {
        backgroundColor: theme.palette[ownerState.color].dark
      }
    }, {
      [`&.${paginationItemClasses$1.disabled}`]: {
        color: theme.palette.action.disabled
      }
    })
  }, ownerState.variant === 'outlined' && {
    border: `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`,
    [`&.${paginationItemClasses$1.selected}`]: _extends({}, ownerState.color !== 'standard' && {
      color: theme.palette[ownerState.color].main,
      border: `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`,
      backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity),
      '&:hover': {
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${paginationItemClasses$1.focusVisible}`]: {
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity)
      }
    }, {
      [`&.${paginationItemClasses$1.disabled}`]: {
        borderColor: theme.palette.action.disabledBackground,
        color: theme.palette.action.disabled
      }
    })
  }));
  const PaginationItemPageIcon = styled$1('div', {
    name: 'MuiPaginationItem',
    slot: 'Icon',
    overridesResolver: (props, styles) => styles.icon
  })(({
    theme,
    ownerState
  }) => _extends({
    fontSize: theme.typography.pxToRem(20),
    margin: '0 -8px'
  }, ownerState.size === 'small' && {
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === 'large' && {
    fontSize: theme.typography.pxToRem(22)
  }));
  const PaginationItem = /*#__PURE__*/React__namespace.forwardRef(function PaginationItem(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiPaginationItem'
    });

    const {
      className,
      color = 'standard',
      component,
      components = {
        first: FirstPageIcon,
        last: LastPageIcon,
        next: NavigateNextIcon,
        previous: NavigateBeforeIcon
      },
      disabled = false,
      page,
      selected = false,
      shape = 'circular',
      size = 'medium',
      type = 'page',
      variant = 'text'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$K);

    const ownerState = _extends({}, props, {
      color,
      disabled,
      selected,
      shape,
      size,
      type,
      variant
    });

    const theme = useTheme();
    const classes = useUtilityClasses$B(ownerState);
    const normalizedIcons = theme.direction === 'rtl' ? {
      previous: components.next || NavigateNextIcon,
      next: components.previous || NavigateBeforeIcon,
      last: components.first || FirstPageIcon,
      first: components.last || LastPageIcon
    } : {
      previous: components.previous || NavigateBeforeIcon,
      next: components.next || NavigateNextIcon,
      first: components.first || FirstPageIcon,
      last: components.last || LastPageIcon
    };
    const Icon = normalizedIcons[type];
    return type === 'start-ellipsis' || type === 'end-ellipsis' ? /*#__PURE__*/jsxRuntime_1(PaginationItemEllipsis, {
      ref: ref,
      ownerState: ownerState,
      className: clsx(classes.root, className),
      children: "\u2026"
    }) : /*#__PURE__*/jsxRuntime_2(PaginationItemPage, _extends({
      ref: ref,
      ownerState: ownerState,
      component: component,
      disabled: disabled,
      className: clsx(classes.root, className)
    }, other, {
      children: [type === 'page' && page, Icon ? /*#__PURE__*/jsxRuntime_1(PaginationItemPageIcon, {
        as: Icon,
        ownerState: ownerState,
        className: classes.icon
      }) : null]
    }));
  });
  PaginationItem.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The active color.
     * @default 'standard'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary', 'standard']), propTypes.string]),

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The components used for first, last, next & previous item type
     * @default {
     *   first: FirstPageIcon,
     *   last: LastPageIcon,
     *   next: NavigateNextIcon,
     *   previous: NavigateBeforeIcon,
     * }
     */
    components: propTypes.shape({
      first: propTypes.elementType,
      last: propTypes.elementType,
      next: propTypes.elementType,
      previous: propTypes.elementType
    }),

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * The current page number.
     */
    page: propTypes.node,

    /**
     * If `true` the pagination item is selected.
     * @default false
     */
    selected: propTypes.bool,

    /**
     * The shape of the pagination item.
     * @default 'circular'
     */
    shape: propTypes.oneOf(['circular', 'rounded']),

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The type of pagination item.
     * @default 'page'
     */
    type: propTypes.oneOf(['end-ellipsis', 'first', 'last', 'next', 'page', 'previous', 'start-ellipsis']),

    /**
     * The variant to use.
     * @default 'text'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['outlined', 'text']), propTypes.string])
  } ;
  var PaginationItem$1 = PaginationItem;

  const _excluded$J = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"];

  const useUtilityClasses$A = ownerState => {
    const {
      classes,
      variant
    } = ownerState;
    const slots = {
      root: ['root', variant],
      ul: ['ul']
    };
    return composeClasses(slots, getPaginationUtilityClass, classes);
  };

  const PaginationRoot = styled$1('nav', {
    name: 'MuiPagination',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant]];
    }
  })({});
  const PaginationUl = styled$1('ul', {
    name: 'MuiPagination',
    slot: 'Ul',
    overridesResolver: (props, styles) => styles.ul
  })({
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    padding: 0,
    margin: 0,
    listStyle: 'none'
  });

  function defaultGetAriaLabel$1(type, page, selected) {
    if (type === 'page') {
      return `${selected ? '' : 'Go to '}page ${page}`;
    }

    return `Go to ${type} page`;
  }

  const Pagination = /*#__PURE__*/React__namespace.forwardRef(function Pagination(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiPagination'
    });

    const {
      boundaryCount = 1,
      className,
      color = 'standard',
      count = 1,
      defaultPage = 1,
      disabled = false,
      getItemAriaLabel = defaultGetAriaLabel$1,
      hideNextButton = false,
      hidePrevButton = false,
      renderItem = item => /*#__PURE__*/jsxRuntime_1(PaginationItem$1, _extends({}, item)),
      shape = 'circular',
      showFirstButton = false,
      showLastButton = false,
      siblingCount = 1,
      size = 'medium',
      variant = 'text'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$J);

    const {
      items
    } = usePagination(_extends({}, props, {
      componentName: 'Pagination'
    }));

    const ownerState = _extends({}, props, {
      boundaryCount,
      color,
      count,
      defaultPage,
      disabled,
      getItemAriaLabel,
      hideNextButton,
      hidePrevButton,
      renderItem,
      shape,
      showFirstButton,
      showLastButton,
      siblingCount,
      size,
      variant
    });

    const classes = useUtilityClasses$A(ownerState);
    return /*#__PURE__*/jsxRuntime_1(PaginationRoot, _extends({
      "aria-label": "pagination navigation",
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(PaginationUl, {
        className: classes.ul,
        ownerState: ownerState,
        children: items.map((item, index) => /*#__PURE__*/jsxRuntime_1("li", {
          children: renderItem(_extends({}, item, {
            color,
            'aria-label': getItemAriaLabel(item.type, item.page, item.selected),
            shape,
            size,
            variant
          }))
        }, index))
      })
    }));
  }); // @default tags synced with default values from usePagination

  Pagination.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Number of always visible pages at the beginning and end.
     * @default 1
     */
    boundaryCount: integerPropType,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The active color.
     * @default 'standard'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary', 'standard']), propTypes.string]),

    /**
     * The total number of pages.
     * @default 1
     */
    count: integerPropType,

    /**
     * The page selected by default when the component is uncontrolled.
     * @default 1
     */
    defaultPage: integerPropType,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @param {bool} selected If true, the current page is selected.
     * @returns {string}
     */
    getItemAriaLabel: propTypes.func,

    /**
     * If `true`, hide the next-page button.
     * @default false
     */
    hideNextButton: propTypes.bool,

    /**
     * If `true`, hide the previous-page button.
     * @default false
     */
    hidePrevButton: propTypes.bool,

    /**
     * Callback fired when the page is changed.
     *
     * @param {React.ChangeEvent<unknown>} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onChange: propTypes.func,

    /**
     * The current page.
     */
    page: integerPropType,

    /**
     * Render the item.
     * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
     * @returns {ReactNode}
     * @default (item) => <PaginationItem {...item} />
     */
    renderItem: propTypes.func,

    /**
     * The shape of the pagination items.
     * @default 'circular'
     */
    shape: propTypes.oneOf(['circular', 'rounded']),

    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: propTypes.bool,

    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: propTypes.bool,

    /**
     * Number of always visible pages before and after the current page.
     * @default 1
     */
    siblingCount: integerPropType,

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'text'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['outlined', 'text']), propTypes.string])
  } ;
  var Pagination$1 = Pagination;

  var RadioButtonUncheckedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), 'RadioButtonUnchecked');

  var RadioButtonCheckedIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
  }), 'RadioButtonChecked');

  const RadioButtonIconRoot = styled$1('span')({
    position: 'relative',
    display: 'flex'
  });
  const RadioButtonIconBackground = styled$1(RadioButtonUncheckedIcon, {
    skipSx: true
  })({
    // Scale applied to prevent dot misalignment in Safari
    transform: 'scale(1)'
  });
  const RadioButtonIconDot = styled$1(RadioButtonCheckedIcon, {
    skipSx: true
  })(({
    theme,
    ownerState
  }) => _extends({
    left: 0,
    position: 'absolute',
    transform: 'scale(0)',
    transition: theme.transitions.create('transform', {
      easing: theme.transitions.easing.easeIn,
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.checked && {
    transform: 'scale(1)',
    transition: theme.transitions.create('transform', {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.shortest
    })
  }));
  /**
   * @ignore - internal component.
   */

  function RadioButtonIcon(props) {
    const {
      checked = false,
      classes = {},
      fontSize
    } = props;

    const ownerState = _extends({}, props, {
      checked
    });

    return /*#__PURE__*/jsxRuntime_2(RadioButtonIconRoot, {
      className: classes.root,
      ownerState: ownerState,
      children: [/*#__PURE__*/jsxRuntime_1(RadioButtonIconBackground, {
        fontSize: fontSize,
        className: classes.background,
        ownerState: ownerState
      }), /*#__PURE__*/jsxRuntime_1(RadioButtonIconDot, {
        fontSize: fontSize,
        className: classes.dot,
        ownerState: ownerState
      })]
    });
  }

  RadioButtonIcon.propTypes = {
    /**
     * If `true`, the component is checked.
     */
    checked: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object,

    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     */
    fontSize: propTypes.oneOf(['small', 'medium'])
  } ;

  /**
   * @ignore - internal component.
   */
  const RadioGroupContext = /*#__PURE__*/React__namespace.createContext(undefined);

  {
    RadioGroupContext.displayName = 'RadioGroupContext';
  }

  var RadioGroupContext$1 = RadioGroupContext;

  function useRadioGroup() {
    return React__namespace.useContext(RadioGroupContext$1);
  }

  function getRadioUtilityClass(slot) {
    return generateUtilityClass('MuiRadio', slot);
  }
  const radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary']);
  var radioClasses$1 = radioClasses;

  const _excluded$I = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size"];

  const useUtilityClasses$z = ownerState => {
    const {
      classes,
      color
    } = ownerState;
    const slots = {
      root: ['root', `color${capitalize(color)}`]
    };
    return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
  };

  const RadioRoot = styled$1(SwitchBase$1, {
    shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
    name: 'MuiRadio',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary,
    '&:hover': {
      backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }
  }, ownerState.color !== 'default' && {
    [`&.${radioClasses$1.checked}`]: {
      color: theme.palette[ownerState.color].main
    }
  }, {
    [`&.${radioClasses$1.disabled}`]: {
      color: theme.palette.action.disabled
    }
  }));

  function areEqualValues$1(a, b) {
    if (typeof b === 'object' && b !== null) {
      return a === b;
    } // The value could be a number, the DOM will stringify it anyway.


    return String(a) === String(b);
  }

  const defaultCheckedIcon = /*#__PURE__*/jsxRuntime_1(RadioButtonIcon, {
    checked: true
  });

  const defaultIcon$1 = /*#__PURE__*/jsxRuntime_1(RadioButtonIcon, {});

  const Radio = /*#__PURE__*/React__namespace.forwardRef(function Radio(inProps, ref) {
    var _defaultIcon$props$fo, _defaultCheckedIcon$p;

    const props = useThemeProps({
      props: inProps,
      name: 'MuiRadio'
    });

    const {
      checked: checkedProp,
      checkedIcon = defaultCheckedIcon,
      color = 'primary',
      icon = defaultIcon$1,
      name: nameProp,
      onChange: onChangeProp,
      size = 'medium'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$I);

    const ownerState = _extends({}, props, {
      color,
      size
    });

    const classes = useUtilityClasses$z(ownerState);
    const radioGroup = useRadioGroup();
    let checked = checkedProp;
    const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
    let name = nameProp;

    if (radioGroup) {
      if (typeof checked === 'undefined') {
        checked = areEqualValues$1(radioGroup.value, props.value);
      }

      if (typeof name === 'undefined') {
        name = radioGroup.name;
      }
    }

    return /*#__PURE__*/jsxRuntime_1(RadioRoot, _extends({
      type: "radio",
      icon: /*#__PURE__*/React__namespace.cloneElement(icon, {
        fontSize: (_defaultIcon$props$fo = defaultIcon$1.props.fontSize) != null ? _defaultIcon$props$fo : size
      }),
      checkedIcon: /*#__PURE__*/React__namespace.cloneElement(checkedIcon, {
        fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
      }),
      ownerState: ownerState,
      classes: classes,
      name: name,
      checked: checked,
      onChange: onChange,
      ref: ref
    }, other));
  });
  Radio.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the component is checked.
     */
    checked: propTypes.bool,

    /**
     * The icon to display when the component is checked.
     * @default <RadioButtonIcon checked />
     */
    checkedIcon: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     */
    disableRipple: propTypes.bool,

    /**
     * The icon to display when the component is unchecked.
     * @default <RadioButtonIcon />
     */
    icon: propTypes.node,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: propTypes.func,

    /**
     * If `true`, the `input` element is required.
     */
    required: propTypes.bool,

    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the component. The DOM API casts this to a string.
     */
    value: propTypes.any
  } ;
  var Radio$1 = Radio;

  const _excluded$H = ["actions", "children", "defaultValue", "name", "onChange", "value"];
  const RadioGroup = /*#__PURE__*/React__namespace.forwardRef(function RadioGroup(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      children,
      defaultValue,
      name: nameProp,
      onChange,
      value: valueProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$H);

    const rootRef = React__namespace.useRef(null);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: 'RadioGroup'
    });
    React__namespace.useImperativeHandle(actions, () => ({
      focus: () => {
        let input = rootRef.current.querySelector('input:not(:disabled):checked');

        if (!input) {
          input = rootRef.current.querySelector('input:not(:disabled)');
        }

        if (input) {
          input.focus();
        }
      }
    }), []);
    const handleRef = useForkRef(ref, rootRef);

    const handleChange = event => {
      setValueState(event.target.value);

      if (onChange) {
        onChange(event, event.target.value);
      }
    };

    const name = useId(nameProp);
    return /*#__PURE__*/jsxRuntime_1(RadioGroupContext$1.Provider, {
      value: {
        name,
        onChange: handleChange,
        value
      },
      children: /*#__PURE__*/jsxRuntime_1(FormGroup$1, _extends({
        role: "radiogroup",
        ref: handleRef
      }, other, {
        children: children
      }))
    });
  });
  RadioGroup.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * The name used to reference the value of the control.
     * If you don't provide this prop, it falls back to a randomly generated name.
     */
    name: propTypes.string,

    /**
     * Callback fired when a radio button is selected.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {string} value The value of the selected radio button.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * Value of the selected radio button. The DOM API casts this to a string.
     */
    value: propTypes.any
  } ;
  var RadioGroup$1 = RadioGroup;

  var Star = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
  }), 'Star');

  var StarBorder = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
  }), 'StarBorder');

  function getRatingUtilityClass(slot) {
    return generateUtilityClass('MuiRating', slot);
  }
  const ratingClasses = generateUtilityClasses('MuiRating', ['root', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'readOnly', 'disabled', 'focusVisible', 'visuallyHidden', 'pristine', 'label', 'labelEmptyValueActive', 'icon', 'iconEmpty', 'iconFilled', 'iconHover', 'iconFocus', 'iconActive', 'decimal']);
  var ratingClasses$1 = ratingClasses;

  const _excluded$G = ["value"],
        _excluded2$4 = ["className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "highlightSelectedOnly", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"];

  function clamp$1(value, min, max) {
    if (value < min) {
      return min;
    }

    if (value > max) {
      return max;
    }

    return value;
  }

  function getDecimalPrecision(num) {
    const decimalPart = num.toString().split('.')[1];
    return decimalPart ? decimalPart.length : 0;
  }

  function roundValueToPrecision(value, precision) {
    if (value == null) {
      return value;
    }

    const nearest = Math.round(value / precision) * precision;
    return Number(nearest.toFixed(getDecimalPrecision(precision)));
  }

  const useUtilityClasses$y = ownerState => {
    const {
      classes,
      size,
      readOnly,
      disabled,
      emptyValueFocused,
      focusVisible
    } = ownerState;
    const slots = {
      root: ['root', `size${capitalize(size)}`, disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readyOnly'],
      label: ['label', 'pristine'],
      labelEmptyValue: [emptyValueFocused && 'labelEmptyValueActive'],
      icon: ['icon'],
      iconEmpty: ['iconEmpty'],
      iconFilled: ['iconFilled'],
      iconHover: ['iconHover'],
      iconFocus: ['iconFocus'],
      iconActive: ['iconActive'],
      decimal: ['decimal'],
      visuallyHidden: ['visuallyHidden']
    };
    return composeClasses(slots, getRatingUtilityClass, classes);
  };

  const RatingRoot = styled$1('span', {
    name: 'MuiRating',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${ratingClasses$1.visuallyHidden}`]: styles.visuallyHidden
      }, styles.root, styles[`size${capitalize(ownerState.size)}`], ownerState.readOnly && styles.readOnly];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'inline-flex',
    // Required to position the pristine input absolutely
    position: 'relative',
    fontSize: theme.typography.pxToRem(24),
    color: '#faaf00',
    cursor: 'pointer',
    textAlign: 'left',
    WebkitTapHighlightColor: 'transparent',
    [`&.${ratingClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity,
      pointerEvents: 'none'
    },
    [`&.${ratingClasses$1.focusVisible} .${ratingClasses$1.iconActive}`]: {
      outline: '1px solid #999'
    },
    [`& .${ratingClasses$1.visuallyHidden}`]: visuallyHidden$1
  }, ownerState.size === 'small' && {
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === 'large' && {
    fontSize: theme.typography.pxToRem(30)
  }, ownerState.readOnly && {
    pointerEvents: 'none'
  }));
  const RatingLabel = styled$1('label', {
    name: 'MuiRating',
    slot: 'Label',
    overridesResolver: (props, styles) => styles.label
  })(({
    ownerState
  }) => _extends({
    cursor: 'inherit'
  }, ownerState.emptyValueFocused && {
    top: 0,
    bottom: 0,
    position: 'absolute',
    outline: '1px solid #999',
    width: '100%'
  }));
  const RatingIcon = styled$1('span', {
    name: 'MuiRating',
    slot: 'Icon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.icon, ownerState.iconEmpty && styles.iconEmpty, ownerState.iconFilled && styles.iconFilled, ownerState.iconHover && styles.iconHover, ownerState.iconFocus && styles.iconFocus, ownerState.iconActive && styles.iconActive];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    // Fit wrapper to actual icon size.
    display: 'flex',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest
    }),
    // Fix mouseLeave issue.
    // https://github.com/facebook/react/issues/4492
    pointerEvents: 'none'
  }, ownerState.iconActive && {
    transform: 'scale(1.2)'
  }, ownerState.iconEmpty && {
    color: theme.palette.action.disabled
  }));
  const RatingDecimal = styled$1('span', {
    name: 'MuiRating',
    slot: 'Decimal',
    shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'iconActive',
    overridesResolver: (props, styles) => {
      const {
        iconActive
      } = props;
      return [styles.decimal, iconActive && styles.iconActive];
    }
  })(({
    iconActive
  }) => _extends({
    position: 'relative'
  }, iconActive && {
    transform: 'scale(1.2)'
  }));

  function IconContainer(props) {
    const other = _objectWithoutPropertiesLoose(props, _excluded$G);

    return /*#__PURE__*/jsxRuntime_1("span", _extends({}, other));
  }

  IconContainer.propTypes = {
    value: propTypes.number.isRequired
  } ;

  function RatingItem(props) {
    const {
      classes,
      disabled,
      emptyIcon,
      focus,
      getLabelText,
      highlightSelectedOnly,
      hover,
      icon,
      IconContainerComponent,
      isActive,
      itemValue,
      labelProps,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      readOnly,
      ownerState,
      ratingValue,
      ratingValueRounded
    } = props;
    const isFilled = highlightSelectedOnly ? itemValue === ratingValue : itemValue <= ratingValue;
    const isHovered = itemValue <= hover;
    const isFocused = itemValue <= focus;
    const isChecked = itemValue === ratingValueRounded;
    const id = useId();

    const container = /*#__PURE__*/jsxRuntime_1(RatingIcon, {
      as: IconContainerComponent,
      value: itemValue,
      className: clsx(classes.icon, isFilled ? classes.iconFilled : classes.iconEmpty, isHovered && classes.iconHover, isFocused && classes.iconFocus, isActive && classes.iconActive),
      ownerState: _extends({}, ownerState, {
        iconEmpty: !isFilled,
        iconFilled: isFilled,
        iconHover: isHovered,
        iconFocus: isFocused,
        iconActive: isActive
      }),
      children: emptyIcon && !isFilled ? emptyIcon : icon
    });

    if (readOnly) {
      return /*#__PURE__*/jsxRuntime_1("span", _extends({}, labelProps, {
        children: container
      }));
    }

    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_2(RatingLabel, _extends({
        ownerState: _extends({}, ownerState, {
          emptyValueFocused: undefined
        }),
        htmlFor: id
      }, labelProps, {
        children: [container, /*#__PURE__*/jsxRuntime_1("span", {
          className: classes.visuallyHidden,
          children: getLabelText(itemValue)
        })]
      })), /*#__PURE__*/jsxRuntime_1("input", {
        className: classes.visuallyHidden,
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: onChange,
        onClick: onClick,
        disabled: disabled,
        value: itemValue,
        id: id,
        type: "radio",
        name: name,
        checked: isChecked
      })]
    });
  }

  RatingItem.propTypes = {
    classes: propTypes.object.isRequired,
    disabled: propTypes.bool.isRequired,
    emptyIcon: propTypes.node,
    focus: propTypes.number.isRequired,
    getLabelText: propTypes.func.isRequired,
    highlightSelectedOnly: propTypes.bool.isRequired,
    hover: propTypes.number.isRequired,
    icon: propTypes.node,
    IconContainerComponent: propTypes.elementType.isRequired,
    isActive: propTypes.bool.isRequired,
    itemValue: propTypes.number.isRequired,
    labelProps: propTypes.object,
    name: propTypes.string,
    onBlur: propTypes.func.isRequired,
    onChange: propTypes.func.isRequired,
    onClick: propTypes.func.isRequired,
    onFocus: propTypes.func.isRequired,
    ownerState: propTypes.object.isRequired,
    ratingValue: propTypes.number,
    ratingValueRounded: propTypes.number,
    readOnly: propTypes.bool.isRequired
  } ;

  const defaultIcon = /*#__PURE__*/jsxRuntime_1(Star, {
    fontSize: "inherit"
  });

  const defaultEmptyIcon = /*#__PURE__*/jsxRuntime_1(StarBorder, {
    fontSize: "inherit"
  });

  function defaultLabelText(value) {
    return `${value} Star${value !== 1 ? 's' : ''}`;
  }

  const Rating = /*#__PURE__*/React__namespace.forwardRef(function Rating(inProps, ref) {
    const props = useThemeProps({
      name: 'MuiRating',
      props: inProps
    });

    const {
      className,
      defaultValue = null,
      disabled = false,
      emptyIcon = defaultEmptyIcon,
      emptyLabelText = 'Empty',
      getLabelText = defaultLabelText,
      highlightSelectedOnly = false,
      icon = defaultIcon,
      IconContainerComponent = IconContainer,
      max = 5,
      name: nameProp,
      onChange,
      onChangeActive,
      onMouseLeave,
      onMouseMove,
      precision = 1,
      readOnly = false,
      size = 'medium',
      value: valueProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded2$4);

    const name = useId(nameProp);
    const [valueDerived, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: 'Rating'
    });
    const valueRounded = roundValueToPrecision(valueDerived, precision);
    const theme = useTheme();
    const [{
      hover,
      focus
    }, setState] = React__namespace.useState({
      hover: -1,
      focus: -1
    });
    let value = valueRounded;

    if (hover !== -1) {
      value = hover;
    }

    if (focus !== -1) {
      value = focus;
    }

    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible();
    const [focusVisible, setFocusVisible] = React__namespace.useState(false);
    const rootRef = React__namespace.useRef();
    const handleFocusRef = useForkRef(focusVisibleRef, rootRef);
    const handleRef = useForkRef(handleFocusRef, ref);

    const handleMouseMove = event => {
      if (onMouseMove) {
        onMouseMove(event);
      }

      const rootNode = rootRef.current;
      const {
        right,
        left
      } = rootNode.getBoundingClientRect();
      const {
        width
      } = rootNode.firstChild.getBoundingClientRect();
      let percent;

      if (theme.direction === 'rtl') {
        percent = (right - event.clientX) / (width * max);
      } else {
        percent = (event.clientX - left) / (width * max);
      }

      let newHover = roundValueToPrecision(max * percent + precision / 2, precision);
      newHover = clamp$1(newHover, precision, max);
      setState(prev => prev.hover === newHover && prev.focus === newHover ? prev : {
        hover: newHover,
        focus: newHover
      });
      setFocusVisible(false);

      if (onChangeActive && hover !== newHover) {
        onChangeActive(event, newHover);
      }
    };

    const handleMouseLeave = event => {
      if (onMouseLeave) {
        onMouseLeave(event);
      }

      const newHover = -1;
      setState({
        hover: newHover,
        focus: newHover
      });

      if (onChangeActive && hover !== newHover) {
        onChangeActive(event, newHover);
      }
    };

    const handleChange = event => {
      let newValue = event.target.value === '' ? null : parseFloat(event.target.value); // Give mouse priority over keyboard
      // Fix https://github.com/mui-org/material-ui/issues/22827

      if (hover !== -1) {
        newValue = hover;
      }

      setValueState(newValue);

      if (onChange) {
        onChange(event, newValue);
      }
    };

    const handleClear = event => {
      // Ignore keyboard events
      // https://github.com/facebook/react/issues/7407
      if (event.clientX === 0 && event.clientY === 0) {
        return;
      }

      setState({
        hover: -1,
        focus: -1
      });
      setValueState(null);

      if (onChange && parseFloat(event.target.value) === valueRounded) {
        onChange(event, null);
      }
    };

    const handleFocus = event => {
      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }

      const newFocus = parseFloat(event.target.value);
      setState(prev => ({
        hover: prev.hover,
        focus: newFocus
      }));
    };

    const handleBlur = event => {
      if (hover !== -1) {
        return;
      }

      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }

      const newFocus = -1;
      setState(prev => ({
        hover: prev.hover,
        focus: newFocus
      }));
    };

    const [emptyValueFocused, setEmptyValueFocused] = React__namespace.useState(false);

    const ownerState = _extends({}, props, {
      defaultValue,
      disabled,
      emptyIcon,
      emptyLabelText,
      emptyValueFocused,
      focusVisible,
      getLabelText,
      icon,
      IconContainerComponent,
      max,
      precision,
      readOnly,
      size
    });

    const classes = useUtilityClasses$y(ownerState);
    return /*#__PURE__*/jsxRuntime_2(RatingRoot, _extends({
      ref: handleRef,
      onMouseMove: handleMouseMove,
      onMouseLeave: handleMouseLeave,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      role: readOnly ? 'img' : null,
      "aria-label": readOnly ? getLabelText(value) : null
    }, other, {
      children: [Array.from(new Array(max)).map((_, index) => {
        const itemValue = index + 1;
        const ratingItemProps = {
          classes,
          disabled,
          emptyIcon,
          focus,
          getLabelText,
          highlightSelectedOnly,
          hover,
          icon,
          IconContainerComponent,
          name,
          onBlur: handleBlur,
          onChange: handleChange,
          onClick: handleClear,
          onFocus: handleFocus,
          ratingValue: value,
          ratingValueRounded: valueRounded,
          readOnly,
          ownerState
        };
        const isActive = itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1);

        if (precision < 1) {
          const items = Array.from(new Array(1 / precision));
          return /*#__PURE__*/jsxRuntime_1(RatingDecimal, {
            className: clsx(classes.decimal, isActive && classes.iconActive),
            ownerState: ownerState,
            iconActive: isActive,
            children: items.map(($, indexDecimal) => {
              const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
              return /*#__PURE__*/jsxRuntime_1(RatingItem, _extends({}, ratingItemProps, {
                // The icon is already displayed as active
                isActive: false,
                itemValue: itemDecimalValue,
                labelProps: {
                  style: items.length - 1 === indexDecimal ? {} : {
                    width: itemDecimalValue === value ? `${(indexDecimal + 1) * precision * 100}%` : '0%',
                    overflow: 'hidden',
                    position: 'absolute'
                  }
                }
              }), itemDecimalValue);
            })
          }, itemValue);
        }

        return /*#__PURE__*/jsxRuntime_1(RatingItem, _extends({}, ratingItemProps, {
          isActive: isActive,
          itemValue: itemValue
        }), itemValue);
      }), !readOnly && !disabled && /*#__PURE__*/jsxRuntime_2(RatingLabel, {
        className: clsx(classes.label, classes.labelEmptyValue),
        ownerState: ownerState,
        children: [/*#__PURE__*/jsxRuntime_1("input", {
          className: classes.visuallyHidden,
          value: "",
          id: `${name}-empty`,
          type: "radio",
          name: name,
          checked: valueRounded == null,
          onFocus: () => setEmptyValueFocused(true),
          onBlur: () => setEmptyValueFocused(false),
          onChange: handleChange
        }), /*#__PURE__*/jsxRuntime_1("span", {
          className: classes.visuallyHidden,
          children: emptyLabelText
        })]
      })]
    }));
  });
  Rating.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The default value. Use when the component is not controlled.
     * @default null
     */
    defaultValue: propTypes.number,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * The icon to display when empty.
     * @default <StarBorder fontSize="inherit" />
     */
    emptyIcon: propTypes.node,

    /**
     * The label read when the rating input is empty.
     * @default 'Empty'
     */
    emptyLabelText: propTypes.node,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @param {number} value The rating label's value to format.
     * @returns {string}
     * @default function defaultLabelText(value) {
     *   return `${value} Star${value !== 1 ? 's' : ''}`;
     * }
     */
    getLabelText: propTypes.func,

    /**
     * If `true`, only the selected icon will be highlighted.
     * @default false
     */
    highlightSelectedOnly: propTypes.bool,

    /**
     * The icon to display.
     * @default <Star fontSize="inherit" />
     */
    icon: propTypes.node,

    /**
     * The component containing the icon.
     * @default function IconContainer(props) {
     *   const { value, ...other } = props;
     *   return <span {...other} />;
     * }
     */
    IconContainerComponent: propTypes.elementType,

    /**
     * Maximum rating.
     * @default 5
     */
    max: propTypes.number,

    /**
     * The name attribute of the radio `input` elements.
     * This input `name` should be unique within the page.
     * Being unique within a form is insufficient since the `name` is used to generated IDs.
     */
    name: propTypes.string,

    /**
     * Callback fired when the value changes.
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {number|null} value The new value.
     */
    onChange: propTypes.func,

    /**
     * Callback function that is fired when the hover state changes.
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {number} value The new value.
     */
    onChangeActive: propTypes.func,

    /**
     * @ignore
     */
    onMouseLeave: propTypes.func,

    /**
     * @ignore
     */
    onMouseMove: propTypes.func,

    /**
     * The minimum increment value change allowed.
     * @default 1
     */
    precision: chainPropTypes(propTypes.number, props => {
      if (props.precision < 0.1) {
        return new Error(['MUI: The prop `precision` should be above 0.1.', 'A value below this limit has an imperceptible impact.'].join('\n'));
      }

      return null;
    }),

    /**
     * Removes all hover effects and pointer events.
     * @default false
     */
    readOnly: propTypes.bool,

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The rating value.
     */
    value: propTypes.number
  } ;
  var Rating$1 = Rating;

  function getScopedCssBaselineUtilityClass(slot) {
    return generateUtilityClass('MuiScopedCssBaseline', slot);
  }
  const scopedCssBaselineClasses = generateUtilityClasses('MuiScopedCssBaseline', ['root']);
  var scopedCssBaselineClasses$1 = scopedCssBaselineClasses;

  const _excluded$F = ["className", "component", "enableColorScheme"];

  const useUtilityClasses$x = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getScopedCssBaselineUtilityClass, classes);
  };

  const ScopedCssBaselineRoot = styled$1('div', {
    name: 'MuiScopedCssBaseline',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme,
    ownerState
  }) => {
    return _extends({}, html(theme, ownerState.enableColorScheme), body(theme), {
      '& *, & *::before, & *::after': {
        boxSizing: 'inherit'
      },
      '& strong, & b': {
        fontWeight: theme.typography.fontWeightBold
      }
    });
  });
  const ScopedCssBaseline = /*#__PURE__*/React__namespace.forwardRef(function ScopedCssBaseline(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiScopedCssBaseline'
    });

    const {
      className,
      component = 'div'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$F);

    const ownerState = _extends({}, props, {
      component
    });

    const classes = useUtilityClasses$x(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ScopedCssBaselineRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  ScopedCssBaseline.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Enable `color-scheme` css property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     */
    enableColorScheme: propTypes.bool
  } ;
  var ScopedCssBaseline$1 = ScopedCssBaseline;

  function getSelectUtilityClasses(slot) {
    return generateUtilityClass('MuiSelect', slot);
  }
  const selectClasses = generateUtilityClasses('MuiSelect', ['root', 'select', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
  var selectClasses$1 = selectClasses;

  const _excluded$E = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  const SelectSelect = styled$1('div', {
    name: 'MuiSelect',
    slot: 'Select',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [// Win specificity over the input base
      {
        [`&.${selectClasses$1.select}`]: styles.select
      }, {
        [`&.${selectClasses$1.select}`]: styles[ownerState.variant]
      }];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses$1.select}`]: {
      height: 'auto',
      // Resets for multiple select with chips
      minHeight: '1.4375em',
      // Required for select\text-field height consistency
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflow: 'hidden'
    }
  });
  const SelectIcon = styled$1('svg', {
    name: 'MuiSelect',
    slot: 'Icon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
    }
  })(nativeSelectIconStyles);
  const SelectNativeInput = styled$1('input', {
    shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'classes',
    name: 'MuiSelect',
    slot: 'NativeInput',
    overridesResolver: (props, styles) => styles.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: 'absolute',
    opacity: 0,
    pointerEvents: 'none',
    width: '100%',
    boxSizing: 'border-box'
  });

  function areEqualValues(a, b) {
    if (typeof b === 'object' && b !== null) {
      return a === b;
    } // The value could be a number, the DOM will stringify it anyway.


    return String(a) === String(b);
  }

  function isEmpty(display) {
    return display == null || typeof display === 'string' && !display.trim();
  }

  const useUtilityClasses$w = ownerState => {
    const {
      classes,
      variant,
      disabled,
      open
    } = ownerState;
    const slots = {
      select: ['select', variant, disabled && 'disabled'],
      icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled'],
      nativeInput: ['nativeInput']
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  /**
   * @ignore - internal component.
   */


  const SelectInput = /*#__PURE__*/React__namespace.forwardRef(function SelectInput(props, ref) {
    const {
      'aria-describedby': ariaDescribedby,
      'aria-label': ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultValue,
      disabled,
      displayEmpty,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = 'standard'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$E);

    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: 'Select'
    });
    const inputRef = React__namespace.useRef(null);
    const displayRef = React__namespace.useRef(null);
    const [displayNode, setDisplayNode] = React__namespace.useState(null);
    const {
      current: isOpenControlled
    } = React__namespace.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React__namespace.useState();
    const [openState, setOpenState] = React__namespace.useState(false);
    const handleRef = useForkRef(ref, inputRefProp);
    const handleDisplayRef = React__namespace.useCallback(node => {
      displayRef.current = node;

      if (node) {
        setDisplayNode(node);
      }
    }, []);
    React__namespace.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React__namespace.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React__namespace.useEffect(() => {
      const label = ownerDocument(displayRef.current).getElementById(labelId);

      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };

        label.addEventListener('click', handler);
        return () => {
          label.removeEventListener('click', handler);
        };
      }

      return undefined;
    }, [labelId]);

    const update = (open, event) => {
      if (open) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }

      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        setOpenState(open);
      }
    };

    const handleMouseDown = event => {
      // Ignore everything but left-click
      if (event.button !== 0) {
        return;
      } // Hijack the default focus behavior.


      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };

    const handleClose = event => {
      update(false, event);
    };

    const childrenArray = React__namespace.Children.toArray(children); // Support autofill.

    const handleChange = event => {
      const index = childrenArray.map(child => child.props.value).indexOf(event.target.value);

      if (index === -1) {
        return;
      }

      const child = childrenArray[index];
      setValueState(child.props.value);

      if (onChange) {
        onChange(event, child);
      }
    };

    const handleItemClick = child => event => {
      let newValue; // We use the tabindex attribute to signal the available options.

      if (!event.currentTarget.hasAttribute('tabindex')) {
        return;
      }

      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);

        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }

      if (child.props.onClick) {
        child.props.onClick(event);
      }

      if (value !== newValue) {
        setValueState(newValue);

        if (onChange) {
          // Redefine target to allow name and value to be read.
          // This allows seamless integration with the most popular form libraries.
          // https://github.com/mui-org/material-ui/issues/13485#issuecomment-676048492
          // Clone the event to not override `target` of the original event.
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, 'target', {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }

      if (!multiple) {
        update(false, event);
      }
    };

    const handleKeyDown = event => {
      if (!readOnly) {
        const validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
        // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
        'Enter'];

        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };

    const open = displayNode !== null && (isOpenControlled ? openProp : openState);

    const handleBlur = event => {
      // if open event.stopImmediatePropagation
      if (!open && onBlur) {
        // Preact support, target is read only property on a native event.
        Object.defineProperty(event, 'target', {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };

    delete other['aria-invalid'];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false; // No need to display any value if the field is empty.

    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }

    const items = childrenArray.map(child => {
      if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
        return null;
      }

      {
        if (reactIs_2(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      let selected;

      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` );
        }

        selected = value.some(v => areEqualValues(v, child.props.value));

        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);

        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }

      if (selected) {
        foundMatch = true;
      }

      return /*#__PURE__*/React__namespace.cloneElement(child, {
        'aria-selected': selected ? 'true' : undefined,
        onClick: handleItemClick(child),
        onKeyUp: event => {
          if (event.key === ' ') {
            // otherwise our MenuItems dispatches a click event
            // it's not behavior of the native <option> and causes
            // the select to close immediately since we open on space keydown
            event.preventDefault();
          }

          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: 'option',
        selected,
        value: undefined,
        // The value is most likely not a valid HTML attribute.
        'data-value': child.props.value // Instead, we provide it as a data attribute.

      });
    });

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      React__namespace.useEffect(() => {
        if (!foundMatch && !multiple && value !== '') {
          const values = childrenArray.map(child => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ''}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values.filter(x => x != null).map(x => `\`${x}\``).join(', ') || '""'}.`].join('\n'));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }

    if (computeDisplay) {
      display = multiple ? displayMultiple.join(', ') : displaySingle;
    } // Avoid performing a layout computation in the render method.


    let menuMinWidth = menuMinWidthState;

    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = displayNode.clientWidth;
    }

    let tabIndex;

    if (typeof tabIndexProp !== 'undefined') {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }

    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);

    const ownerState = _extends({}, props, {
      variant,
      value,
      open
    });

    const classes = useUtilityClasses$w(ownerState);
    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex: tabIndex,
        role: "button",
        "aria-disabled": disabled ? 'true' : undefined,
        "aria-expanded": open ? 'true' : 'false',
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus: onFocus
      }, SelectDisplayProps, {
        ownerState: ownerState,
        className: clsx(classes.select, className, SelectDisplayProps.className) // The id is required for proper a11y
        ,
        id: buttonId,
        children: isEmpty(display) ?
        /*#__PURE__*/
        // notranslate needed while Google Translate will not fix zero-width space issue
        // eslint-disable-next-line react/no-danger
        jsxRuntime_1("span", {
          className: "notranslate",
          dangerouslySetInnerHTML: {
            __html: '&#8203;'
          }
        }) : display
      })), /*#__PURE__*/jsxRuntime_1(SelectNativeInput, _extends({
        value: Array.isArray(value) ? value.join(',') : value,
        name: name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled: disabled,
        className: classes.nativeInput,
        autoFocus: autoFocus,
        ownerState: ownerState
      }, other)), /*#__PURE__*/jsxRuntime_1(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState: ownerState
      }), /*#__PURE__*/jsxRuntime_1(Menu$1, _extends({
        id: `menu-${name || ''}`,
        anchorEl: displayNode,
        open: open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'center'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'center'
        }
      }, MenuProps, {
        MenuListProps: _extends({
          'aria-labelledby': labelId,
          role: 'listbox',
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends({}, MenuProps.PaperProps, {
          style: _extends({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        }),
        children: items
      }))]
    });
  });
  SelectInput.propTypes = {
    /**
     * @ignore
     */
    'aria-describedby': propTypes.string,

    /**
     * @ignore
     */
    'aria-label': propTypes.string,

    /**
     * @ignore
     */
    autoFocus: propTypes.bool,

    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: propTypes.bool,

    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: propTypes.object,

    /**
     * The CSS class name of the select element.
     */
    className: propTypes.string,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the select is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: propTypes.bool,

    /**
     * The icon that displays the arrow.
     */
    IconComponent: propTypes.elementType.isRequired,

    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType$1,

    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: propTypes.string,

    /**
     * Props applied to the [`Menu`](/api/menu/) element.
     */
    MenuProps: propTypes.object,

    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: propTypes.bool,

    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: propTypes.string,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: propTypes.func,

    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * @ignore
     */
    readOnly: propTypes.bool,

    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: propTypes.func,

    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: propTypes.object,

    /**
     * @ignore
     */
    tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * @ignore
     */
    type: propTypes.any,

    /**
     * The input value.
     */
    value: propTypes.any,

    /**
     * The variant to use.
     */
    variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
  } ;
  var SelectInput$1 = SelectInput;

  var _Input, _FilledInput;

  const _excluded$D = ["autoWidth", "children", "classes", "className", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"],
        _excluded2$3 = ["root"];

  const useUtilityClasses$v = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };

  const Select = /*#__PURE__*/React__namespace.forwardRef(function Select(inProps, ref) {
    const props = useThemeProps({
      name: 'MuiSelect',
      props: inProps
    });

    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      displayEmpty = false,
      IconComponent = ArrowDropDownIcon,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProps = 'outlined'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$D);

    const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ['variant']
    });
    const variant = fcs.variant || variantProps;
    const InputComponent = input || {
      standard: _Input || (_Input = /*#__PURE__*/jsxRuntime_1(Input$1, {})),
      outlined: /*#__PURE__*/jsxRuntime_1(OutlinedInput$1, {
        label: label
      }),
      filled: _FilledInput || (_FilledInput = /*#__PURE__*/jsxRuntime_1(FilledInput$1, {}))
    }[variant];

    const ownerState = _extends({}, props, {
      classes: classesProp
    });

    const classes = useUtilityClasses$v(ownerState);

    const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2$3);

    const inputComponentRef = useForkRef(ref, InputComponent.ref);
    return /*#__PURE__*/React__namespace.cloneElement(InputComponent, _extends({
      // Most of the logic is implemented in `SelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent,
      inputProps: _extends({
        children,
        IconComponent,
        variant,
        type: undefined,
        // We render a select. We can ignore the type provided by the `Input`.
        multiple
      }, native ? {
        id
      } : {
        autoWidth,
        displayEmpty,
        labelId,
        MenuProps,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps: _extends({
          id
        }, SelectDisplayProps)
      }, inputProps, {
        classes: inputProps ? deepmerge(otherClasses, inputProps.classes) : otherClasses
      }, input ? input.props.inputProps : {})
    }, multiple && native && variant === 'outlined' ? {
      notched: true
    } : {}, {
      ref: inputComponentRef,
      className: clsx(classes.root, InputComponent.props.className, className)
    }, other));
  });
  Select.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: propTypes.bool,

    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: propTypes.bool,

    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: propTypes.elementType,

    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: propTypes.string,

    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: propTypes.element,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: propTypes.object,

    /**
     * See [OutlinedInput#label](/api/outlined-input/#props)
     */
    label: propTypes.node,

    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: propTypes.string,

    /**
     * Props applied to the [`Menu`](/api/menu/) element.
     */
    MenuProps: propTypes.object,

    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: propTypes.bool,

    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: propTypes.bool,

    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<T>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: propTypes.func,

    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: propTypes.func,

    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: propTypes.func,

    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: propTypes.bool,

    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: propTypes.func,

    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: propTypes.any,

    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  Select.muiName = 'Select';
  var Select$1 = Select;

  function getSkeletonUtilityClass(slot) {
    return generateUtilityClass('MuiSkeleton', slot);
  }
  const skeletonClasses = generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);
  var skeletonClasses$1 = skeletonClasses;

  const _excluded$C = ["animation", "className", "component", "height", "style", "variant", "width"];

  let _ = t => t,
      _t,
      _t2,
      _t3,
      _t4;

  const useUtilityClasses$u = ownerState => {
    const {
      classes,
      variant,
      animation,
      hasChildren,
      width,
      height
    } = ownerState;
    const slots = {
      root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']
    };
    return composeClasses(slots, getSkeletonUtilityClass, classes);
  };

  const pulseKeyframe = keyframes(_t || (_t = _`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
  const waveKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
  const SkeletonRoot = styled$1('span', {
    name: 'MuiSkeleton',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];
    }
  })(({
    theme,
    ownerState
  }) => {
    const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';
    const radiusValue = toUnitless(theme.shape.borderRadius);
    return _extends({
      display: 'block',
      // Create a "on paper" color with sufficient contrast retaining the color
      backgroundColor: alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),
      height: '1.2em'
    }, ownerState.variant === 'text' && {
      marginTop: 0,
      marginBottom: 0,
      height: 'auto',
      transformOrigin: '0 55%',
      transform: 'scale(1, 0.60)',
      borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
      '&:empty:before': {
        content: '"\\00a0"'
      }
    }, ownerState.variant === 'circular' && {
      borderRadius: '50%'
    }, ownerState.hasChildren && {
      '& > *': {
        visibility: 'hidden'
      }
    }, ownerState.hasChildren && !ownerState.width && {
      maxWidth: 'fit-content'
    }, ownerState.hasChildren && !ownerState.height && {
      height: 'auto'
    });
  }, ({
    ownerState
  }) => ownerState.animation === 'pulse' && css(_t3 || (_t3 = _`
      animation: ${0} 1.5s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
    ownerState,
    theme
  }) => ownerState.animation === 'wave' && css(_t4 || (_t4 = _`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(90deg, transparent, ${0}, transparent);
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, theme.palette.action.hover));
  const Skeleton = /*#__PURE__*/React__namespace.forwardRef(function Skeleton(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSkeleton'
    });

    const {
      animation = 'pulse',
      className,
      component = 'span',
      height,
      style,
      variant = 'text',
      width
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$C);

    const ownerState = _extends({}, props, {
      animation,
      component,
      variant,
      hasChildren: Boolean(other.children)
    });

    const classes = useUtilityClasses$u(ownerState);
    return /*#__PURE__*/jsxRuntime_1(SkeletonRoot, _extends({
      as: component,
      ref: ref,
      className: clsx(classes.root, className),
      ownerState: ownerState
    }, other, {
      style: _extends({
        width,
        height
      }, style)
    }));
  });
  Skeleton.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The animation.
     * If `false` the animation effect is disabled.
     * @default 'pulse'
     */
    animation: propTypes.oneOf(['pulse', 'wave', false]),

    /**
     * Optional children to infer width and height from.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Height of the skeleton.
     * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
     */
    height: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The type of content that will be rendered.
     * @default 'text'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['circular', 'rectangular', 'text']), propTypes.string]),

    /**
     * Width of the skeleton.
     * Useful when the skeleton is inside an inline element with no width of its own.
     */
    width: propTypes.oneOfType([propTypes.number, propTypes.string])
  } ;
  var Skeleton$1 = Skeleton;

  const _excluded$B = ["components", "componentsProps", "color", "size"];
  const sliderClasses = _extends({}, sliderUnstyledClasses$1, generateUtilityClasses('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary', 'sizeSmall', 'thumbSizeSmall']));
  const SliderRoot = styled$1('span', {
    name: 'MuiSlider',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      const marks = ownerState.marksProp === true && ownerState.step !== null ? [...Array(Math.floor((ownerState.max - ownerState.min) / ownerState.step) + 1)].map((_, index) => ({
        value: ownerState.min + ownerState.step * index
      })) : ownerState.marksProp || [];
      const marked = marks.length > 0 && marks.some(mark => mark.label);
      return [styles.root, styles[`color${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    borderRadius: 12,
    boxSizing: 'content-box',
    display: 'inline-block',
    position: 'relative',
    cursor: 'pointer',
    touchAction: 'none',
    color: theme.palette[ownerState.color].main,
    WebkitTapHighlightColor: 'transparent'
  }, ownerState.orientation === 'horizontal' && _extends({
    height: 4,
    width: '100%',
    padding: '13px 0',
    // The primary input mechanism of the device includes a pointing device of limited accuracy.
    '@media (pointer: coarse)': {
      // Reach 42px touch target, about ~8mm on screen.
      padding: '20px 0'
    }
  }, ownerState.size === 'small' && {
    height: 2
  }, ownerState.marked && {
    marginBottom: 20
  }), ownerState.orientation === 'vertical' && _extends({
    height: '100%',
    width: 4,
    padding: '0 13px',
    // The primary input mechanism of the device includes a pointing device of limited accuracy.
    '@media (pointer: coarse)': {
      // Reach 42px touch target, about ~8mm on screen.
      padding: '0 20px'
    }
  }, ownerState.size === 'small' && {
    width: 2
  }, ownerState.marked && {
    marginRight: 44
  }), {
    '@media print': {
      colorAdjust: 'exact'
    },
    [`&.${sliderClasses.disabled}`]: {
      pointerEvents: 'none',
      cursor: 'default',
      color: theme.palette.grey[400]
    },
    [`&.${sliderClasses.dragging}`]: {
      [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
        transition: 'none'
      }
    }
  }));
  const SliderRail = styled$1('span', {
    name: 'MuiSlider',
    slot: 'Rail',
    overridesResolver: (props, styles) => styles.rail
  })(({
    ownerState
  }) => _extends({
    display: 'block',
    position: 'absolute',
    borderRadius: 'inherit',
    backgroundColor: 'currentColor',
    opacity: 0.38
  }, ownerState.orientation === 'horizontal' && {
    width: '100%',
    height: 'inherit',
    top: '50%',
    transform: 'translateY(-50%)'
  }, ownerState.orientation === 'vertical' && {
    height: '100%',
    width: 'inherit',
    left: '50%',
    transform: 'translateX(-50%)'
  }, ownerState.track === 'inverted' && {
    opacity: 1
  }));
  const SliderTrack = styled$1('span', {
    name: 'MuiSlider',
    slot: 'Track',
    overridesResolver: (props, styles) => styles.track
  })(({
    theme,
    ownerState
  }) => {
    const color = // Same logic as the LinearProgress track color
    theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);
    return _extends({
      display: 'block',
      position: 'absolute',
      borderRadius: 'inherit',
      border: '1px solid currentColor',
      backgroundColor: 'currentColor',
      transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === 'small' && {
      border: 'none'
    }, ownerState.orientation === 'horizontal' && {
      height: 'inherit',
      top: '50%',
      transform: 'translateY(-50%)'
    }, ownerState.orientation === 'vertical' && {
      width: 'inherit',
      left: '50%',
      transform: 'translateX(-50%)'
    }, ownerState.track === false && {
      display: 'none'
    }, ownerState.track === 'inverted' && {
      backgroundColor: color,
      borderColor: color
    });
  });
  const SliderThumb = styled$1('span', {
    name: 'MuiSlider',
    slot: 'Thumb',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.thumb, styles[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`thumbSize${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: 'absolute',
    width: 20,
    height: 20,
    boxSizing: 'border-box',
    borderRadius: '50%',
    outline: 0,
    backgroundColor: 'currentColor',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.size === 'small' && {
    width: 12,
    height: 12
  }, ownerState.orientation === 'horizontal' && {
    top: '50%',
    transform: 'translate(-50%, -50%)'
  }, ownerState.orientation === 'vertical' && {
    left: '50%',
    transform: 'translate(-50%, 50%)'
  }, {
    '&:before': _extends({
      position: 'absolute',
      content: '""',
      borderRadius: 'inherit',
      width: '100%',
      height: '100%',
      boxShadow: theme.shadows[2]
    }, ownerState.size === 'small' && {
      boxShadow: 'none'
    }),
    '&::after': {
      position: 'absolute',
      content: '""',
      borderRadius: '50%',
      // 42px is the hit target
      width: 42,
      height: 42,
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)'
    },
    [`&:hover, &.${sliderClasses.focusVisible}`]: {
      boxShadow: `0px 0px 0px 8px ${alpha(theme.palette[ownerState.color].main, 0.16)}`,
      '@media (hover: none)': {
        boxShadow: 'none'
      }
    },
    [`&.${sliderClasses.active}`]: {
      boxShadow: `0px 0px 0px 14px ${alpha(theme.palette[ownerState.color].main, 0.16)}`
    },
    [`&.${sliderClasses.disabled}`]: {
      '&:hover': {
        boxShadow: 'none'
      }
    }
  }));
  const SliderValueLabel = styled$1(SliderValueLabelUnstyled, {
    name: 'MuiSlider',
    slot: 'ValueLabel',
    overridesResolver: (props, styles) => styles.valueLabel
  })(({
    theme,
    ownerState
  }) => _extends({
    [`&.${sliderClasses.valueLabelOpen}`]: {
      transform: 'translateY(-100%) scale(1)'
    },
    zIndex: 1,
    whiteSpace: 'nowrap'
  }, theme.typography.body2, {
    fontWeight: 500,
    transition: theme.transitions.create(['transform'], {
      duration: theme.transitions.duration.shortest
    }),
    top: -10,
    transformOrigin: 'bottom center',
    transform: 'translateY(-100%) scale(0)',
    position: 'absolute',
    backgroundColor: theme.palette.grey[600],
    borderRadius: 2,
    color: theme.palette.common.white,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: '0.25rem 0.75rem'
  }, ownerState.size === 'small' && {
    fontSize: theme.typography.pxToRem(12),
    padding: '0.25rem 0.5rem'
  }, {
    '&:before': {
      position: 'absolute',
      content: '""',
      width: 8,
      height: 8,
      bottom: 0,
      left: '50%',
      transform: 'translate(-50%, 50%) rotate(45deg)',
      backgroundColor: 'inherit'
    }
  }));
  const SliderMark = styled$1('span', {
    name: 'MuiSlider',
    slot: 'Mark',
    shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markActive',
    overridesResolver: (props, styles) => styles.mark
  })(({
    theme,
    ownerState,
    markActive
  }) => _extends({
    position: 'absolute',
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: 'currentColor'
  }, ownerState.orientation === 'horizontal' && {
    top: '50%',
    transform: 'translate(-1px, -50%)'
  }, ownerState.orientation === 'vertical' && {
    left: '50%',
    transform: 'translate(-50%, 1px)'
  }, markActive && {
    backgroundColor: theme.palette.background.paper,
    opacity: 0.8
  }));
  const SliderMarkLabel = styled$1('span', {
    name: 'MuiSlider',
    slot: 'MarkLabel',
    shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markLabelActive',
    overridesResolver: (props, styles) => styles.markLabel
  })(({
    theme,
    ownerState,
    markLabelActive
  }) => _extends({}, theme.typography.body2, {
    color: theme.palette.text.secondary,
    position: 'absolute',
    whiteSpace: 'nowrap'
  }, ownerState.orientation === 'horizontal' && {
    top: 30,
    transform: 'translateX(-50%)',
    '@media (pointer: coarse)': {
      top: 40
    }
  }, ownerState.orientation === 'vertical' && {
    left: 36,
    transform: 'translateY(50%)',
    '@media (pointer: coarse)': {
      left: 44
    }
  }, markLabelActive && {
    color: theme.palette.text.primary
  }));
  SliderRoot.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * @ignore
     */
    ownerState: propTypes.shape({
      'aria-label': propTypes.string,
      'aria-labelledby': propTypes.string,
      'aria-valuetext': propTypes.string,
      classes: propTypes.object,
      color: propTypes.oneOf(['primary', 'secondary']),
      defaultValue: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number]),
      disabled: propTypes.bool,
      getAriaLabel: propTypes.func,
      getAriaValueText: propTypes.func,
      isRtl: propTypes.bool,
      marks: propTypes.oneOfType([propTypes.arrayOf(propTypes.shape({
        label: propTypes.node,
        value: propTypes.number.isRequired
      })), propTypes.bool]),
      max: propTypes.number,
      min: propTypes.number,
      name: propTypes.string,
      onChange: propTypes.func,
      onChangeCommitted: propTypes.func,
      orientation: propTypes.oneOf(['horizontal', 'vertical']),
      scale: propTypes.func,
      step: propTypes.number,
      track: propTypes.oneOf(['inverted', 'normal', false]),
      value: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number]),
      valueLabelDisplay: propTypes.oneOf(['auto', 'off', 'on']),
      valueLabelFormat: propTypes.oneOfType([propTypes.func, propTypes.string])
    })
  };

  const extendUtilityClasses = ownerState => {
    const {
      color,
      size,
      classes = {}
    } = ownerState;
    return _extends({}, classes, {
      root: clsx(classes.root, getSliderUtilityClass(`color${capitalize(color)}`), classes[`color${capitalize(color)}`], size && [getSliderUtilityClass(`size${capitalize(size)}`), classes[`size${capitalize(size)}`]]),
      thumb: clsx(classes.thumb, getSliderUtilityClass(`thumbColor${capitalize(color)}`), classes[`thumbColor${capitalize(color)}`], size && [getSliderUtilityClass(`thumbSize${capitalize(size)}`), classes[`thumbSize${capitalize(size)}`]])
    });
  };

  const shouldSpreadOwnerState = Component => {
    return !Component || !isHostComponent(Component);
  };

  const Slider = /*#__PURE__*/React__namespace.forwardRef(function Slider(inputProps, ref) {
    var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;

    const props = useThemeProps({
      props: inputProps,
      name: 'MuiSlider'
    });
    const theme = useTheme();
    const isRtl = theme.direction === 'rtl';

    const {
      components = {},
      componentsProps = {},
      color = 'primary',
      size = 'medium'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$B);

    const ownerState = _extends({}, props, {
      color,
      size
    });

    const classes = extendUtilityClasses(ownerState);
    return /*#__PURE__*/jsxRuntime_1(SliderUnstyled$1, _extends({}, other, {
      isRtl: isRtl,
      components: _extends({
        Root: SliderRoot,
        Rail: SliderRail,
        Track: SliderTrack,
        Thumb: SliderThumb,
        ValueLabel: SliderValueLabel,
        Mark: SliderMark,
        MarkLabel: SliderMarkLabel
      }, components),
      componentsProps: _extends({}, componentsProps, {
        root: _extends({}, componentsProps.root, shouldSpreadOwnerState(components.Root) && {
          ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
            color,
            size
          })
        }),
        thumb: _extends({}, componentsProps.thumb, shouldSpreadOwnerState(components.Thumb) && {
          ownerState: _extends({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
            color,
            size
          })
        }),
        track: _extends({}, componentsProps.track, shouldSpreadOwnerState(components.Track) && {
          ownerState: _extends({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
            color,
            size
          })
        }),
        valueLabel: _extends({}, componentsProps.valueLabel, shouldSpreadOwnerState(components.ValueLabel) && {
          ownerState: _extends({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
            color,
            size
          })
        })
      }),
      classes: classes,
      ref: ref
    }));
  });
  Slider.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The label of the slider.
     */
    'aria-label': chainPropTypes(propTypes.string, props => {
      const range = Array.isArray(props.value || props.defaultValue);

      if (range && props['aria-label'] != null) {
        return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
      }

      return null;
    }),

    /**
     * The id of the element containing a label for the slider.
     */
    'aria-labelledby': propTypes.string,

    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    'aria-valuetext': chainPropTypes(propTypes.string, props => {
      const range = Array.isArray(props.value || props.defaultValue);

      if (range && props['aria-valuetext'] != null) {
        return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
      }

      return null;
    }),

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary']), propTypes.string]),

    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Mark: propTypes.elementType,
      MarkLabel: propTypes.elementType,
      Rail: propTypes.elementType,
      Root: propTypes.elementType,
      Thumb: propTypes.elementType,
      Track: propTypes.elementType,
      ValueLabel: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number]),

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: propTypes.bool,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: propTypes.func,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: propTypes.func,

    /**
     * Indicates whether the theme context has rtl direction. It is set automatically.
     * @default false
     */
    isRtl: propTypes.bool,

    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: propTypes.oneOfType([propTypes.arrayOf(propTypes.shape({
      label: propTypes.node,
      value: propTypes.number.isRequired
    })), propTypes.bool]),

    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: propTypes.number,

    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: propTypes.number,

    /**
     * Name attribute of the hidden `input` element.
     */
    name: propTypes.string,

    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: propTypes.func,

    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: propTypes.func,

    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * A transformation function, to change the scale of the slider.
     * @default (x) => x
     */
    scale: propTypes.func,

    /**
     * The size of the slider.
     * @default 'medium'
     */
    size: propTypes.oneOf(['small', 'medium']),

    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: propTypes.number,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: propTypes.number,

    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: propTypes.oneOf(['inverted', 'normal', false]),

    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: propTypes.oneOfType([propTypes.arrayOf(propTypes.number), propTypes.number]),

    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: propTypes.oneOf(['auto', 'off', 'on']),

    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @default (x) => x
     */
    valueLabelFormat: propTypes.oneOfType([propTypes.func, propTypes.string])
  } ;
  var Slider$1 = Slider;

  function getSnackbarContentUtilityClass(slot) {
    return generateUtilityClass('MuiSnackbarContent', slot);
  }
  const snackbarContentClasses = generateUtilityClasses('MuiSnackbarContent', ['root', 'message', 'action']);
  var snackbarContentClasses$1 = snackbarContentClasses;

  const _excluded$A = ["action", "className", "message", "role"];

  const useUtilityClasses$t = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      action: ['action'],
      message: ['message']
    };
    return composeClasses(slots, getSnackbarContentUtilityClass, classes);
  };

  const SnackbarContentRoot = styled$1(Paper$1, {
    name: 'MuiSnackbarContent',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => {
    const emphasis = theme.palette.mode === 'light' ? 0.8 : 0.98;
    const backgroundColor = emphasize(theme.palette.background.default, emphasis);
    return _extends({}, theme.typography.body2, {
      color: theme.palette.getContrastText(backgroundColor),
      backgroundColor,
      display: 'flex',
      alignItems: 'center',
      flexWrap: 'wrap',
      padding: '6px 16px',
      borderRadius: theme.shape.borderRadius,
      flexGrow: 1,
      [theme.breakpoints.up('sm')]: {
        flexGrow: 'initial',
        minWidth: 288
      }
    });
  });
  const SnackbarContentMessage = styled$1('div', {
    name: 'MuiSnackbarContent',
    slot: 'Message',
    overridesResolver: (props, styles) => styles.message
  })({
    padding: '8px 0'
  });
  const SnackbarContentAction = styled$1('div', {
    name: 'MuiSnackbarContent',
    slot: 'Action',
    overridesResolver: (props, styles) => styles.action
  })({
    display: 'flex',
    alignItems: 'center',
    marginLeft: 'auto',
    paddingLeft: 16,
    marginRight: -8
  });
  const SnackbarContent = /*#__PURE__*/React__namespace.forwardRef(function SnackbarContent(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSnackbarContent'
    });

    const {
      action,
      className,
      message,
      role = 'alert'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$A);

    const ownerState = props;
    const classes = useUtilityClasses$t(ownerState);
    return /*#__PURE__*/jsxRuntime_2(SnackbarContentRoot, _extends({
      role: role,
      square: true,
      elevation: 6,
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: [/*#__PURE__*/jsxRuntime_1(SnackbarContentMessage, {
        className: classes.message,
        ownerState: ownerState,
        children: message
      }), action ? /*#__PURE__*/jsxRuntime_1(SnackbarContentAction, {
        className: classes.action,
        ownerState: ownerState,
        children: action
      }) : null]
    }));
  });
  SnackbarContent.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The message to display.
     */
    message: propTypes.node,

    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: propTypes
    /* @typescript-to-proptypes-ignore */
    .string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var SnackbarContent$1 = SnackbarContent;

  function getSnackbarUtilityClass(slot) {
    return generateUtilityClass('MuiSnackbar', slot);
  }
  const snackbarClasses = generateUtilityClasses('MuiSnackbar', ['root', 'anchorOriginTopCenter', 'anchorOriginBottomCenter', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft']);
  var snackbarClasses$1 = snackbarClasses;

  const _excluded$z = ["onEnter", "onExited"],
        _excluded2$2 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];

  const useUtilityClasses$s = ownerState => {
    const {
      classes,
      anchorOrigin
    } = ownerState;
    const slots = {
      root: ['root', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`]
    };
    return composeClasses(slots, getSnackbarUtilityClass, classes);
  };

  const SnackbarRoot = styled$1('div', {
    name: 'MuiSnackbar',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const center = _extends({}, !ownerState.isRtl && {
      left: '50%',
      right: 'auto',
      transform: 'translateX(-50%)'
    }, ownerState.isRtl && {
      right: '50%',
      left: 'auto',
      transform: 'translateX(50%)'
    });

    return _extends({
      zIndex: theme.zIndex.snackbar,
      position: 'fixed',
      display: 'flex',
      left: 8,
      right: 8,
      justifyContent: 'center',
      alignItems: 'center'
    }, ownerState.anchorOrigin.vertical === 'top' ? {
      top: 8
    } : {
      bottom: 8
    }, ownerState.anchorOrigin.horizontal === 'left' && {
      justifyContent: 'flex-start'
    }, ownerState.anchorOrigin.horizontal === 'right' && {
      justifyContent: 'flex-end'
    }, {
      [theme.breakpoints.up('sm')]: _extends({}, ownerState.anchorOrigin.vertical === 'top' ? {
        top: 24
      } : {
        bottom: 24
      }, ownerState.anchorOrigin.horizontal === 'center' && center, ownerState.anchorOrigin.horizontal === 'left' && _extends({}, !ownerState.isRtl && {
        left: 24,
        right: 'auto'
      }, ownerState.isRtl && {
        right: 24,
        left: 'auto'
      }), ownerState.anchorOrigin.horizontal === 'right' && _extends({}, !ownerState.isRtl && {
        right: 24,
        left: 'auto'
      }, ownerState.isRtl && {
        left: 24,
        right: 'auto'
      }))
    });
  });
  const Snackbar = /*#__PURE__*/React__namespace.forwardRef(function Snackbar(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSnackbar'
    });

    const {
      action,
      anchorOrigin: {
        vertical,
        horizontal
      } = {
        vertical: 'bottom',
        horizontal: 'left'
      },
      autoHideDuration = null,
      children,
      className,
      ClickAwayListenerProps,
      ContentProps,
      disableWindowBlurListener = false,
      message,
      onClose,
      onMouseEnter,
      onMouseLeave,
      open,
      resumeHideDuration,
      TransitionComponent = Grow$1,
      transitionDuration = {
        enter: duration.enteringScreen,
        exit: duration.leavingScreen
      },
      TransitionProps: {
        onEnter,
        onExited
      } = {}
    } = props,
          TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$z),
          other = _objectWithoutPropertiesLoose(props, _excluded2$2);

    const theme = useTheme();
    const isRtl = theme.direction === 'rtl';

    const ownerState = _extends({}, props, {
      anchorOrigin: {
        vertical,
        horizontal
      },
      isRtl
    });

    const classes = useUtilityClasses$s(ownerState);
    const timerAutoHide = React__namespace.useRef();
    const [exited, setExited] = React__namespace.useState(true);
    const handleClose = useEventCallback((...args) => {
      if (onClose) {
        onClose(...args);
      }
    });
    const setAutoHideTimer = useEventCallback(autoHideDurationParam => {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }

      clearTimeout(timerAutoHide.current);
      timerAutoHide.current = setTimeout(() => {
        handleClose(null, 'timeout');
      }, autoHideDurationParam);
    });
    React__namespace.useEffect(() => {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }

      return () => {
        clearTimeout(timerAutoHide.current);
      };
    }, [open, autoHideDuration, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar
    // or when the user hide the window.

    const handlePause = () => {
      clearTimeout(timerAutoHide.current);
    }; // Restart the timer when the user is no longer interacting with the Snackbar
    // or when the window is shown back.


    const handleResume = React__namespace.useCallback(() => {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);

    const handleMouseEnter = event => {
      if (onMouseEnter) {
        onMouseEnter(event);
      }

      handlePause();
    };

    const handleMouseLeave = event => {
      if (onMouseLeave) {
        onMouseLeave(event);
      }

      handleResume();
    };

    const handleClickAway = event => {
      if (onClose) {
        onClose(event, 'clickaway');
      }
    };

    const handleExited = node => {
      setExited(true);

      if (onExited) {
        onExited(node);
      }
    };

    const handleEnter = (node, isAppearing) => {
      setExited(false);

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    };

    React__namespace.useEffect(() => {
      // TODO: window global should be refactored here
      if (!disableWindowBlurListener && open) {
        window.addEventListener('focus', handleResume);
        window.addEventListener('blur', handlePause);
        return () => {
          window.removeEventListener('focus', handleResume);
          window.removeEventListener('blur', handlePause);
        };
      }

      return undefined;
    }, [disableWindowBlurListener, handleResume, open]); // So we only render active snackbars.

    if (!open && exited) {
      return null;
    }

    return /*#__PURE__*/jsxRuntime_1(ClickAwayListener, _extends({
      onClickAway: handleClickAway
    }, ClickAwayListenerProps, {
      children: /*#__PURE__*/jsxRuntime_1(SnackbarRoot, _extends({
        className: clsx(classes.root, className),
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
        ownerState: ownerState,
        ref: ref
      }, other, {
        children: /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
          appear: true,
          in: open,
          timeout: transitionDuration,
          direction: vertical === 'top' ? 'down' : 'up',
          onEnter: handleEnter,
          onExited: handleExited
        }, TransitionProps, {
          children: children || /*#__PURE__*/jsxRuntime_1(SnackbarContent$1, _extends({
            message: message,
            action: action
          }, ContentProps))
        }))
      }))
    }));
  });
  Snackbar.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: propTypes.node,

    /**
     * The anchor of the `Snackbar`.
     * On smaller screens, the component grows to occupy all the available width,
     * the horizontal alignment is ignored.
     * @default { vertical: 'bottom', horizontal: 'left' }
     */
    anchorOrigin: propTypes.shape({
      horizontal: propTypes.oneOf(['center', 'left', 'right']).isRequired,
      vertical: propTypes.oneOf(['bottom', 'top']).isRequired
    }),

    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: propTypes.number,

    /**
     * Replace the `SnackbarContent` component.
     */
    children: propTypes.element,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Props applied to the `ClickAwayListener` element.
     */
    ClickAwayListenerProps: propTypes.object,

    /**
     * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.
     */
    ContentProps: propTypes.object,

    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: propTypes.bool,

    /**
     * When displaying multiple consecutive Snackbars from a parent rendering a single
     * <Snackbar/>, add the key prop to ensure independent treatment of each message.
     * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
     * features such as autoHideDuration may be canceled.
     */
    key: () => null,

    /**
     * The message to display.
     */
    message: propTypes.node,

    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any>} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`.
     */
    onClose: propTypes.func,

    /**
     * @ignore
     */
    onMouseEnter: propTypes.func,

    /**
     * @ignore
     */
    onMouseLeave: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: propTypes.number,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: propTypes.elementType,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: duration.enteringScreen,
     *   exit: duration.leavingScreen,
     * }
     */
    transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     * @default {}
     */
    TransitionProps: propTypes.object
  } ;
  var Snackbar$1 = Snackbar;

  const _excluded$y = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  const styles$1 = {
    entering: {
      transform: 'none'
    },
    entered: {
      transform: 'none'
    }
  };
  const defaultTimeout = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  /**
   * The Zoom transition can be used for the floating variant of the
   * [Button](/components/buttons/#floating-action-buttons) component.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */

  const Zoom = /*#__PURE__*/React__namespace.forwardRef(function Zoom(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$y);

    const theme = useTheme();
    const nodeRef = React__namespace.useRef(null);
    const foreignRef = useForkRef(children.ref, ref);
    const handleRef = useForkRef(nodeRef, foreignRef);

    const normalizedTransitionCallback = callback => maybeIsAppearing => {
      if (callback) {
        const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.

        if (maybeIsAppearing === undefined) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };

    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      reflow(node); // So the animation always start from the start.

      const transitionProps = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'enter'
      });
      node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
      node.style.transition = theme.transitions.create('transform', transitionProps);

      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback(node => {
      const transitionProps = getTransitionProps({
        style,
        timeout,
        easing
      }, {
        mode: 'exit'
      });
      node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
      node.style.transition = theme.transitions.create('transform', transitionProps);

      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);

    const handleAddEndListener = next => {
      if (addEndListener) {
        // Old call signature before `react-transition-group` implemented `nodeRef`
        addEndListener(nodeRef.current, next);
      }
    };

    return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
      appear: appear,
      in: inProp,
      nodeRef: nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout
    }, other, {
      children: (state, childProps) => {
        return /*#__PURE__*/React__namespace.cloneElement(children, _extends({
          style: _extends({
            transform: 'scale(0)',
            visibility: state === 'exited' && !inProp ? 'hidden' : undefined
          }, styles$1[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Zoom.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: propTypes.func,

    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: propTypes.bool,

    /**
     * A single child content element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: propTypes.oneOfType([propTypes.shape({
      enter: propTypes.string,
      exit: propTypes.string
    }), propTypes.string]),

    /**
     * If `true`, the component will transition in.
     */
    in: propTypes.bool,

    /**
     * @ignore
     */
    onEnter: propTypes.func,

    /**
     * @ignore
     */
    onEntered: propTypes.func,

    /**
     * @ignore
     */
    onEntering: propTypes.func,

    /**
     * @ignore
     */
    onExit: propTypes.func,

    /**
     * @ignore
     */
    onExited: propTypes.func,

    /**
     * @ignore
     */
    onExiting: propTypes.func,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: duration.enteringScreen,
     *   exit: duration.leavingScreen,
     * }
     */
    timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })])
  } ;
  var Zoom$1 = Zoom;

  function getSpeedDialUtilityClass(slot) {
    return generateUtilityClass('MuiSpeedDial', slot);
  }
  const speedDialClasses = generateUtilityClasses('MuiSpeedDial', ['root', 'fab', 'directionUp', 'directionDown', 'directionLeft', 'directionRight', 'actions', 'actionsClosed']);
  var speedDialClasses$1 = speedDialClasses;

  const _excluded$x = ["ref"],
        _excluded2$1 = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"],
        _excluded3 = ["ref"];

  const useUtilityClasses$r = ownerState => {
    const {
      classes,
      open,
      direction
    } = ownerState;
    const slots = {
      root: ['root', `direction${capitalize(direction)}`],
      fab: ['fab'],
      actions: ['actions', !open && 'actionsClosed']
    };
    return composeClasses(slots, getSpeedDialUtilityClass, classes);
  };

  function getOrientation(direction) {
    if (direction === 'up' || direction === 'down') {
      return 'vertical';
    }

    if (direction === 'right' || direction === 'left') {
      return 'horizontal';
    }

    return undefined;
  }

  function clamp(value, min, max) {
    if (value < min) {
      return min;
    }

    if (value > max) {
      return max;
    }

    return value;
  }

  const dialRadius = 32;
  const spacingActions = 16;
  const SpeedDialRoot = styled$1('div', {
    name: 'MuiSpeedDial',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`direction${capitalize(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: theme.zIndex.speedDial,
    display: 'flex',
    alignItems: 'center',
    pointerEvents: 'none'
  }, ownerState.direction === 'up' && {
    flexDirection: 'column-reverse',
    [`& .${speedDialClasses$1.actions}`]: {
      flexDirection: 'column-reverse',
      marginBottom: -dialRadius,
      paddingBottom: spacingActions + dialRadius
    }
  }, ownerState.direction === 'down' && {
    flexDirection: 'column',
    [`& .${speedDialClasses$1.actions}`]: {
      flexDirection: 'column',
      marginTop: -dialRadius,
      paddingTop: spacingActions + dialRadius
    }
  }, ownerState.direction === 'left' && {
    flexDirection: 'row-reverse',
    [`& .${speedDialClasses$1.actions}`]: {
      flexDirection: 'row-reverse',
      marginRight: -dialRadius,
      paddingRight: spacingActions + dialRadius
    }
  }, ownerState.direction === 'right' && {
    flexDirection: 'row',
    [`& .${speedDialClasses$1.actions}`]: {
      flexDirection: 'row',
      marginLeft: -dialRadius,
      paddingLeft: spacingActions + dialRadius
    }
  }));
  const SpeedDialFab = styled$1(Fab$1, {
    name: 'MuiSpeedDial',
    slot: 'Fab',
    overridesResolver: (props, styles) => styles.fab
  })(() => ({
    pointerEvents: 'auto'
  }));
  const SpeedDialActions = styled$1('div', {
    name: 'MuiSpeedDial',
    slot: 'Actions',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.actions, !ownerState.open && styles.actionsClosed];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex',
    pointerEvents: 'auto'
  }, !ownerState.open && {
    transition: 'top 0s linear 0.2s',
    pointerEvents: 'none'
  }));
  const SpeedDial = /*#__PURE__*/React__namespace.forwardRef(function SpeedDial(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSpeedDial'
    });

    const {
      ariaLabel,
      FabProps: {
        ref: origDialButtonRef
      } = {},
      children: childrenProp,
      className,
      direction = 'up',
      hidden = false,
      icon,
      onBlur,
      onClose,
      onFocus,
      onKeyDown,
      onMouseEnter,
      onMouseLeave,
      onOpen,
      open: openProp,
      TransitionComponent = Zoom$1,
      transitionDuration = {
        enter: duration.enteringScreen,
        exit: duration.leavingScreen
      },
      TransitionProps
    } = props,
          FabProps = _objectWithoutPropertiesLoose(props.FabProps, _excluded$x),
          other = _objectWithoutPropertiesLoose(props, _excluded2$1);

    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: 'SpeedDial',
      state: 'open'
    });

    const ownerState = _extends({}, props, {
      open,
      direction
    });

    const classes = useUtilityClasses$r(ownerState);
    const eventTimer = React__namespace.useRef();
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(eventTimer.current);
      };
    }, []);
    /**
     * an index in actions.current
     */

    const focusedAction = React__namespace.useRef(0);
    /**
     * pressing this key while the focus is on a child SpeedDialAction focuses
     * the next SpeedDialAction.
     * It is equal to the first arrow key pressed while focus is on the SpeedDial
     * that is not orthogonal to the direction.
     * @type {utils.ArrowKey?}
     */

    const nextItemArrowKey = React__namespace.useRef();
    /**
     * refs to the Button that have an action associated to them in this SpeedDial
     * [Fab, ...(SpeedDialActions > Button)]
     * @type {HTMLButtonElement[]}
     */

    const actions = React__namespace.useRef([]);
    actions.current = [actions.current[0]];
    const handleOwnFabRef = React__namespace.useCallback(fabFef => {
      actions.current[0] = fabFef;
    }, []);
    const handleFabRef = useForkRef(origDialButtonRef, handleOwnFabRef);
    /**
     * creates a ref callback for the Button in a SpeedDialAction
     * Is called before the original ref callback for Button that was set in buttonProps
     *
     * @param dialActionIndex {number}
     * @param origButtonRef {React.RefObject?}
     */

    const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {
      return buttonRef => {
        actions.current[dialActionIndex + 1] = buttonRef;

        if (origButtonRef) {
          origButtonRef(buttonRef);
        }
      };
    };

    const handleKeyDown = event => {
      if (onKeyDown) {
        onKeyDown(event);
      }

      const key = event.key.replace('Arrow', '').toLowerCase();
      const {
        current: nextItemArrowKeyCurrent = key
      } = nextItemArrowKey;

      if (event.key === 'Escape') {
        setOpenState(false);
        actions.current[0].focus();

        if (onClose) {
          onClose(event, 'escapeKeyDown');
        }

        return;
      }

      if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== undefined) {
        event.preventDefault();
        const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1; // stay within array indices

        const nextAction = clamp(focusedAction.current + actionStep, 0, actions.current.length - 1);
        actions.current[nextAction].focus();
        focusedAction.current = nextAction;
        nextItemArrowKey.current = nextItemArrowKeyCurrent;
      }
    };

    React__namespace.useEffect(() => {
      // actions were closed while navigation state was not reset
      if (!open) {
        focusedAction.current = 0;
        nextItemArrowKey.current = undefined;
      }
    }, [open]);

    const handleClose = event => {
      if (event.type === 'mouseleave' && onMouseLeave) {
        onMouseLeave(event);
      }

      if (event.type === 'blur' && onBlur) {
        onBlur(event);
      }

      clearTimeout(eventTimer.current);

      if (event.type === 'blur') {
        eventTimer.current = setTimeout(() => {
          setOpenState(false);

          if (onClose) {
            onClose(event, 'blur');
          }
        });
      } else {
        setOpenState(false);

        if (onClose) {
          onClose(event, 'mouseLeave');
        }
      }
    };

    const handleClick = event => {
      if (FabProps.onClick) {
        FabProps.onClick(event);
      }

      clearTimeout(eventTimer.current);

      if (open) {
        setOpenState(false);

        if (onClose) {
          onClose(event, 'toggle');
        }
      } else {
        setOpenState(true);

        if (onOpen) {
          onOpen(event, 'toggle');
        }
      }
    };

    const handleOpen = event => {
      if (event.type === 'mouseenter' && onMouseEnter) {
        onMouseEnter(event);
      }

      if (event.type === 'focus' && onFocus) {
        onFocus(event);
      } // When moving the focus between two items,
      // a chain if blur and focus event is triggered.
      // We only handle the last event.


      clearTimeout(eventTimer.current);

      if (!open) {
        // Wait for a future focus or click event
        eventTimer.current = setTimeout(() => {
          setOpenState(true);

          if (onOpen) {
            const eventMap = {
              focus: 'focus',
              mouseenter: 'mouseEnter'
            };
            onOpen(event, eventMap[event.type]);
          }
        });
      }
    }; // Filter the label for valid id characters.


    const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, '');
    const allItems = React__namespace.Children.toArray(childrenProp).filter(child => {
      {
        if (reactIs_2(child)) {
          console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      return /*#__PURE__*/React__namespace.isValidElement(child);
    });
    const children = allItems.map((child, index) => {
      const _child$props = child.props,
            {
        FabProps: {
          ref: origButtonRef
        } = {},
        tooltipPlacement: tooltipPlacementProp
      } = _child$props,
            ChildFabProps = _objectWithoutPropertiesLoose(_child$props.FabProps, _excluded3);

      const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction) === 'vertical' ? 'left' : 'top');
      return /*#__PURE__*/React__namespace.cloneElement(child, {
        FabProps: _extends({}, ChildFabProps, {
          ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
        }),
        delay: 30 * (open ? index : allItems.length - index),
        open,
        tooltipPlacement,
        id: `${id}-action-${index}`
      });
    });
    return /*#__PURE__*/jsxRuntime_2(SpeedDialRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      role: "presentation",
      onKeyDown: handleKeyDown,
      onBlur: handleClose,
      onFocus: handleOpen,
      onMouseEnter: handleOpen,
      onMouseLeave: handleClose,
      ownerState: ownerState
    }, other, {
      children: [/*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
        in: !hidden,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps, {
        children: /*#__PURE__*/jsxRuntime_1(SpeedDialFab, _extends({
          color: "primary",
          "aria-label": ariaLabel,
          "aria-haspopup": "true",
          "aria-expanded": open,
          "aria-controls": `${id}-actions`
        }, FabProps, {
          onClick: handleClick,
          className: clsx(classes.fab, FabProps.className),
          ref: handleFabRef,
          ownerState: ownerState,
          children: /*#__PURE__*/React__namespace.isValidElement(icon) && isMuiElement(icon, ['SpeedDialIcon']) ? /*#__PURE__*/React__namespace.cloneElement(icon, {
            open
          }) : icon
        }))
      })), /*#__PURE__*/jsxRuntime_1(SpeedDialActions, {
        id: `${id}-actions`,
        role: "menu",
        "aria-orientation": getOrientation(direction),
        className: clsx(classes.actions, !open && classes.actionsClosed),
        ownerState: ownerState,
        children: children
      })]
    }));
  });
  SpeedDial.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The aria-label of the button element.
     * Also used to provide the `id` for the `SpeedDial` element and its children.
     */
    ariaLabel: propTypes.string.isRequired,

    /**
     * SpeedDialActions to display when the SpeedDial is `open`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The direction the actions open relative to the floating action button.
     * @default 'up'
     */
    direction: propTypes.oneOf(['down', 'left', 'right', 'up']),

    /**
     * Props applied to the [`Fab`](/api/fab/) element.
     * @default {}
     */
    FabProps: propTypes.object,

    /**
     * If `true`, the SpeedDial is hidden.
     * @default false
     */
    hidden: propTypes.bool,

    /**
     * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
     * provides a default Icon with animation.
     */
    icon: propTypes.node,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
     */
    onClose: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * @ignore
     */
    onKeyDown: propTypes.func,

    /**
     * @ignore
     */
    onMouseEnter: propTypes.func,

    /**
     * @ignore
     */
    onMouseLeave: propTypes.func,

    /**
     * Callback fired when the component requests to be open.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
     */
    onOpen: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * The icon to display in the SpeedDial Fab when the SpeedDial is open.
     */
    openIcon: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Zoom
     */
    TransitionComponent: propTypes.elementType,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: duration.enteringScreen,
     *   exit: duration.leavingScreen,
     * }
     */
    transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     */
    TransitionProps: propTypes.object
  } ;
  var SpeedDial$1 = SpeedDial;

  function getTooltipUtilityClass(slot) {
    return generateUtilityClass('MuiTooltip', slot);
  }
  const tooltipClasses = generateUtilityClasses('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);
  var tooltipClasses$1 = tooltipClasses;

  const _excluded$w = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "title", "TransitionComponent", "TransitionProps"];

  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }

  const useUtilityClasses$q = ownerState => {
    const {
      classes,
      disableInteractive,
      arrow,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
      tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${capitalize(placement.split('-')[0])}`],
      arrow: ['arrow']
    };
    return composeClasses(slots, getTooltipUtilityClass, classes);
  };

  const TooltipPopper = styled$1(Popper$1, {
    name: 'MuiTooltip',
    slot: 'Popper',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends({
    zIndex: theme.zIndex.tooltip,
    pointerEvents: 'none'
  }, !ownerState.disableInteractive && {
    pointerEvents: 'auto'
  }, !open && {
    pointerEvents: 'none'
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses$1.arrow}`]: {
      top: 0,
      marginTop: '-0.71em',
      '&::before': {
        transformOrigin: '0 100%'
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses$1.arrow}`]: {
      bottom: 0,
      marginBottom: '-0.71em',
      '&::before': {
        transformOrigin: '100% 0'
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: '-0.71em'
    } : {
      right: 0,
      marginRight: '-0.71em'
    }, {
      height: '1em',
      width: '0.71em',
      '&::before': {
        transformOrigin: '100% 100%'
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: '-0.71em'
    } : {
      left: 0,
      marginLeft: '-0.71em'
    }, {
      height: '1em',
      width: '0.71em',
      '&::before': {
        transformOrigin: '0 0'
      }
    })
  }));
  const TooltipTooltip = styled$1('div', {
    name: 'MuiTooltip',
    slot: 'Tooltip',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${capitalize(ownerState.placement.split('-')[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: alpha(theme.palette.grey[700], 0.92),
    borderRadius: theme.shape.borderRadius,
    color: theme.palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: '4px 8px',
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: 'break-word',
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: 'relative',
    margin: 0
  }, ownerState.touch && {
    padding: '8px 16px',
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses$1.popper}[data-popper-placement*="left"] &`]: _extends({
      transformOrigin: 'right center'
    }, !ownerState.isRtl ? _extends({
      marginRight: '14px'
    }, ownerState.touch && {
      marginRight: '24px'
    }) : _extends({
      marginLeft: '14px'
    }, ownerState.touch && {
      marginLeft: '24px'
    })),
    [`.${tooltipClasses$1.popper}[data-popper-placement*="right"] &`]: _extends({
      transformOrigin: 'left center'
    }, !ownerState.isRtl ? _extends({
      marginLeft: '14px'
    }, ownerState.touch && {
      marginLeft: '24px'
    }) : _extends({
      marginRight: '14px'
    }, ownerState.touch && {
      marginRight: '24px'
    })),
    [`.${tooltipClasses$1.popper}[data-popper-placement*="top"] &`]: _extends({
      transformOrigin: 'center bottom',
      marginBottom: '14px'
    }, ownerState.touch && {
      marginBottom: '24px'
    }),
    [`.${tooltipClasses$1.popper}[data-popper-placement*="bottom"] &`]: _extends({
      transformOrigin: 'center top',
      marginTop: '14px'
    }, ownerState.touch && {
      marginTop: '24px'
    })
  }));
  const TooltipArrow = styled$1('span', {
    name: 'MuiTooltip',
    slot: 'Arrow',
    overridesResolver: (props, styles) => styles.arrow
  })(({
    theme
  }) => ({
    overflow: 'hidden',
    position: 'absolute',
    width: '1em',
    height: '0.71em'
    /* = width / sqrt(2) = (length of the hypotenuse) */
    ,
    boxSizing: 'border-box',
    color: alpha(theme.palette.grey[700], 0.9),
    '&::before': {
      content: '""',
      margin: 'auto',
      display: 'block',
      width: '100%',
      height: '100%',
      backgroundColor: 'currentColor',
      transform: 'rotate(45deg)'
    }
  }));
  let hystersisOpen = false;
  let hystersisTimer = null;

  function composeEventHandler(handler, eventHandler) {
    return event => {
      if (eventHandler) {
        eventHandler(event);
      }

      handler(event);
    };
  } // TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.


  const Tooltip = /*#__PURE__*/React__namespace.forwardRef(function Tooltip(inProps, ref) {
    var _components$Popper, _ref, _components$Transitio, _components$Tooltip, _components$Arrow, _componentsProps$popp;

    const props = useThemeProps({
      props: inProps,
      name: 'MuiTooltip'
    });

    const {
      arrow = false,
      children,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = 'bottom',
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow$1,
      TransitionProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$w);

    const theme = useTheme();
    const isRtl = theme.direction === 'rtl';
    const [childNode, setChildNode] = React__namespace.useState();
    const [arrowRef, setArrowRef] = React__namespace.useState(null);
    const ignoreNonTouchEvents = React__namespace.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = React__namespace.useRef();
    const enterTimer = React__namespace.useRef();
    const leaveTimer = React__namespace.useRef();
    const touchTimer = React__namespace.useRef();
    const [openState, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: 'Tooltip',
      state: 'open'
    });
    let open = openState;

    {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const {
        current: isControlled
      } = React__namespace.useRef(openProp !== undefined); // eslint-disable-next-line react-hooks/rules-of-hooks

      React__namespace.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
          console.error(['MUI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
        }
      }, [title, childNode, isControlled]);
    }

    const id = useId(idProp);
    const prevUserSelect = React__namespace.useRef();
    const stopTouchInteraction = React__namespace.useCallback(() => {
      if (prevUserSelect.current !== undefined) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = undefined;
      }

      clearTimeout(touchTimer.current);
    }, []);
    React__namespace.useEffect(() => {
      return () => {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        stopTouchInteraction();
      };
    }, [stopTouchInteraction]);

    const handleOpen = event => {
      clearTimeout(hystersisTimer);
      hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
      // We can skip rerendering when the tooltip is already open.
      // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.

      setOpenState(true);

      if (onOpen && !open) {
        onOpen(event);
      }
    };

    const handleClose = useEventCallback(
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    event => {
      clearTimeout(hystersisTimer);
      hystersisTimer = setTimeout(() => {
        hystersisOpen = false;
      }, 800 + leaveDelay);
      setOpenState(false);

      if (onClose && open) {
        onClose(event);
      }

      clearTimeout(closeTimer.current);
      closeTimer.current = setTimeout(() => {
        ignoreNonTouchEvents.current = false;
      }, theme.transitions.duration.shortest);
    });

    const handleEnter = event => {
      if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
        return;
      } // Remove the title ahead of time.
      // We don't want to wait for the next render commit.
      // We would risk displaying two tooltips at the same time (native + this one).


      if (childNode) {
        childNode.removeAttribute('title');
      }

      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);

      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.current = setTimeout(() => {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };

    const handleLeave = event => {
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveDelay);
    };

    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible(); // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
    // We just need to re-render the Tooltip if the focus-visible state changes.

    const [, setChildIsFocusVisible] = React__namespace.useState(false);

    const handleBlur = event => {
      handleBlurVisible(event);

      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleLeave(event);
      }
    };

    const handleFocus = event => {
      // Workaround for https://github.com/facebook/react/issues/7769
      // The autoFocus of React might trigger the event before the componentDidMount.
      // We need to account for this eventuality.
      if (!childNode) {
        setChildNode(event.currentTarget);
      }

      handleFocusVisible(event);

      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleEnter(event);
      }
    };

    const detectTouchStart = event => {
      ignoreNonTouchEvents.current = true;
      const childrenProps = children.props;

      if (childrenProps.onTouchStart) {
        childrenProps.onTouchStart(event);
      }
    };

    const handleMouseOver = handleEnter;
    const handleMouseLeave = handleLeave;

    const handleTouchStart = event => {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect; // Prevent iOS text selection on long-tap.

      document.body.style.WebkitUserSelect = 'none';
      touchTimer.current = setTimeout(() => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleEnter(event);
      }, enterTouchDelay);
    };

    const handleTouchEnd = event => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }

      stopTouchInteraction();
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveTouchDelay);
    };

    React__namespace.useEffect(() => {
      if (!open) {
        return undefined;
      }
      /**
       * @param {KeyboardEvent} nativeEvent
       */


      function handleKeyDown(nativeEvent) {
        // IE11, Edge (prior to using Bink?) use 'Esc'
        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
          handleClose(nativeEvent);
        }
      }

      document.addEventListener('keydown', handleKeyDown);
      return () => {
        document.removeEventListener('keydown', handleKeyDown);
      };
    }, [handleClose, open]);
    const handleUseRef = useForkRef(setChildNode, ref);
    const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
    const handleRef = useForkRef(children.ref, handleFocusRef); // There is no point in displaying an empty tooltip.

    if (title === '') {
      open = false;
    }

    const positionRef = React__namespace.useRef({
      x: 0,
      y: 0
    });
    const popperRef = React__namespace.useRef();

    const handleMouseMove = event => {
      const childrenProps = children.props;

      if (childrenProps.onMouseMove) {
        childrenProps.onMouseMove(event);
      }

      positionRef.current = {
        x: event.clientX,
        y: event.clientY
      };

      if (popperRef.current) {
        popperRef.current.update();
      }
    };

    const nameOrDescProps = {};
    const titleIsString = typeof title === 'string';

    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps['aria-describedby'] = open ? id : null;
    } else {
      nameOrDescProps['aria-label'] = titleIsString ? title : null;
      nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
    }

    const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
      className: clsx(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});

    {
      childrenProps['data-mui-internal-clone-element'] = true; // eslint-disable-next-line react-hooks/rules-of-hooks

      React__namespace.useEffect(() => {
        if (childNode && !childNode.getAttribute('data-mui-internal-clone-element')) {
          console.error(['MUI: The `children` component of the Tooltip is not forwarding its props correctly.', 'Please make sure that props are spread on the same element that the ref is applied to.'].join('\n'));
        }
      }, [childNode]);
    }

    const interactiveWrapperListeners = {};

    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }

    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);

      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }

    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);

      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur;
      }
    }

    {
      if (children.props.title) {
        console.error(['MUI: You have provided a `title` prop to the child of <Tooltip />.', `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join('\n'));
      }
    }

    const popperOptions = React__namespace.useMemo(() => {
      var _PopperProps$popperOp;

      let tooltipModifiers = [{
        name: 'arrow',
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];

      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }

      return _extends({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);

    const ownerState = _extends({}, props, {
      isRtl,
      arrow,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });

    const classes = useUtilityClasses$q(ownerState);
    const PopperComponent = (_components$Popper = components.Popper) != null ? _components$Popper : TooltipPopper;
    const TransitionComponent = (_ref = (_components$Transitio = components.Transition) != null ? _components$Transitio : TransitionComponentProp) != null ? _ref : Grow$1;
    const TooltipComponent = (_components$Tooltip = components.Tooltip) != null ? _components$Tooltip : TooltipTooltip;
    const ArrowComponent = (_components$Arrow = components.Arrow) != null ? _components$Arrow : TooltipArrow;
    const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, componentsProps.popper), ownerState);
    const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, componentsProps.tooltip), ownerState);
    const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, componentsProps.arrow), ownerState);
    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/React__namespace.cloneElement(children, childrenProps), /*#__PURE__*/jsxRuntime_1(PopperComponent, _extends({
        as: PopperComponentProp != null ? PopperComponentProp : Popper$1,
        placement: placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: positionRef.current.y,
            left: positionRef.current.x,
            right: positionRef.current.x,
            bottom: positionRef.current.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef: popperRef,
        open: childNode ? open : false,
        id: id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className),
        popperOptions: popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => {
          var _componentsProps$tool, _componentsProps$arro;

          return /*#__PURE__*/jsxRuntime_1(TransitionComponent, _extends({
            timeout: theme.transitions.duration.shorter
          }, TransitionPropsInner, transitionProps, {
            children: /*#__PURE__*/jsxRuntime_2(TooltipComponent, _extends({}, tooltipProps, {
              className: clsx(classes.tooltip, (_componentsProps$tool = componentsProps.tooltip) == null ? void 0 : _componentsProps$tool.className),
              children: [title, arrow ? /*#__PURE__*/jsxRuntime_1(ArrowComponent, _extends({}, tooltipArrowProps, {
                className: clsx(classes.arrow, (_componentsProps$arro = componentsProps.arrow) == null ? void 0 : _componentsProps$arro.className),
                ref: setArrowRef
              })) : null]
            }))
          }));
        }
      }))]
    });
  });
  Tooltip.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, adds an arrow to the tooltip.
     * @default false
     */
    arrow: propTypes.bool,

    /**
     * Tooltip reference element.
     */
    children: elementAcceptingRef$1.isRequired,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The components used for each slot inside the Tooltip.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: propTypes.shape({
      Arrow: propTypes.elementType,
      Popper: propTypes.elementType,
      Tooltip: propTypes.elementType,
      Transition: propTypes.elementType
    }),

    /**
     * The props used for each slot inside the Tooltip.
     * Note that `componentsProps.popper` prop values win over `PopperProps`
     * and `componentsProps.transition` prop values win over `TransitionProps` if both are applied.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * Set to `true` if the `title` acts as an accessible description.
     * By default the `title` acts as an accessible label for the child.
     * @default false
     */
    describeChild: propTypes.bool,

    /**
     * Do not respond to focus-visible events.
     * @default false
     */
    disableFocusListener: propTypes.bool,

    /**
     * Do not respond to hover events.
     * @default false
     */
    disableHoverListener: propTypes.bool,

    /**
     * Makes a tooltip not interactive, i.e. it will close when the user
     * hovers over the tooltip before the `leaveDelay` is expired.
     * @default false
     */
    disableInteractive: propTypes.bool,

    /**
     * Do not respond to long press touch events.
     * @default false
     */
    disableTouchListener: propTypes.bool,

    /**
     * The number of milliseconds to wait before showing the tooltip.
     * This prop won't impact the enter touch delay (`enterTouchDelay`).
     * @default 100
     */
    enterDelay: propTypes.number,

    /**
     * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
     * @default 0
     */
    enterNextDelay: propTypes.number,

    /**
     * The number of milliseconds a user must touch the element before showing the tooltip.
     * @default 700
     */
    enterTouchDelay: propTypes.number,

    /**
     * If `true`, the tooltip follow the cursor over the wrapped element.
     * @default false
     */
    followCursor: propTypes.bool,

    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: propTypes.string,

    /**
     * The number of milliseconds to wait before hiding the tooltip.
     * This prop won't impact the leave touch delay (`leaveTouchDelay`).
     * @default 0
     */
    leaveDelay: propTypes.number,

    /**
     * The number of milliseconds after the user stops touching an element before hiding the tooltip.
     * @default 1500
     */
    leaveTouchDelay: propTypes.number,

    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: propTypes.func,

    /**
     * Callback fired when the component requests to be open.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: propTypes.func,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * Tooltip placement.
     * @default 'bottom'
     */
    placement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

    /**
     * The component used for the popper.
     * @default Popper
     */
    PopperComponent: propTypes.elementType,

    /**
     * Props applied to the [`Popper`](/api/popper/) element.
     * @default {}
     */
    PopperProps: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Tooltip title. Zero-length titles string are never displayed.
     */
    title: propTypes
    /* @typescript-to-proptypes-ignore */
    .node.isRequired,

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: propTypes.elementType,

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     */
    TransitionProps: propTypes.object
  } ;
  var Tooltip$1 = Tooltip;

  function getSpeedDialActionUtilityClass(slot) {
    return generateUtilityClass('MuiSpeedDialAction', slot);
  }
  const speedDialActionClasses = generateUtilityClasses('MuiSpeedDialAction', ['fab', 'fabClosed', 'staticTooltip', 'staticTooltipClosed', 'staticTooltipLabel', 'tooltipPlacementLeft', 'tooltipPlacementRight']);
  var speedDialActionClasses$1 = speedDialActionClasses;

  const _excluded$v = ["className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"];

  const useUtilityClasses$p = ownerState => {
    const {
      open,
      tooltipPlacement,
      classes
    } = ownerState;
    const slots = {
      fab: ['fab', !open && 'fabClosed'],
      staticTooltip: ['staticTooltip', `tooltipPlacement${capitalize(tooltipPlacement)}`, !open && 'staticTooltipClosed'],
      staticTooltipLabel: ['staticTooltipLabel']
    };
    return composeClasses(slots, getSpeedDialActionUtilityClass, classes);
  };

  const SpeedDialActionFab = styled$1(Fab$1, {
    name: 'MuiSpeedDialAction',
    slot: 'Fab',
    skipVariantsResolver: false,
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.fab, !ownerState.open && styles.fabClosed];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 8,
    color: theme.palette.text.secondary,
    backgroundColor: theme.palette.background.paper,
    '&:hover': {
      backgroundColor: emphasize(theme.palette.background.paper, 0.15)
    },
    transition: `${theme.transitions.create('transform', {
    duration: theme.transitions.duration.shorter
  })}, opacity 0.8s`,
    opacity: 1
  }, !ownerState.open && {
    opacity: 0,
    transform: 'scale(0)'
  }));
  const SpeedDialActionStaticTooltip = styled$1('span', {
    name: 'MuiSpeedDialAction',
    slot: 'StaticTooltip',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.staticTooltip, !ownerState.open && styles.staticTooltipClosed, styles[`tooltipPlacement${capitalize(ownerState.tooltipPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => ({
    position: 'relative',
    display: 'flex',
    alignItems: 'center',
    [`& .${speedDialActionClasses$1.staticTooltipLabel}`]: _extends({
      transition: theme.transitions.create(['transform', 'opacity'], {
        duration: theme.transitions.duration.shorter
      }),
      opacity: 1
    }, !ownerState.open && {
      opacity: 0,
      transform: 'scale(0.5)'
    }, ownerState.tooltipPlacement === 'left' && {
      transformOrigin: '100% 50%',
      right: '100%',
      marginRight: 8
    }, ownerState.tooltipPlacement === 'right' && {
      transformOrigin: '0% 50%',
      left: '100%',
      marginLeft: 8
    })
  }));
  const SpeedDialActionStaticTooltipLabel = styled$1('span', {
    name: 'MuiSpeedDialAction',
    slot: 'StaticTooltipLabel',
    overridesResolver: (props, styles) => styles.staticTooltipLabel
  })(({
    theme
  }) => _extends({
    position: 'absolute'
  }, theme.typography.body1, {
    backgroundColor: theme.palette.background.paper,
    borderRadius: theme.shape.borderRadius,
    boxShadow: theme.shadows[1],
    color: theme.palette.text.secondary,
    padding: '4px 16px',
    wordBreak: 'keep-all'
  }));
  const SpeedDialAction = /*#__PURE__*/React__namespace.forwardRef(function SpeedDialAction(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSpeedDialAction'
    });

    const {
      className,
      delay = 0,
      FabProps = {},
      icon,
      id,
      open,
      TooltipClasses,
      tooltipOpen: tooltipOpenProp = false,
      tooltipPlacement = 'left',
      tooltipTitle
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$v);

    const ownerState = _extends({}, props, {
      tooltipPlacement
    });

    const classes = useUtilityClasses$p(ownerState);
    const [tooltipOpen, setTooltipOpen] = React__namespace.useState(tooltipOpenProp);

    const handleTooltipClose = () => {
      setTooltipOpen(false);
    };

    const handleTooltipOpen = () => {
      setTooltipOpen(true);
    };

    const transitionStyle = {
      transitionDelay: `${delay}ms`
    };

    const fab = /*#__PURE__*/jsxRuntime_1(SpeedDialActionFab, _extends({
      size: "small",
      className: clsx(classes.fab, className),
      tabIndex: -1,
      role: "menuitem",
      ownerState: ownerState
    }, FabProps, {
      style: _extends({}, transitionStyle, FabProps.style),
      children: icon
    }));

    if (tooltipOpenProp) {
      return /*#__PURE__*/jsxRuntime_2(SpeedDialActionStaticTooltip, _extends({
        id: id,
        ref: ref,
        className: classes.staticTooltip,
        ownerState: ownerState
      }, other, {
        children: [/*#__PURE__*/jsxRuntime_1(SpeedDialActionStaticTooltipLabel, {
          style: transitionStyle,
          id: `${id}-label`,
          className: classes.staticTooltipLabel,
          ownerState: ownerState,
          children: tooltipTitle
        }), /*#__PURE__*/React__namespace.cloneElement(fab, {
          'aria-labelledby': `${id}-label`
        })]
      }));
    }

    if (!open && tooltipOpen) {
      setTooltipOpen(false);
    }

    return /*#__PURE__*/jsxRuntime_1(Tooltip$1, _extends({
      id: id,
      ref: ref,
      title: tooltipTitle,
      placement: tooltipPlacement,
      onClose: handleTooltipClose,
      onOpen: handleTooltipOpen,
      open: open && tooltipOpen,
      classes: TooltipClasses
    }, other, {
      children: fab
    }));
  });
  SpeedDialAction.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
     * @default 0
     */
    delay: propTypes.number,

    /**
     * Props applied to the [`Fab`](/api/fab/) component.
     * @default {}
     */
    FabProps: propTypes.object,

    /**
     * The icon to display in the SpeedDial Fab.
     */
    icon: propTypes.node,

    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: propTypes.string,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * `classes` prop applied to the [`Tooltip`](/api/tooltip/) element.
     */
    TooltipClasses: propTypes.object,

    /**
     * Make the tooltip always visible when the SpeedDial is open.
     * @default false
     */
    tooltipOpen: propTypes.bool,

    /**
     * Placement of the tooltip.
     * @default 'left'
     */
    tooltipPlacement: propTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

    /**
     * Label to display in the tooltip.
     */
    tooltipTitle: propTypes.node
  } ;
  var SpeedDialAction$1 = SpeedDialAction;

  var AddIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), 'Add');

  function getSpeedDialIconUtilityClass(slot) {
    return generateUtilityClass('MuiSpeedDialIcon', slot);
  }
  const speedDialIconClasses = generateUtilityClasses('MuiSpeedDialIcon', ['root', 'icon', 'iconOpen', 'iconWithOpenIconOpen', 'openIcon', 'openIconOpen']);
  var speedDialIconClasses$1 = speedDialIconClasses;

  const _excluded$u = ["className", "icon", "open", "openIcon"];

  const useUtilityClasses$o = ownerState => {
    const {
      classes,
      open,
      openIcon
    } = ownerState;
    const slots = {
      root: ['root'],
      icon: ['icon', open && 'iconOpen', openIcon && open && 'iconWithOpenIconOpen'],
      openIcon: ['openIcon', open && 'openIconOpen']
    };
    return composeClasses(slots, getSpeedDialIconUtilityClass, classes);
  };

  const SpeedDialIconRoot = styled$1('span', {
    name: 'MuiSpeedDialIcon',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${speedDialIconClasses$1.icon}`]: styles.icon
      }, {
        [`& .${speedDialIconClasses$1.icon}`]: ownerState.open && styles.iconOpen
      }, {
        [`& .${speedDialIconClasses$1.icon}`]: ownerState.open && ownerState.openIcon && styles.iconWithOpenIconOpen
      }, {
        [`& .${speedDialIconClasses$1.openIcon}`]: styles.openIcon
      }, {
        [`& .${speedDialIconClasses$1.openIcon}`]: ownerState.open && styles.openIconOpen
      }, styles.root];
    }
  })(({
    theme,
    ownerState
  }) => ({
    height: 24,
    [`& .${speedDialIconClasses$1.icon}`]: _extends({
      transition: theme.transitions.create(['transform', 'opacity'], {
        duration: theme.transitions.duration.short
      })
    }, ownerState.open && _extends({
      transform: 'rotate(45deg)'
    }, ownerState.openIcon && {
      opacity: 0
    })),
    [`& .${speedDialIconClasses$1.openIcon}`]: _extends({
      position: 'absolute',
      transition: theme.transitions.create(['transform', 'opacity'], {
        duration: theme.transitions.duration.short
      }),
      opacity: 0,
      transform: 'rotate(-45deg)'
    }, ownerState.open && {
      transform: 'rotate(0deg)',
      opacity: 1
    })
  }));
  const SpeedDialIcon = /*#__PURE__*/React__namespace.forwardRef(function SpeedDialIcon(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSpeedDialIcon'
    });

    const {
      className,
      icon: iconProp,
      openIcon: openIconProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$u);

    const ownerState = props;
    const classes = useUtilityClasses$o(ownerState);

    function formatIcon(icon, newClassName) {
      if ( /*#__PURE__*/React__namespace.isValidElement(icon)) {
        return /*#__PURE__*/React__namespace.cloneElement(icon, {
          className: newClassName
        });
      }

      return icon;
    }

    return /*#__PURE__*/jsxRuntime_2(SpeedDialIconRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [openIconProp ? formatIcon(openIconProp, classes.openIcon) : null, iconProp ? formatIcon(iconProp, classes.icon) : /*#__PURE__*/jsxRuntime_1(AddIcon, {
        className: classes.icon
      })]
    }));
  });
  SpeedDialIcon.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The icon to display.
     */
    icon: propTypes.node,

    /**
     * @ignore
     * If `true`, the component is shown.
     */
    open: propTypes.bool,

    /**
     * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
     */
    openIcon: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  SpeedDialIcon.muiName = 'SpeedDialIcon';
  var SpeedDialIcon$1 = SpeedDialIcon;

  const _excluded$t = ["component", "direction", "spacing", "divider", "children"];

  function joinChildren(children, separator) {
    const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index) => {
      output.push(child);

      if (index < childrenArray.length - 1) {
        output.push( /*#__PURE__*/React__namespace.cloneElement(separator, {
          key: `separator-${index}`
        }));
      }

      return output;
    }, []);
  }

  const getSideFromDirection = direction => {
    return {
      row: 'Left',
      'row-reverse': 'Right',
      column: 'Top',
      'column-reverse': 'Bottom'
    }[direction];
  };

  const style = ({
    ownerState,
    theme
  }) => {
    let styles = _extends({
      display: 'flex'
    }, handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), propValue => ({
      flexDirection: propValue
    })));

    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme);
      const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
        if (ownerState.spacing[breakpoint] != null || ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }

        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });

      const styleFromPropValue = (propValue, breakpoint) => {
        return {
          '& > :not(style) + :not(style)': {
            margin: 0,
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };

      styles = deepmerge(styles, handleBreakpoints({
        theme
      }, spacingValues, styleFromPropValue));
    }

    return styles;
  };
  const StackRoot = styled$1('div', {
    name: 'MuiStack',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      return [styles.root];
    }
  })(style);
  const Stack = /*#__PURE__*/React__namespace.forwardRef(function Stack(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: 'MuiStack'
    });
    const props = extendSxProp(themeProps);

    const {
      component = 'div',
      direction = 'column',
      spacing = 0,
      divider,
      children
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$t);

    const ownerState = {
      direction,
      spacing
    };
    return /*#__PURE__*/jsxRuntime_1(StackRoot, _extends({
      as: component,
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  Stack.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: propTypes.oneOfType([propTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), propTypes.arrayOf(propTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), propTypes.object]),

    /**
     * Add an element between each child.
     */
    divider: propTypes.node,

    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.string])), propTypes.number, propTypes.object, propTypes.string]),

    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Stack$1 = Stack;

  /**
   * @ignore - internal component.
   */

  const StepperContext = /*#__PURE__*/React__namespace.createContext({});

  {
    StepperContext.displayName = 'StepperContext';
  }

  var StepperContext$1 = StepperContext;

  /**
   * @ignore - internal component.
   */

  const StepContext = /*#__PURE__*/React__namespace.createContext({});

  {
    StepContext.displayName = 'StepContext';
  }

  var StepContext$1 = StepContext;

  function getStepUtilityClass(slot) {
    return generateUtilityClass('MuiStep', slot);
  }
  const stepClasses = generateUtilityClasses('MuiStep', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'completed']);
  var stepClasses$1 = stepClasses;

  const _excluded$s = ["active", "children", "className", "completed", "disabled", "expanded", "index", "last"];

  const useUtilityClasses$n = ownerState => {
    const {
      classes,
      orientation,
      alternativeLabel,
      completed
    } = ownerState;
    const slots = {
      root: ['root', orientation, alternativeLabel && 'alternativeLabel', completed && 'completed']
    };
    return composeClasses(slots, getStepUtilityClass, classes);
  };

  const StepRoot = styled$1('div', {
    name: 'MuiStep',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
    }
  })(({
    ownerState
  }) => _extends({}, ownerState.orientation === 'horizontal' && {
    paddingLeft: 8,
    paddingRight: 8
  }, ownerState.alternativeLabel && {
    flex: 1,
    position: 'relative'
  }));
  const Step = /*#__PURE__*/React__namespace.forwardRef(function Step(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStep'
    });

    const {
      active: activeProp,
      children,
      className,
      completed: completedProp,
      disabled: disabledProp,
      expanded = false,
      index,
      last
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$s);

    const {
      activeStep,
      connector,
      alternativeLabel,
      orientation,
      nonLinear
    } = React__namespace.useContext(StepperContext$1);
    let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];

    if (activeStep === index) {
      active = activeProp !== undefined ? activeProp : true;
    } else if (!nonLinear && activeStep > index) {
      completed = completedProp !== undefined ? completedProp : true;
    } else if (!nonLinear && activeStep < index) {
      disabled = disabledProp !== undefined ? disabledProp : true;
    }

    const contextValue = React__namespace.useMemo(() => ({
      index,
      last,
      expanded,
      icon: index + 1,
      active,
      completed,
      disabled
    }), [index, last, expanded, active, completed, disabled]);

    const ownerState = _extends({}, props, {
      active,
      orientation,
      alternativeLabel,
      completed,
      disabled,
      expanded
    });

    const classes = useUtilityClasses$n(ownerState);

    const newChildren = /*#__PURE__*/jsxRuntime_2(StepRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [connector && alternativeLabel && index !== 0 ? connector : null, children]
    }));

    return /*#__PURE__*/jsxRuntime_1(StepContext$1.Provider, {
      value: contextValue,
      children: connector && !alternativeLabel && index !== 0 ? /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [connector, newChildren]
      }) : newChildren
    });
  });
  Step.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Sets the step as active. Is passed to child components.
     */
    active: propTypes.bool,

    /**
     * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Mark the step as completed. Is passed to child components.
     */
    completed: propTypes.bool,

    /**
     * If `true`, the step is disabled, will also disable the button if
     * `StepButton` is a child of `Step`. Is passed to child components.
     */
    disabled: propTypes.bool,

    /**
     * Expand the step.
     * @default false
     */
    expanded: propTypes.bool,

    /**
     * The position of the step.
     * The prop defaults to the value inherited from the parent Stepper component.
     */
    index: integerPropType,

    /**
     * If `true`, the Step is displayed as rendered last.
     * The prop defaults to the value inherited from the parent Stepper component.
     */
    last: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Step$1 = Step;

  var CheckCircle = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
  }), 'CheckCircle');

  var Warning = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
  }), 'Warning');

  function getStepIconUtilityClass(slot) {
    return generateUtilityClass('MuiStepIcon', slot);
  }
  const stepIconClasses = generateUtilityClasses('MuiStepIcon', ['root', 'active', 'completed', 'error', 'text']);
  var stepIconClasses$1 = stepIconClasses;

  var _circle;

  const _excluded$r = ["active", "className", "completed", "error", "icon"];

  const useUtilityClasses$m = ownerState => {
    const {
      classes,
      active,
      completed,
      error
    } = ownerState;
    const slots = {
      root: ['root', active && 'active', completed && 'completed', error && 'error'],
      text: ['text']
    };
    return composeClasses(slots, getStepIconUtilityClass, classes);
  };

  const StepIconRoot = styled$1(SvgIcon$1, {
    name: 'MuiStepIcon',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => ({
    display: 'block',
    transition: theme.transitions.create('color', {
      duration: theme.transitions.duration.shortest
    }),
    color: theme.palette.text.disabled,
    [`&.${stepIconClasses$1.completed}`]: {
      color: theme.palette.primary.main
    },
    [`&.${stepIconClasses$1.active}`]: {
      color: theme.palette.primary.main
    },
    [`&.${stepIconClasses$1.error}`]: {
      color: theme.palette.error.main
    }
  }));
  const StepIconText = styled$1('text', {
    name: 'MuiStepIcon',
    slot: 'Text',
    overridesResolver: (props, styles) => styles.text
  })(({
    theme
  }) => ({
    fill: theme.palette.primary.contrastText,
    fontSize: theme.typography.caption.fontSize,
    fontFamily: theme.typography.fontFamily
  }));
  const StepIcon = /*#__PURE__*/React__namespace.forwardRef(function StepIcon(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStepIcon'
    });

    const {
      active = false,
      className: classNameProp,
      completed = false,
      error = false,
      icon
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$r);

    const ownerState = _extends({}, props, {
      active,
      completed,
      error
    });

    const classes = useUtilityClasses$m(ownerState);

    if (typeof icon === 'number' || typeof icon === 'string') {
      const className = clsx(classNameProp, classes.root);

      if (error) {
        return /*#__PURE__*/jsxRuntime_1(StepIconRoot, _extends({
          as: Warning,
          className: className,
          ref: ref,
          ownerState: ownerState
        }, other));
      }

      if (completed) {
        return /*#__PURE__*/jsxRuntime_1(StepIconRoot, _extends({
          as: CheckCircle,
          className: className,
          ref: ref,
          ownerState: ownerState
        }, other));
      }

      return /*#__PURE__*/jsxRuntime_2(StepIconRoot, _extends({
        className: className,
        ref: ref,
        ownerState: ownerState
      }, other, {
        children: [_circle || (_circle = /*#__PURE__*/jsxRuntime_1("circle", {
          cx: "12",
          cy: "12",
          r: "12"
        })), /*#__PURE__*/jsxRuntime_1(StepIconText, {
          className: classes.text,
          x: "12",
          y: "16",
          textAnchor: "middle",
          ownerState: ownerState,
          children: icon
        })]
      }));
    }

    return icon;
  });
  StepIcon.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Whether this step is active.
     * @default false
     */
    active: propTypes.bool,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * Mark the step as completed. Is passed to child components.
     * @default false
     */
    completed: propTypes.bool,

    /**
     * If `true`, the step is marked as failed.
     * @default false
     */
    error: propTypes.bool,

    /**
     * The label displayed in the step icon.
     */
    icon: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var StepIcon$1 = StepIcon;

  function getStepLabelUtilityClass(slot) {
    return generateUtilityClass('MuiStepLabel', slot);
  }
  const stepLabelClasses = generateUtilityClasses('MuiStepLabel', ['root', 'horizontal', 'vertical', 'label', 'active', 'completed', 'error', 'disabled', 'iconContainer', 'alternativeLabel', 'labelContainer']);
  var stepLabelClasses$1 = stepLabelClasses;

  const _excluded$q = ["children", "className", "componentsProps", "error", "icon", "optional", "StepIconComponent", "StepIconProps"];

  const useUtilityClasses$l = ownerState => {
    const {
      classes,
      orientation,
      active,
      completed,
      error,
      disabled,
      alternativeLabel
    } = ownerState;
    const slots = {
      root: ['root', orientation, error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
      label: ['label', active && 'active', completed && 'completed', error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
      iconContainer: ['iconContainer', alternativeLabel && 'alternativeLabel'],
      labelContainer: ['labelContainer']
    };
    return composeClasses(slots, getStepLabelUtilityClass, classes);
  };

  const StepLabelRoot = styled$1('span', {
    name: 'MuiStepLabel',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex',
    alignItems: 'center',
    [`&.${stepLabelClasses$1.alternativeLabel}`]: {
      flexDirection: 'column'
    },
    [`&.${stepLabelClasses$1.disabled}`]: {
      cursor: 'default'
    }
  }, ownerState.orientation === 'vertical' && {
    textAlign: 'left',
    padding: '8px 0'
  }));
  const StepLabelLabel = styled$1('span', {
    name: 'MuiStepLabel',
    slot: 'Label',
    overridesResolver: (props, styles) => styles.label
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    display: 'block',
    transition: theme.transitions.create('color', {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${stepLabelClasses$1.active}`]: {
      color: theme.palette.text.primary,
      fontWeight: 500
    },
    [`&.${stepLabelClasses$1.completed}`]: {
      color: theme.palette.text.primary,
      fontWeight: 500
    },
    [`&.${stepLabelClasses$1.alternativeLabel}`]: {
      textAlign: 'center',
      marginTop: 16
    },
    [`&.${stepLabelClasses$1.error}`]: {
      color: theme.palette.error.main
    }
  }));
  const StepLabelIconContainer = styled$1('span', {
    name: 'MuiStepLabel',
    slot: 'IconContainer',
    overridesResolver: (props, styles) => styles.iconContainer
  })(() => ({
    flexShrink: 0,
    // Fix IE11 issue
    display: 'flex',
    paddingRight: 8,
    [`&.${stepLabelClasses$1.alternativeLabel}`]: {
      paddingRight: 0
    }
  }));
  const StepLabelLabelContainer = styled$1('span', {
    name: 'MuiStepLabel',
    slot: 'LabelContainer',
    overridesResolver: (props, styles) => styles.labelContainer
  })(({
    theme
  }) => ({
    width: '100%',
    color: theme.palette.text.secondary
  }));
  const StepLabel = /*#__PURE__*/React__namespace.forwardRef(function StepLabel(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStepLabel'
    });

    const {
      children,
      className,
      componentsProps = {},
      error = false,
      icon: iconProp,
      optional,
      StepIconComponent: StepIconComponentProp,
      StepIconProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$q);

    const {
      alternativeLabel,
      orientation
    } = React__namespace.useContext(StepperContext$1);
    const {
      active,
      disabled,
      completed,
      icon: iconContext
    } = React__namespace.useContext(StepContext$1);
    const icon = iconProp || iconContext;
    let StepIconComponent = StepIconComponentProp;

    if (icon && !StepIconComponent) {
      StepIconComponent = StepIcon$1;
    }

    const ownerState = _extends({}, props, {
      active,
      alternativeLabel,
      completed,
      disabled,
      error,
      orientation
    });

    const classes = useUtilityClasses$l(ownerState);
    return /*#__PURE__*/jsxRuntime_2(StepLabelRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: [icon || StepIconComponent ? /*#__PURE__*/jsxRuntime_1(StepLabelIconContainer, {
        className: classes.iconContainer,
        ownerState: ownerState,
        children: /*#__PURE__*/jsxRuntime_1(StepIconComponent, _extends({
          completed: completed,
          active: active,
          error: error,
          icon: icon
        }, StepIconProps))
      }) : null, /*#__PURE__*/jsxRuntime_2(StepLabelLabelContainer, {
        className: classes.labelContainer,
        ownerState: ownerState,
        children: [children ? /*#__PURE__*/jsxRuntime_1(StepLabelLabel, _extends({
          className: classes.label,
          ownerState: ownerState
        }, componentsProps.label, {
          children: children
        })) : null, optional]
      })]
    }));
  });
  StepLabel.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * In most cases will simply be a string containing a title for the label.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: propTypes.object,

    /**
     * If `true`, the step is marked as failed.
     * @default false
     */
    error: propTypes.bool,

    /**
     * Override the default label of the step icon.
     */
    icon: propTypes.node,

    /**
     * The optional node to display.
     */
    optional: propTypes.node,

    /**
     * The component to render in place of the [`StepIcon`](/api/step-icon/).
     */
    StepIconComponent: propTypes.elementType,

    /**
     * Props applied to the [`StepIcon`](/api/step-icon/) element.
     */
    StepIconProps: propTypes.object,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  StepLabel.muiName = 'StepLabel';
  var StepLabel$1 = StepLabel;

  function getStepButtonUtilityClass(slot) {
    return generateUtilityClass('MuiStepButton', slot);
  }
  const stepButtonClasses = generateUtilityClasses('MuiStepButton', ['root', 'horizontal', 'vertical', 'touchRipple']);
  var stepButtonClasses$1 = stepButtonClasses;

  const _excluded$p = ["children", "className", "icon", "optional"];

  const useUtilityClasses$k = ownerState => {
    const {
      classes,
      orientation
    } = ownerState;
    const slots = {
      root: ['root', orientation],
      touchRipple: ['touchRipple']
    };
    return composeClasses(slots, getStepButtonUtilityClass, classes);
  };

  const StepButtonRoot = styled$1(ButtonBase$1, {
    name: 'MuiStepButton',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${stepButtonClasses$1.touchRipple}`]: styles.touchRipple
      }, styles.root, styles[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: '100%',
    padding: '24px 16px',
    margin: '-24px -16px',
    boxSizing: 'content-box'
  }, ownerState.orientation === 'vertical' && {
    justifyContent: 'flex-start',
    padding: '8px',
    margin: '-8px'
  }, {
    [`& .${stepButtonClasses$1.touchRipple}`]: {
      color: 'rgba(0, 0, 0, 0.3)'
    }
  }));
  const StepButton = /*#__PURE__*/React__namespace.forwardRef(function StepButton(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStepButton'
    });

    const {
      children,
      className,
      icon,
      optional
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$p);

    const {
      disabled
    } = React__namespace.useContext(StepContext$1);
    const {
      orientation
    } = React__namespace.useContext(StepperContext$1);

    const ownerState = _extends({}, props, {
      orientation
    });

    const classes = useUtilityClasses$k(ownerState);
    const childProps = {
      icon,
      optional
    };
    const child = isMuiElement(children, ['StepLabel']) ? /*#__PURE__*/React__namespace.cloneElement(children, childProps) : /*#__PURE__*/jsxRuntime_1(StepLabel$1, _extends({}, childProps, {
      children: children
    }));
    return /*#__PURE__*/jsxRuntime_1(StepButtonRoot, _extends({
      focusRipple: true,
      disabled: disabled,
      TouchRippleProps: {
        className: classes.touchRipple
      },
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: child
    }));
  });
  StepButton.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The icon displayed by the step label.
     */
    icon: propTypes.node,

    /**
     * The optional node to display.
     */
    optional: propTypes.node,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var StepButton$1 = StepButton;

  function getStepConnectorUtilityClass(slot) {
    return generateUtilityClass('MuiStepConnector', slot);
  }
  const stepConnectorClasses = generateUtilityClasses('MuiStepConnector', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'active', 'completed', 'disabled', 'line', 'lineHorizontal', 'lineVertical']);
  var stepConnectorClasses$1 = stepConnectorClasses;

  const _excluded$o = ["className"];

  const useUtilityClasses$j = ownerState => {
    const {
      classes,
      orientation,
      alternativeLabel,
      active,
      completed,
      disabled
    } = ownerState;
    const slots = {
      root: ['root', orientation, alternativeLabel && 'alternativeLabel', active && 'active', completed && 'completed', disabled && 'disabled'],
      line: ['line', `line${capitalize(orientation)}`]
    };
    return composeClasses(slots, getStepConnectorUtilityClass, classes);
  };

  const StepConnectorRoot = styled$1('div', {
    name: 'MuiStepConnector',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
    }
  })(({
    ownerState
  }) => _extends({
    flex: '1 1 auto'
  }, ownerState.orientation === 'vertical' && {
    marginLeft: 12 // half icon

  }, ownerState.alternativeLabel && {
    position: 'absolute',
    top: 8 + 4,
    left: 'calc(-50% + 20px)',
    right: 'calc(50% + 20px)'
  }));
  const StepConnectorLine = styled$1('span', {
    name: 'MuiStepConnector',
    slot: 'Line',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.line, styles[`line${capitalize(ownerState.orientation)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: 'block',
    borderColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
  }, ownerState.orientation === 'horizontal' && {
    borderTopStyle: 'solid',
    borderTopWidth: 1
  }, ownerState.orientation === 'vertical' && {
    borderLeftStyle: 'solid',
    borderLeftWidth: 1,
    minHeight: 24
  }));
  const StepConnector = /*#__PURE__*/React__namespace.forwardRef(function StepConnector(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStepConnector'
    });

    const {
      className
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$o);

    const {
      alternativeLabel,
      orientation = 'horizontal'
    } = React__namespace.useContext(StepperContext$1);
    const {
      active,
      disabled,
      completed
    } = React__namespace.useContext(StepContext$1);

    const ownerState = _extends({}, props, {
      alternativeLabel,
      orientation,
      active,
      completed,
      disabled
    });

    const classes = useUtilityClasses$j(ownerState);
    return /*#__PURE__*/jsxRuntime_1(StepConnectorRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(StepConnectorLine, {
        className: classes.line,
        ownerState: ownerState
      })
    }));
  });
  StepConnector.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var StepConnector$1 = StepConnector;

  function getStepContentUtilityClass(slot) {
    return generateUtilityClass('MuiStepContent', slot);
  }
  const stepContentClasses = generateUtilityClasses('MuiStepContent', ['root', 'last', 'transition']);
  var stepContentClasses$1 = stepContentClasses;

  const _excluded$n = ["children", "className", "TransitionComponent", "transitionDuration", "TransitionProps"];

  const useUtilityClasses$i = ownerState => {
    const {
      classes,
      last
    } = ownerState;
    const slots = {
      root: ['root', last && 'last'],
      transition: ['transition']
    };
    return composeClasses(slots, getStepContentUtilityClass, classes);
  };

  const StepContentRoot = styled$1('div', {
    name: 'MuiStepContent',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.last && styles.last];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    marginLeft: 12,
    // half icon
    paddingLeft: 8 + 12,
    // margin + half icon
    paddingRight: 8,
    borderLeft: `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]}`
  }, ownerState.last && {
    borderLeft: 'none'
  }));
  const StepContentTransition = styled$1(Collapse$1, {
    name: 'MuiStepContent',
    slot: 'Transition',
    overridesResolver: (props, styles) => styles.transition
  })({});
  const StepContent = /*#__PURE__*/React__namespace.forwardRef(function StepContent(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStepContent'
    });

    const {
      children,
      className,
      TransitionComponent = Collapse$1,
      transitionDuration: transitionDurationProp = 'auto',
      TransitionProps
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$n);

    const {
      orientation
    } = React__namespace.useContext(StepperContext$1);
    const {
      active,
      last,
      expanded
    } = React__namespace.useContext(StepContext$1);

    const ownerState = _extends({}, props, {
      last
    });

    const classes = useUtilityClasses$i(ownerState);

    {
      if (orientation !== 'vertical') {
        console.error('MUI: <StepContent /> is only designed for use with the vertical stepper.');
      }
    }

    let transitionDuration = transitionDurationProp;

    if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
      transitionDuration = undefined;
    }

    return /*#__PURE__*/jsxRuntime_1(StepContentRoot, _extends({
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: /*#__PURE__*/jsxRuntime_1(StepContentTransition, _extends({
        as: TransitionComponent,
        in: active || expanded,
        className: classes.transition,
        ownerState: ownerState,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps, {
        children: children
      }))
    }));
  });
  StepContent.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The component used for the transition.
     * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Collapse
     */
    TransitionComponent: propTypes.elementType,

    /**
     * Adjust the duration of the content expand transition.
     * Passed as a prop to the transition component.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition) component.
     */
    TransitionProps: propTypes.object
  } ;
  var StepContent$1 = StepContent;

  function getStepperUtilityClass(slot) {
    return generateUtilityClass('MuiStepper', slot);
  }
  const stepperClasses = generateUtilityClasses('MuiStepper', ['root', 'horizontal', 'vertical', 'alternativeLabel']);
  var stepperClasses$1 = stepperClasses;

  const _excluded$m = ["activeStep", "alternativeLabel", "children", "className", "connector", "nonLinear", "orientation"];

  const useUtilityClasses$h = ownerState => {
    const {
      orientation,
      alternativeLabel,
      classes
    } = ownerState;
    const slots = {
      root: ['root', orientation, alternativeLabel && 'alternativeLabel']
    };
    return composeClasses(slots, getStepperUtilityClass, classes);
  };

  const StepperRoot = styled$1('div', {
    name: 'MuiStepper',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex'
  }, ownerState.orientation === 'horizontal' && {
    flexDirection: 'row',
    alignItems: 'center'
  }, ownerState.orientation === 'vertical' && {
    flexDirection: 'column'
  }, ownerState.alternativeLabel && {
    alignItems: 'flex-start'
  }));

  const defaultConnector = /*#__PURE__*/jsxRuntime_1(StepConnector$1, {});

  const Stepper = /*#__PURE__*/React__namespace.forwardRef(function Stepper(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiStepper'
    });

    const {
      activeStep = 0,
      alternativeLabel = false,
      children,
      className,
      connector = defaultConnector,
      nonLinear = false,
      orientation = 'horizontal'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$m);

    const ownerState = _extends({}, props, {
      alternativeLabel,
      orientation
    });

    const classes = useUtilityClasses$h(ownerState);
    const childrenArray = React__namespace.Children.toArray(children).filter(Boolean);
    const steps = childrenArray.map((step, index) => {
      return /*#__PURE__*/React__namespace.cloneElement(step, _extends({
        index,
        last: index + 1 === childrenArray.length
      }, step.props));
    });
    const contextValue = React__namespace.useMemo(() => ({
      activeStep,
      alternativeLabel,
      connector,
      nonLinear,
      orientation
    }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
    return /*#__PURE__*/jsxRuntime_1(StepperContext$1.Provider, {
      value: contextValue,
      children: /*#__PURE__*/jsxRuntime_1(StepperRoot, _extends({
        ownerState: ownerState,
        className: clsx(classes.root, className),
        ref: ref
      }, other, {
        children: steps
      }))
    });
  });
  Stepper.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Set the active step (zero based index).
     * Set to -1 to disable all the steps.
     * @default 0
     */
    activeStep: integerPropType,

    /**
     * If set to 'true' and orientation is horizontal,
     * then the step label will be positioned under the icon.
     * @default false
     */
    alternativeLabel: propTypes.bool,

    /**
     * Two or more `<Step />` components.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * An element to be placed between each step.
     * @default <StepConnector />
     */
    connector: propTypes.element,

    /**
     * If set the `Stepper` will not assist in controlling steps for linear flow.
     * @default false
     */
    nonLinear: propTypes.bool,

    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Stepper$1 = Stepper;

  const _excluded$l = ["anchor", "classes", "className", "width", "style"];
  const SwipeAreaRoot = styled$1('div', {
    skipSx: true
  })(({
    theme,
    ownerState
  }) => _extends({
    position: 'fixed',
    top: 0,
    left: 0,
    bottom: 0,
    zIndex: theme.zIndex.drawer - 1
  }, ownerState.anchor === 'left' && {
    right: 'auto'
  }, ownerState.anchor === 'right' && {
    left: 'auto',
    right: 0
  }, ownerState.anchor === 'top' && {
    bottom: 'auto',
    right: 0
  }, ownerState.anchor === 'bottom' && {
    top: 'auto',
    bottom: 0,
    right: 0
  }));
  /**
   * @ignore - internal component.
   */

  const SwipeArea = /*#__PURE__*/React__namespace.forwardRef(function SwipeArea(props, ref) {
    const {
      anchor,
      classes = {},
      className,
      width,
      style
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$l);

    const ownerState = props;
    return /*#__PURE__*/jsxRuntime_1(SwipeAreaRoot, _extends({
      className: clsx('PrivateSwipeArea-root', classes.root, classes[`anchor${capitalize(anchor)}`], className),
      ref: ref,
      style: _extends({
        [isHorizontal(anchor) ? 'width' : 'height']: width
      }, style),
      ownerState: ownerState
    }, other));
  });
  SwipeArea.propTypes = {
    /**
     * Side on which to attach the discovery area.
     */
    anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']).isRequired,

    /**
     * @ignore
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * @ignore
     */
    style: propTypes.object,

    /**
     * The width of the left most (or right most) area in `px` where the
     * drawer can be swiped open from.
     */
    width: propTypes.number.isRequired
  } ;
  var SwipeArea$1 = SwipeArea;

  const _excluded$k = ["BackdropProps"],
        _excluded2 = ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"];
  const UNCERTAINTY_THRESHOLD = 3; // px
  // This is the part of the drawer displayed on touch start.

  const DRAG_STARTED_SIGNAL = 20; // px
  // We can only have one instance at the time claiming ownership for handling the swipe.
  // Otherwise, the UX would be confusing.
  // That's why we use a singleton here.

  let claimedSwipeInstance = null; // Exported for test purposes.

  function calculateCurrentX(anchor, touches, doc) {
    return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;
  }

  function calculateCurrentY(anchor, touches, containerWindow) {
    return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;
  }

  function getMaxTranslate(horizontalSwipe, paperInstance) {
    return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
  }

  function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
    return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
  }
  /**
   * @param {Element | null} element
   * @param {Element} rootNode
   */


  function getDomTreeShapes(element, rootNode) {
    // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129
    const domTreeShapes = [];

    while (element && element !== rootNode.parentElement) {
      const style = ownerWindow(rootNode).getComputedStyle(element);

      if ( // Ignore the scroll children if the element is absolute positioned.
      style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden
      style.getPropertyValue('overflow-x') === 'hidden') ; else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
        // Ignore the nodes that have no width.
        // Keep elements with a scroll
        domTreeShapes.push(element);
      }

      element = element.parentElement;
    }

    return domTreeShapes;
  }
  /**
   * @param {object} param0
   * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes
   */


  function computeHasNativeHandler({
    domTreeShapes,
    start,
    current,
    anchor
  }) {
    // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175
    const axisProperties = {
      scrollPosition: {
        x: 'scrollLeft',
        y: 'scrollTop'
      },
      scrollLength: {
        x: 'scrollWidth',
        y: 'scrollHeight'
      },
      clientLength: {
        x: 'clientWidth',
        y: 'clientHeight'
      }
    };
    return domTreeShapes.some(shape => {
      // Determine if we are going backward or forward.
      let goingForward = current >= start;

      if (anchor === 'top' || anchor === 'left') {
        goingForward = !goingForward;
      }

      const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';
      const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);
      const areNotAtStart = scrollPosition > 0;
      const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];

      if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
        return true;
      }

      return false;
    });
  }

  const iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);
  const transitionDurationDefault = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  const SwipeableDrawer = /*#__PURE__*/React__namespace.forwardRef(function SwipeableDrawer(inProps, ref) {
    const props = useThemeProps$1({
      name: 'MuiSwipeableDrawer',
      props: inProps
    });
    const theme = useTheme();

    const {
      anchor = 'left',
      disableBackdropTransition = false,
      disableDiscovery = false,
      disableSwipeToOpen = iOS,
      hideBackdrop,
      hysteresis = 0.52,
      minFlingVelocity = 450,
      ModalProps: {
        BackdropProps
      } = {},
      onClose,
      onOpen,
      open,
      PaperProps = {},
      SwipeAreaProps,
      swipeAreaWidth = 20,
      transitionDuration = transitionDurationDefault,
      variant = 'temporary'
    } = props,
          ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded$k),
          other = _objectWithoutPropertiesLoose(props, _excluded2);

    const [maybeSwiping, setMaybeSwiping] = React__namespace.useState(false);
    const swipeInstance = React__namespace.useRef({
      isSwiping: null
    });
    const swipeAreaRef = React__namespace.useRef();
    const backdropRef = React__namespace.useRef();
    const paperRef = React__namespace.useRef();
    const touchDetected = React__namespace.useRef(false); // Ref for transition duration based on / to match swipe speed

    const calculatedDurationRef = React__namespace.useRef(); // Use a ref so the open value used is always up to date inside useCallback.

    useEnhancedEffect$1(() => {
      calculatedDurationRef.current = null;
    }, [open]);
    const setPosition = React__namespace.useCallback((translate, options = {}) => {
      const {
        mode = null,
        changeTransition = true
      } = options;
      const anchorRtl = getAnchor(theme, anchor);
      const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;
      const horizontalSwipe = isHorizontal(anchor);
      const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;
      const drawerStyle = paperRef.current.style;
      drawerStyle.webkitTransform = transform;
      drawerStyle.transform = transform;
      let transition = '';

      if (mode) {
        transition = theme.transitions.create('all', getTransitionProps({
          easing: undefined,
          style: undefined,
          timeout: transitionDuration
        }, {
          mode
        }));
      }

      if (changeTransition) {
        drawerStyle.webkitTransition = transition;
        drawerStyle.transition = transition;
      }

      if (!disableBackdropTransition && !hideBackdrop) {
        const backdropStyle = backdropRef.current.style;
        backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);

        if (changeTransition) {
          backdropStyle.webkitTransition = transition;
          backdropStyle.transition = transition;
        }
      }
    }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
    const handleBodyTouchEnd = useEventCallback(nativeEvent => {
      if (!touchDetected.current) {
        return;
      }

      claimedSwipeInstance = null;
      touchDetected.current = false;
      setMaybeSwiping(false); // The swipe wasn't started.

      if (!swipeInstance.current.isSwiping) {
        swipeInstance.current.isSwiping = null;
        return;
      }

      swipeInstance.current.isSwiping = null;
      const anchorRtl = getAnchor(theme, anchor);
      const horizontal = isHorizontal(anchor);
      let current;

      if (horizontal) {
        current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));
      } else {
        current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));
      }

      const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
      const maxTranslate = getMaxTranslate(horizontal, paperRef.current);
      const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
      const translateRatio = currentTranslate / maxTranslate;

      if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
        // Calculate transition duration to match swipe speed
        calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;
      }

      if (open) {
        if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
          onClose();
        } else {
          // Reset the position, the swipe was aborted.
          setPosition(0, {
            mode: 'exit'
          });
        }

        return;
      }

      if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
        onOpen();
      } else {
        // Reset the position, the swipe was aborted.
        setPosition(getMaxTranslate(horizontal, paperRef.current), {
          mode: 'enter'
        });
      }
    });
    const handleBodyTouchMove = useEventCallback(nativeEvent => {
      // the ref may be null when a parent component updates while swiping
      if (!paperRef.current || !touchDetected.current) {
        return;
      } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer


      if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {
        return;
      }

      const anchorRtl = getAnchor(theme, anchor);
      const horizontalSwipe = isHorizontal(anchor);
      const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));
      const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));

      if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {
        const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);
        const hasNativeHandler = computeHasNativeHandler({
          domTreeShapes,
          start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
          current: horizontalSwipe ? currentX : currentY,
          anchor
        });

        if (hasNativeHandler) {
          claimedSwipeInstance = true;
          return;
        }

        claimedSwipeInstance = swipeInstance.current;
      } // We don't know yet.


      if (swipeInstance.current.isSwiping == null) {
        const dx = Math.abs(currentX - swipeInstance.current.startX);
        const dy = Math.abs(currentY - swipeInstance.current.startY);
        const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;

        if (definitelySwiping && nativeEvent.cancelable) {
          nativeEvent.preventDefault();
        }

        if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
          swipeInstance.current.isSwiping = definitelySwiping;

          if (!definitelySwiping) {
            handleBodyTouchEnd(nativeEvent);
            return;
          } // Shift the starting point.


          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.

          if (!disableDiscovery && !open) {
            if (horizontalSwipe) {
              swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;
            } else {
              swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;
            }
          }
        }
      }

      if (!swipeInstance.current.isSwiping) {
        return;
      }

      const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
      let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;

      if (open && !swipeInstance.current.paperHit) {
        startLocation = Math.min(startLocation, maxTranslate);
      }

      const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);

      if (open) {
        if (!swipeInstance.current.paperHit) {
          const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;

          if (paperHit) {
            swipeInstance.current.paperHit = true;
            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY;
          } else {
            return;
          }
        } else if (translate === 0) {
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
        }
      }

      if (swipeInstance.current.lastTranslate === null) {
        swipeInstance.current.lastTranslate = translate;
        swipeInstance.current.lastTime = performance.now() + 1;
      }

      const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.

      swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
      swipeInstance.current.lastTranslate = translate;
      swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.

      if (nativeEvent.cancelable) {
        nativeEvent.preventDefault();
      }

      setPosition(translate);
    });
    const handleBodyTouchStart = useEventCallback(nativeEvent => {
      // We are not supposed to handle this touch move.
      // Example of use case: ignore the event if there is a Slider.
      if (nativeEvent.defaultPrevented) {
        return;
      } // We can only have one node at the time claiming ownership for handling the swipe.


      if (nativeEvent.defaultMuiPrevented) {
        return;
      } // At least one element clogs the drawer interaction zone.


      if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {
        return;
      }

      const anchorRtl = getAnchor(theme, anchor);
      const horizontalSwipe = isHorizontal(anchor);
      const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));
      const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));

      if (!open) {
        if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {
          return;
        }

        if (horizontalSwipe) {
          if (currentX > swipeAreaWidth) {
            return;
          }
        } else if (currentY > swipeAreaWidth) {
          return;
        }
      }

      nativeEvent.defaultMuiPrevented = true;
      claimedSwipeInstance = null;
      swipeInstance.current.startX = currentX;
      swipeInstance.current.startY = currentY;
      setMaybeSwiping(true);

      if (!open && paperRef.current) {
        // The ref may be null when a parent component updates while swiping.
        setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {
          changeTransition: false
        });
      }

      swipeInstance.current.velocity = 0;
      swipeInstance.current.lastTime = null;
      swipeInstance.current.lastTranslate = null;
      swipeInstance.current.paperHit = false;
      touchDetected.current = true;
    });
    React__namespace.useEffect(() => {
      if (variant === 'temporary') {
        const doc = ownerDocument(paperRef.current);
        doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.
        // It only needs to prevent scrolling on the drawer's content when open.
        // When closed, the overlay prevents scrolling.

        doc.addEventListener('touchmove', handleBodyTouchMove, {
          passive: !open
        });
        doc.addEventListener('touchend', handleBodyTouchEnd);
        return () => {
          doc.removeEventListener('touchstart', handleBodyTouchStart);
          doc.removeEventListener('touchmove', handleBodyTouchMove, {
            passive: !open
          });
          doc.removeEventListener('touchend', handleBodyTouchEnd);
        };
      }

      return undefined;
    }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
    React__namespace.useEffect(() => () => {
      // We need to release the lock.
      if (claimedSwipeInstance === swipeInstance.current) {
        claimedSwipeInstance = null;
      }
    }, []);
    React__namespace.useEffect(() => {
      if (!open) {
        setMaybeSwiping(false);
      }
    }, [open]);
    return /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
      children: [/*#__PURE__*/jsxRuntime_1(Drawer$1, _extends({
        open: variant === 'temporary' && maybeSwiping ? true : open,
        variant: variant,
        ModalProps: _extends({
          BackdropProps: _extends({}, BackdropProps, {
            ref: backdropRef
          })
        }, ModalPropsProp),
        hideBackdrop: hideBackdrop,
        PaperProps: _extends({}, PaperProps, {
          style: _extends({
            pointerEvents: variant === 'temporary' && !open ? 'none' : ''
          }, PaperProps.style),
          ref: paperRef
        }),
        anchor: anchor,
        transitionDuration: calculatedDurationRef.current || transitionDuration,
        onClose: onClose,
        ref: ref
      }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/jsxRuntime_1(NoSsr, {
        children: /*#__PURE__*/jsxRuntime_1(SwipeArea$1, _extends({
          anchor: anchor,
          ref: swipeAreaRef,
          width: swipeAreaWidth
        }, SwipeAreaProps))
      })]
    });
  });
  SwipeableDrawer.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * @ignore
     */
    anchor: propTypes.oneOf(['bottom', 'left', 'right', 'top']),

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Disable the backdrop transition.
     * This can improve the FPS on low-end devices.
     * @default false
     */
    disableBackdropTransition: propTypes.bool,

    /**
     * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
     * to promote accidental discovery of the swipe gesture.
     * @default false
     */
    disableDiscovery: propTypes.bool,

    /**
     * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
     * navigation actions. Swipe to open is disabled on iOS browsers by default.
     * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)
     */
    disableSwipeToOpen: propTypes.bool,

    /**
     * @ignore
     */
    hideBackdrop: propTypes.bool,

    /**
     * Affects how far the drawer must be opened/closed to change its state.
     * Specified as percent (0-1) of the width of the drawer
     * @default 0.52
     */
    hysteresis: propTypes.number,

    /**
     * Defines, from which (average) velocity on, the swipe is
     * defined as complete although hysteresis isn't reached.
     * Good threshold is between 250 - 1000 px/s
     * @default 450
     */
    minFlingVelocity: propTypes.number,

    /**
     * @ignore
     */
    ModalProps: propTypes
    /* @typescript-to-proptypes-ignore */
    .shape({
      BackdropProps: propTypes.shape({
        component: elementTypeAcceptingRef$1
      })
    }),

    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     */
    onClose: propTypes.func.isRequired,

    /**
     * Callback fired when the component requests to be opened.
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: propTypes.func.isRequired,

    /**
     * If `true`, the component is shown.
     */
    open: propTypes.bool.isRequired,

    /**
     * @ignore
     */
    PaperProps: propTypes
    /* @typescript-to-proptypes-ignore */
    .shape({
      component: elementTypeAcceptingRef$1,
      style: propTypes.object
    }),

    /**
     * The element is used to intercept the touch events on the edge.
     */
    SwipeAreaProps: propTypes.object,

    /**
     * The width of the left most (or right most) area in `px` that
     * the drawer can be swiped open from.
     * @default 20
     */
    swipeAreaWidth: propTypes.number,

    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }
     */
    transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
      appear: propTypes.number,
      enter: propTypes.number,
      exit: propTypes.number
    })]),

    /**
     * @ignore
     */
    variant: propTypes.oneOf(['permanent', 'persistent', 'temporary'])
  } ;
  var SwipeableDrawer$1 = SwipeableDrawer;

  function getSwitchUtilityClass(slot) {
    return generateUtilityClass('MuiSwitch', slot);
  }
  const switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);
  var switchClasses$1 = switchClasses;

  const _excluded$j = ["className", "color", "edge", "size", "sx"];

  const useUtilityClasses$g = ownerState => {
    const {
      classes,
      edge,
      size,
      color,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
      switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],
      thumb: ['thumb'],
      track: ['track'],
      input: ['input']
    };
    const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };

  const SwitchRoot = styled$1('span', {
    name: 'MuiSwitch',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'inline-flex',
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: 'hidden',
    padding: 12,
    boxSizing: 'border-box',
    position: 'relative',
    flexShrink: 0,
    zIndex: 0,
    // Reset the stacking context.
    verticalAlign: 'middle',
    // For correct alignment with the text.
    '@media print': {
      colorAdjust: 'exact'
    }
  }, ownerState.edge === 'start' && {
    marginLeft: -8
  }, ownerState.edge === 'end' && {
    marginRight: -8
  }, ownerState.size === 'small' && {
    width: 40,
    height: 24,
    padding: 7,
    [`& .${switchClasses$1.thumb}`]: {
      width: 16,
      height: 16
    },
    [`& .${switchClasses$1.switchBase}`]: {
      padding: 4,
      [`&.${switchClasses$1.checked}`]: {
        transform: 'translateX(16px)'
      }
    }
  }));
  const SwitchSwitchBase = styled$1(SwitchBase$1, {
    name: 'MuiSwitch',
    slot: 'SwitchBase',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.switchBase, {
        [`& .${switchClasses$1.input}`]: styles.input
      }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: 'absolute',
    top: 0,
    left: 0,
    zIndex: 1,
    // Render above the focus ripple.
    color: theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300],
    transition: theme.transitions.create(['left', 'transform'], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses$1.checked}`]: {
      transform: 'translateX(20px)'
    },
    [`&.${switchClasses$1.disabled}`]: {
      color: theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]
    },
    [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses$1.disabled} + .${switchClasses$1.track}`]: {
      opacity: theme.palette.mode === 'light' ? 0.12 : 0.2
    },
    [`& .${switchClasses$1.input}`]: {
      left: '-100%',
      width: '300%'
    }
  }), ({
    theme,
    ownerState
  }) => _extends({
    '&:hover': {
      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    }
  }, ownerState.color !== 'default' && {
    [`&.${switchClasses$1.checked}`]: {
      color: theme.palette[ownerState.color].main,
      '&:hover': {
        backgroundColor: alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${switchClasses$1.disabled}`]: {
        color: theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)
      }
    },
    [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
      backgroundColor: theme.palette[ownerState.color].main
    }
  }));
  const SwitchTrack = styled$1('span', {
    name: 'MuiSwitch',
    slot: 'Track',
    overridesResolver: (props, styles) => styles.track
  })(({
    theme
  }) => ({
    height: '100%',
    width: '100%',
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(['opacity', 'background-color'], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white,
    opacity: theme.palette.mode === 'light' ? 0.38 : 0.3
  }));
  const SwitchThumb = styled$1('span', {
    name: 'MuiSwitch',
    slot: 'Thumb',
    overridesResolver: (props, styles) => styles.thumb
  })(({
    theme
  }) => ({
    boxShadow: theme.shadows[1],
    backgroundColor: 'currentColor',
    width: 20,
    height: 20,
    borderRadius: '50%'
  }));
  const Switch = /*#__PURE__*/React__namespace.forwardRef(function Switch(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiSwitch'
    });

    const {
      className,
      color = 'primary',
      edge = false,
      size = 'medium',
      sx
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$j);

    const ownerState = _extends({}, props, {
      color,
      edge,
      size
    });

    const classes = useUtilityClasses$g(ownerState);

    const icon = /*#__PURE__*/jsxRuntime_1(SwitchThumb, {
      className: classes.thumb,
      ownerState: ownerState
    });

    return /*#__PURE__*/jsxRuntime_2(SwitchRoot, {
      className: clsx(classes.root, className),
      sx: sx,
      ownerState: ownerState,
      children: [/*#__PURE__*/jsxRuntime_1(SwitchSwitchBase, _extends({
        type: "checkbox",
        icon: icon,
        checkedIcon: icon,
        ref: ref,
        ownerState: ownerState
      }, other, {
        classes: _extends({}, classes, {
          root: classes.switchBase
        })
      })), /*#__PURE__*/jsxRuntime_1(SwitchTrack, {
        className: classes.track,
        ownerState: ownerState
      })]
    });
  });
  Switch.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the component is checked.
     */
    checked: propTypes.bool,

    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: propTypes.bool,

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     */
    disableRipple: propTypes.bool,

    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: propTypes.oneOf(['end', 'start', false]),

    /**
     * The icon to display when the component is unchecked.
     */
    icon: propTypes.node,

    /**
     * The id of the `input` element.
     */
    id: propTypes.string,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: propTypes.func,

    /**
     * If `true`, the `input` element is required.
     */
    required: propTypes.bool,

    /**
     * The size of the component.
     * `small` is equivalent to the dense switch styling.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: propTypes.any
  } ;
  var Switch$1 = Switch;

  function getTabUtilityClass(slot) {
    return generateUtilityClass('MuiTab', slot);
  }
  const tabClasses = generateUtilityClasses('MuiTab', ['root', 'labelIcon', 'textColorInherit', 'textColorPrimary', 'textColorSecondary', 'selected', 'disabled', 'fullWidth', 'wrapped', 'iconWrapper']);
  var tabClasses$1 = tabClasses;

  const _excluded$i = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];

  const useUtilityClasses$f = ownerState => {
    const {
      classes,
      textColor,
      fullWidth,
      wrapped,
      icon,
      label,
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ['root', icon && label && 'labelIcon', `textColor${capitalize(textColor)}`, fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled'],
      iconWrapper: ['iconWrapper']
    };
    return composeClasses(slots, getTabUtilityClass, classes);
  };

  const TabRoot = styled$1(ButtonBase$1, {
    name: 'MuiTab',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.label && ownerState.icon && styles.labelIcon, styles[`textColor${capitalize(ownerState.textColor)}`], ownerState.fullWidth && styles.fullWidth, ownerState.wrapped && styles.wrapped];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.button, {
    maxWidth: 360,
    minWidth: 90,
    position: 'relative',
    minHeight: 48,
    flexShrink: 0,
    padding: '12px 16px',
    overflow: 'hidden',
    whiteSpace: 'normal',
    textAlign: 'center'
  }, ownerState.label && {
    flexDirection: ownerState.iconPosition === 'top' || ownerState.iconPosition === 'bottom' ? 'column' : 'row'
  }, {
    lineHeight: 1.25
  }, ownerState.icon && ownerState.label && {
    minHeight: 72,
    paddingTop: 9,
    paddingBottom: 9,
    [`& > .${tabClasses$1.iconWrapper}`]: _extends({}, ownerState.iconPosition === 'top' && {
      marginBottom: 6
    }, ownerState.iconPosition === 'bottom' && {
      marginTop: 6
    }, ownerState.iconPosition === 'start' && {
      marginRight: theme.spacing(1)
    }, ownerState.iconPosition === 'end' && {
      marginLeft: theme.spacing(1)
    })
  }, ownerState.textColor === 'inherit' && {
    color: 'inherit',
    opacity: 0.6,
    // same opacity as theme.palette.text.secondary
    [`&.${tabClasses$1.selected}`]: {
      opacity: 1
    },
    [`&.${tabClasses$1.disabled}`]: {
      opacity: theme.palette.action.disabledOpacity
    }
  }, ownerState.textColor === 'primary' && {
    color: theme.palette.text.secondary,
    [`&.${tabClasses$1.selected}`]: {
      color: theme.palette.primary.main
    },
    [`&.${tabClasses$1.disabled}`]: {
      color: theme.palette.text.disabled
    }
  }, ownerState.textColor === 'secondary' && {
    color: theme.palette.text.secondary,
    [`&.${tabClasses$1.selected}`]: {
      color: theme.palette.secondary.main
    },
    [`&.${tabClasses$1.disabled}`]: {
      color: theme.palette.text.disabled
    }
  }, ownerState.fullWidth && {
    flexShrink: 1,
    flexGrow: 1,
    flexBasis: 0,
    maxWidth: 'none'
  }, ownerState.wrapped && {
    fontSize: theme.typography.pxToRem(12)
  }));
  const Tab = /*#__PURE__*/React__namespace.forwardRef(function Tab(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTab'
    });

    const {
      className,
      disabled = false,
      disableFocusRipple = false,
      // eslint-disable-next-line react/prop-types
      fullWidth,
      icon: iconProp,
      iconPosition = 'top',
      // eslint-disable-next-line react/prop-types
      indicator,
      label,
      onChange,
      onClick,
      onFocus,
      // eslint-disable-next-line react/prop-types
      selected,
      // eslint-disable-next-line react/prop-types
      selectionFollowsFocus,
      // eslint-disable-next-line react/prop-types
      textColor = 'inherit',
      value,
      wrapped = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$i);

    const ownerState = _extends({}, props, {
      disabled,
      disableFocusRipple,
      selected,
      icon: !!iconProp,
      iconPosition,
      label: !!label,
      fullWidth,
      textColor,
      wrapped
    });

    const classes = useUtilityClasses$f(ownerState);
    const icon = iconProp && label && /*#__PURE__*/React__namespace.isValidElement(iconProp) ? /*#__PURE__*/React__namespace.cloneElement(iconProp, {
      className: clsx(classes.iconWrapper, iconProp.props.className)
    }) : iconProp;

    const handleClick = event => {
      if (!selected && onChange) {
        onChange(event, value);
      }

      if (onClick) {
        onClick(event);
      }
    };

    const handleFocus = event => {
      if (selectionFollowsFocus && !selected && onChange) {
        onChange(event, value);
      }

      if (onFocus) {
        onFocus(event);
      }
    };

    return /*#__PURE__*/jsxRuntime_2(TabRoot, _extends({
      focusRipple: !disableFocusRipple,
      className: clsx(classes.root, className),
      ref: ref,
      role: "tab",
      "aria-selected": selected,
      disabled: disabled,
      onClick: handleClick,
      onFocus: handleFocus,
      ownerState: ownerState,
      tabIndex: selected ? 0 : -1
    }, other, {
      children: [iconPosition === 'top' || iconPosition === 'start' ? /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [icon, label]
      }) : /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
        children: [label, icon]
      }), indicator]
    }));
  });
  Tab.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: propTypes.bool,

    /**
     * The icon to display.
     */
    icon: propTypes.oneOfType([propTypes.element, propTypes.string]),

    /**
     * The position of the icon relative to the label.
     * @default 'top'
     */
    iconPosition: propTypes.oneOf(['bottom', 'end', 'start', 'top']),

    /**
     * The label element.
     */
    label: propTypes.node,

    /**
     * @ignore
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: propTypes.any,

    /**
     * Tab labels appear in a single row.
     * They can use a second line if needed.
     * @default false
     */
    wrapped: propTypes.bool
  } ;
  var Tab$1 = Tab;

  /**
   * @ignore - internal component.
   */

  const TableContext = /*#__PURE__*/React__namespace.createContext();

  {
    TableContext.displayName = 'TableContext';
  }

  var TableContext$1 = TableContext;

  function getTableUtilityClass(slot) {
    return generateUtilityClass('MuiTable', slot);
  }
  const tableClasses = generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);
  var tableClasses$1 = tableClasses;

  const _excluded$h = ["className", "component", "padding", "size", "stickyHeader"];

  const useUtilityClasses$e = ownerState => {
    const {
      classes,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ['root', stickyHeader && 'stickyHeader']
    };
    return composeClasses(slots, getTableUtilityClass, classes);
  };

  const TableRoot = styled$1('table', {
    name: 'MuiTable',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.stickyHeader && styles.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: 'table',
    width: '100%',
    borderCollapse: 'collapse',
    borderSpacing: 0,
    '& caption': _extends({}, theme.typography.body2, {
      padding: theme.spacing(2),
      color: theme.palette.text.secondary,
      textAlign: 'left',
      captionSide: 'bottom'
    })
  }, ownerState.stickyHeader && {
    borderCollapse: 'separate'
  }));
  const defaultComponent$4 = 'table';
  const Table = /*#__PURE__*/React__namespace.forwardRef(function Table(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTable'
    });

    const {
      className,
      component = defaultComponent$4,
      padding = 'normal',
      size = 'medium',
      stickyHeader = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$h);

    const ownerState = _extends({}, props, {
      component,
      padding,
      size,
      stickyHeader
    });

    const classes = useUtilityClasses$e(ownerState);
    const table = React__namespace.useMemo(() => ({
      padding,
      size,
      stickyHeader
    }), [padding, size, stickyHeader]);
    return /*#__PURE__*/jsxRuntime_1(TableContext$1.Provider, {
      value: table,
      children: /*#__PURE__*/jsxRuntime_1(TableRoot, _extends({
        as: component,
        role: component === defaultComponent$4 ? null : 'table',
        ref: ref,
        className: clsx(classes.root, className),
        ownerState: ownerState
      }, other))
    });
  });
  Table.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the table, normally `TableHead` and `TableBody`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Allows TableCells to inherit padding of the Table.
     * @default 'normal'
     */
    padding: propTypes.oneOf(['checkbox', 'none', 'normal']),

    /**
     * Allows TableCells to inherit size of the Table.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * Set the header sticky.
     *
     * ⚠️ It doesn't work with IE11.
     * @default false
     */
    stickyHeader: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var Table$1 = Table;

  /**
   * @ignore - internal component.
   */

  const Tablelvl2Context = /*#__PURE__*/React__namespace.createContext();

  {
    Tablelvl2Context.displayName = 'Tablelvl2Context';
  }

  var Tablelvl2Context$1 = Tablelvl2Context;

  function getTableBodyUtilityClass(slot) {
    return generateUtilityClass('MuiTableBody', slot);
  }
  const tableBodyClasses = generateUtilityClasses('MuiTableBody', ['root']);
  var tableBodyClasses$1 = tableBodyClasses;

  const _excluded$g = ["className", "component"];

  const useUtilityClasses$d = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getTableBodyUtilityClass, classes);
  };

  const TableBodyRoot = styled$1('tbody', {
    name: 'MuiTableBody',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    display: 'table-row-group'
  });
  const tablelvl2$2 = {
    variant: 'body'
  };
  const defaultComponent$3 = 'tbody';
  const TableBody = /*#__PURE__*/React__namespace.forwardRef(function TableBody(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableBody'
    });

    const {
      className,
      component = defaultComponent$3
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$g);

    const ownerState = _extends({}, props, {
      component
    });

    const classes = useUtilityClasses$d(ownerState);
    return /*#__PURE__*/jsxRuntime_1(Tablelvl2Context$1.Provider, {
      value: tablelvl2$2,
      children: /*#__PURE__*/jsxRuntime_1(TableBodyRoot, _extends({
        className: clsx(classes.root, className),
        as: component,
        ref: ref,
        role: component === defaultComponent$3 ? null : 'rowgroup',
        ownerState: ownerState
      }, other))
    });
  });
  TableBody.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally `TableRow`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TableBody$1 = TableBody;

  function getTableCellUtilityClass(slot) {
    return generateUtilityClass('MuiTableCell', slot);
  }
  const tableCellClasses = generateUtilityClasses('MuiTableCell', ['root', 'head', 'body', 'footer', 'sizeSmall', 'sizeMedium', 'paddingCheckbox', 'paddingNone', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'stickyHeader']);
  var tableCellClasses$1 = tableCellClasses;

  const _excluded$f = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];

  const useUtilityClasses$c = ownerState => {
    const {
      classes,
      variant,
      align,
      padding,
      size,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ['root', variant, stickyHeader && 'stickyHeader', align !== 'inherit' && `align${capitalize(align)}`, padding !== 'normal' && `padding${capitalize(padding)}`, `size${capitalize(size)}`]
    };
    return composeClasses(slots, getTableCellUtilityClass, classes);
  };

  const TableCellRoot = styled$1('td', {
    name: 'MuiTableCell',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.padding !== 'normal' && styles[`padding${capitalize(ownerState.padding)}`], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    display: 'table-cell',
    verticalAlign: 'inherit',
    // Workaround for a rendering bug with spanned columns in Chrome 62.0.
    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
    borderBottom: `1px solid
    ${theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
    textAlign: 'left',
    padding: 16
  }, ownerState.variant === 'head' && {
    color: theme.palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === 'body' && {
    color: theme.palette.text.primary
  }, ownerState.variant === 'footer' && {
    color: theme.palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === 'small' && {
    padding: '6px 16px',
    [`&.${tableCellClasses$1.paddingCheckbox}`]: {
      width: 24,
      // prevent the checkbox column from growing
      padding: '0 12px 0 16px',
      '& > *': {
        padding: 0
      }
    }
  }, ownerState.padding === 'checkbox' && {
    width: 48,
    // prevent the checkbox column from growing
    padding: '0 0 0 4px'
  }, ownerState.padding === 'none' && {
    padding: 0
  }, ownerState.align === 'left' && {
    textAlign: 'left'
  }, ownerState.align === 'center' && {
    textAlign: 'center'
  }, ownerState.align === 'right' && {
    textAlign: 'right',
    flexDirection: 'row-reverse'
  }, ownerState.align === 'justify' && {
    textAlign: 'justify'
  }, ownerState.stickyHeader && {
    position: 'sticky',
    top: 0,
    zIndex: 2,
    backgroundColor: theme.palette.background.default
  }));
  /**
   * The component renders a `<th>` element when the parent context is a header
   * or otherwise a `<td>` element.
   */

  const TableCell = /*#__PURE__*/React__namespace.forwardRef(function TableCell(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableCell'
    });

    const {
      align = 'inherit',
      className,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$f);

    const table = React__namespace.useContext(TableContext$1);
    const tablelvl2 = React__namespace.useContext(Tablelvl2Context$1);
    const isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
    let component;

    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? 'th' : 'td';
    }

    let scope = scopeProp;

    if (!scope && isHeadCell) {
      scope = 'col';
    }

    const variant = variantProp || tablelvl2 && tablelvl2.variant;

    const ownerState = _extends({}, props, {
      align,
      component,
      padding: paddingProp || (table && table.padding ? table.padding : 'normal'),
      size: sizeProp || (table && table.size ? table.size : 'medium'),
      sortDirection,
      stickyHeader: variant === 'head' && table && table.stickyHeader,
      variant
    });

    const classes = useUtilityClasses$c(ownerState);
    let ariaSort = null;

    if (sortDirection) {
      ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
    }

    return /*#__PURE__*/jsxRuntime_1(TableCellRoot, _extends({
      as: component,
      ref: ref,
      className: clsx(classes.root, className),
      "aria-sort": ariaSort,
      scope: scope,
      ownerState: ownerState
    }, other));
  });
  TableCell.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Set the text-align on the table cell content.
     *
     * Monetary or generally number fields **should be right aligned** as that allows
     * you to add them up quickly in your head without having to worry about decimals.
     * @default 'inherit'
     */
    align: propTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Sets the padding applied to the cell.
     * The prop defaults to the value (`'default'`) inherited from the parent Table component.
     */
    padding: propTypes.oneOf(['checkbox', 'none', 'normal']),

    /**
     * Set scope attribute.
     */
    scope: propTypes.string,

    /**
     * Specify the size of the cell.
     * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
     */
    size: propTypes.oneOf(['small', 'medium']),

    /**
     * Set aria-sort direction.
     */
    sortDirection: propTypes.oneOf(['asc', 'desc', false]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Specify the cell type.
     * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
     */
    variant: propTypes.oneOf(['body', 'footer', 'head'])
  } ;
  var TableCell$1 = TableCell;

  function getTableContainerUtilityClass(slot) {
    return generateUtilityClass('MuiTableContainer', slot);
  }
  const tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);
  var tableContainerClasses$1 = tableContainerClasses;

  const _excluded$e = ["className", "component"];

  const useUtilityClasses$b = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getTableContainerUtilityClass, classes);
  };

  const TableContainerRoot = styled$1('div', {
    name: 'MuiTableContainer',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    width: '100%',
    overflowX: 'auto'
  });
  const TableContainer = /*#__PURE__*/React__namespace.forwardRef(function TableContainer(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableContainer'
    });

    const {
      className,
      component = 'div'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$e);

    const ownerState = _extends({}, props, {
      component
    });

    const classes = useUtilityClasses$b(ownerState);
    return /*#__PURE__*/jsxRuntime_1(TableContainerRoot, _extends({
      ref: ref,
      as: component,
      className: clsx(classes.root, className),
      ownerState: ownerState
    }, other));
  });
  TableContainer.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally `Table`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TableContainer$1 = TableContainer;

  function getTableFooterUtilityClass(slot) {
    return generateUtilityClass('MuiTableFooter', slot);
  }
  const tableFooterClasses = generateUtilityClasses('MuiTableFooter', ['root']);
  var tableFooterClasses$1 = tableFooterClasses;

  const _excluded$d = ["className", "component"];

  const useUtilityClasses$a = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getTableFooterUtilityClass, classes);
  };

  const TableFooterRoot = styled$1('tfoot', {
    name: 'MuiTableFooter',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    display: 'table-footer-group'
  });
  const tablelvl2$1 = {
    variant: 'footer'
  };
  const defaultComponent$2 = 'tfoot';
  const TableFooter = /*#__PURE__*/React__namespace.forwardRef(function TableFooter(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableFooter'
    });

    const {
      className,
      component = defaultComponent$2
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$d);

    const ownerState = _extends({}, props, {
      component
    });

    const classes = useUtilityClasses$a(ownerState);
    return /*#__PURE__*/jsxRuntime_1(Tablelvl2Context$1.Provider, {
      value: tablelvl2$1,
      children: /*#__PURE__*/jsxRuntime_1(TableFooterRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        role: component === defaultComponent$2 ? null : 'rowgroup',
        ownerState: ownerState
      }, other))
    });
  });
  TableFooter.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally `TableRow`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TableFooter$1 = TableFooter;

  function getTableHeadUtilityClass(slot) {
    return generateUtilityClass('MuiTableHead', slot);
  }
  const tableHeadClasses = generateUtilityClasses('MuiTableHead', ['root']);
  var tableHeadClasses$1 = tableHeadClasses;

  const _excluded$c = ["className", "component"];

  const useUtilityClasses$9 = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getTableHeadUtilityClass, classes);
  };

  const TableHeadRoot = styled$1('thead', {
    name: 'MuiTableHead',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({
    display: 'table-header-group'
  });
  const tablelvl2 = {
    variant: 'head'
  };
  const defaultComponent$1 = 'thead';
  const TableHead = /*#__PURE__*/React__namespace.forwardRef(function TableHead(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableHead'
    });

    const {
      className,
      component = defaultComponent$1
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$c);

    const ownerState = _extends({}, props, {
      component
    });

    const classes = useUtilityClasses$9(ownerState);
    return /*#__PURE__*/jsxRuntime_1(Tablelvl2Context$1.Provider, {
      value: tablelvl2,
      children: /*#__PURE__*/jsxRuntime_1(TableHeadRoot, _extends({
        as: component,
        className: clsx(classes.root, className),
        ref: ref,
        role: component === defaultComponent$1 ? null : 'rowgroup',
        ownerState: ownerState
      }, other))
    });
  });
  TableHead.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component, normally `TableRow`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TableHead$1 = TableHead;

  function getToolbarUtilityClass(slot) {
    return generateUtilityClass('MuiToolbar', slot);
  }
  const toolbarClasses = generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);
  var toolbarClasses$1 = toolbarClasses;

  const _excluded$b = ["className", "component", "disableGutters", "variant"];

  const useUtilityClasses$8 = ownerState => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ['root', !disableGutters && 'gutters', variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };

  const ToolbarRoot = styled$1('div', {
    name: 'MuiToolbar',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: 'relative',
    display: 'flex',
    alignItems: 'center'
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up('sm')]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === 'dense' && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === 'regular' && theme.mixins.toolbar);
  const Toolbar = /*#__PURE__*/React__namespace.forwardRef(function Toolbar(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiToolbar'
    });

    const {
      className,
      component = 'div',
      disableGutters = false,
      variant = 'regular'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$b);

    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });

    const classes = useUtilityClasses$8(ownerState);
    return /*#__PURE__*/jsxRuntime_1(ToolbarRoot, _extends({
      as: component,
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other));
  });
  Toolbar.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properites to be used to lay out the children.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['dense', 'regular']), propTypes.string])
  } ;
  var Toolbar$1 = Toolbar;

  var KeyboardArrowLeft = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), 'KeyboardArrowLeft');

  var KeyboardArrowRight = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), 'KeyboardArrowRight');

  var _LastPageIcon, _FirstPageIcon, _KeyboardArrowRight$1, _KeyboardArrowLeft$1, _KeyboardArrowLeft2, _KeyboardArrowRight2, _FirstPageIcon2, _LastPageIcon2;

  const _excluded$a = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
  const TablePaginationActions = /*#__PURE__*/React__namespace.forwardRef(function TablePaginationActions(props, ref) {
    const {
      backIconButtonProps,
      count,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$a);

    const theme = useTheme();

    const handleFirstPageButtonClick = event => {
      onPageChange(event, 0);
    };

    const handleBackButtonClick = event => {
      onPageChange(event, page - 1);
    };

    const handleNextButtonClick = event => {
      onPageChange(event, page + 1);
    };

    const handleLastPageButtonClick = event => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };

    return /*#__PURE__*/jsxRuntime_2("div", _extends({
      ref: ref
    }, other, {
      children: [showFirstButton && /*#__PURE__*/jsxRuntime_1(IconButton$1, {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel('first', page),
        title: getItemAriaLabel('first', page),
        children: theme.direction === 'rtl' ? _LastPageIcon || (_LastPageIcon = /*#__PURE__*/jsxRuntime_1(LastPageIcon, {})) : _FirstPageIcon || (_FirstPageIcon = /*#__PURE__*/jsxRuntime_1(FirstPageIcon, {}))
      }), /*#__PURE__*/jsxRuntime_1(IconButton$1, _extends({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel('previous', page),
        title: getItemAriaLabel('previous', page)
      }, backIconButtonProps, {
        children: theme.direction === 'rtl' ? _KeyboardArrowRight$1 || (_KeyboardArrowRight$1 = /*#__PURE__*/jsxRuntime_1(KeyboardArrowRight, {})) : _KeyboardArrowLeft$1 || (_KeyboardArrowLeft$1 = /*#__PURE__*/jsxRuntime_1(KeyboardArrowLeft, {}))
      })), /*#__PURE__*/jsxRuntime_1(IconButton$1, _extends({
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        color: "inherit",
        "aria-label": getItemAriaLabel('next', page),
        title: getItemAriaLabel('next', page)
      }, nextIconButtonProps, {
        children: theme.direction === 'rtl' ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /*#__PURE__*/jsxRuntime_1(KeyboardArrowLeft, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /*#__PURE__*/jsxRuntime_1(KeyboardArrowRight, {}))
      })), showLastButton && /*#__PURE__*/jsxRuntime_1(IconButton$1, {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel('last', page),
        title: getItemAriaLabel('last', page),
        children: theme.direction === 'rtl' ? _FirstPageIcon2 || (_FirstPageIcon2 = /*#__PURE__*/jsxRuntime_1(FirstPageIcon, {})) : _LastPageIcon2 || (_LastPageIcon2 = /*#__PURE__*/jsxRuntime_1(LastPageIcon, {}))
      })]
    }));
  });
  TablePaginationActions.propTypes = {
    /**
     * Props applied to the back arrow [`IconButton`](/api/icon-button/) element.
     */
    backIconButtonProps: propTypes.object,

    /**
     * The total number of rows.
     */
    count: propTypes.number.isRequired,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     *
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @returns {string}
     */
    getItemAriaLabel: propTypes.func.isRequired,

    /**
     * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.
     */
    nextIconButtonProps: propTypes.object,

    /**
     * Callback fired when the page is changed.
     *
     * @param {object} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: propTypes.func.isRequired,

    /**
     * The zero-based index of the current page.
     */
    page: propTypes.number.isRequired,

    /**
     * The number of rows per page.
     */
    rowsPerPage: propTypes.number.isRequired,

    /**
     * If `true`, show the first-page button.
     */
    showFirstButton: propTypes.bool.isRequired,

    /**
     * If `true`, show the last-page button.
     */
    showLastButton: propTypes.bool.isRequired
  } ;
  var TablePaginationActions$1 = TablePaginationActions;

  function getTablePaginationUtilityClass(slot) {
    return generateUtilityClass('MuiTablePagination', slot);
  }
  const tablePaginationClasses = generateUtilityClasses('MuiTablePagination', ['root', 'toolbar', 'spacer', 'selectLabel', 'selectRoot', 'select', 'selectIcon', 'input', 'menuItem', 'displayedRows', 'actions']);
  var tablePaginationClasses$1 = tablePaginationClasses;

  var _InputBase;

  const _excluded$9 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
  const TablePaginationRoot = styled$1(TableCell$1, {
    name: 'MuiTablePagination',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })(({
    theme
  }) => ({
    overflow: 'auto',
    color: theme.palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    // Increase the specificity to override TableCell.
    '&:last-child': {
      padding: 0
    }
  }));
  const TablePaginationToolbar = styled$1(Toolbar$1, {
    name: 'MuiTablePagination',
    slot: 'Toolbar',
    overridesResolver: (props, styles) => _extends({
      [`& .${tablePaginationClasses$1.actions}`]: styles.actions
    }, styles.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up('xs')} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up('sm')]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses$1.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  const TablePaginationSpacer = styled$1('div', {
    name: 'MuiTablePagination',
    slot: 'Spacer',
    overridesResolver: (props, styles) => styles.spacer
  })({
    flex: '1 1 100%'
  });
  const TablePaginationSelectLabel = styled$1('p', {
    name: 'MuiTablePagination',
    slot: 'SelectLabel',
    overridesResolver: (props, styles) => styles.selectLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  const TablePaginationSelect = styled$1(Select$1, {
    name: 'MuiTablePagination',
    slot: 'Select',
    overridesResolver: (props, styles) => _extends({
      [`& .${tablePaginationClasses$1.selectIcon}`]: styles.selectIcon,
      [`& .${tablePaginationClasses$1.select}`]: styles.select
    }, styles.input, styles.selectRoot)
  })({
    color: 'inherit',
    fontSize: 'inherit',
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses$1.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: 'right',
      textAlignLast: 'right' // Align <select> on Chrome.

    }
  });
  const TablePaginationMenuItem = styled$1(MenuItem$1, {
    name: 'MuiTablePagination',
    slot: 'MenuItem',
    overridesResolver: (props, styles) => styles.menuItem
  })({});
  const TablePaginationDisplayedRows = styled$1('p', {
    name: 'MuiTablePagination',
    slot: 'DisplayedRows',
    overridesResolver: (props, styles) => styles.displayedRows
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));

  function defaultLabelDisplayedRows({
    from,
    to,
    count
  }) {
    return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }

  function defaultGetAriaLabel(type) {
    return `Go to ${type} page`;
  }

  const useUtilityClasses$7 = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root'],
      toolbar: ['toolbar'],
      spacer: ['spacer'],
      selectLabel: ['selectLabel'],
      select: ['select'],
      input: ['input'],
      selectIcon: ['selectIcon'],
      menuItem: ['menuItem'],
      displayedRows: ['displayedRows'],
      actions: ['actions']
    };
    return composeClasses(slots, getTablePaginationUtilityClass, classes);
  };
  /**
   * A `TableCell` based component for placing inside `TableFooter` for pagination.
   */


  const TablePagination = /*#__PURE__*/React__namespace.forwardRef(function TablePagination(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTablePagination'
    });

    const {
      ActionsComponent = TablePaginationActions$1,
      backIconButtonProps,
      className,
      colSpan: colSpanProp,
      component = TableCell$1,
      count,
      getItemAriaLabel = defaultGetAriaLabel,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelRowsPerPage = 'Rows per page:',
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$9);

    const ownerState = props;
    const classes = useUtilityClasses$7(ownerState);
    const MenuItemComponent = SelectProps.native ? 'option' : TablePaginationMenuItem;
    let colSpan;

    if (component === TableCell$1 || component === 'td') {
      colSpan = colSpanProp || 1000; // col-span over everything
    }

    const selectId = useId(SelectProps.id);
    const labelId = useId(SelectProps.labelId);

    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }

      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };

    return /*#__PURE__*/jsxRuntime_1(TablePaginationRoot, _extends({
      colSpan: colSpan,
      ref: ref,
      as: component,
      ownerState: ownerState,
      className: clsx(classes.root, className)
    }, other, {
      children: /*#__PURE__*/jsxRuntime_2(TablePaginationToolbar, {
        className: classes.toolbar,
        children: [/*#__PURE__*/jsxRuntime_1(TablePaginationSpacer, {
          className: classes.spacer
        }), rowsPerPageOptions.length > 1 && /*#__PURE__*/jsxRuntime_1(TablePaginationSelectLabel, {
          className: classes.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && /*#__PURE__*/jsxRuntime_1(TablePaginationSelect, _extends({
          variant: "standard",
          input: _InputBase || (_InputBase = /*#__PURE__*/jsxRuntime_1(InputBase$1, {})),
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId: labelId
        }, SelectProps, {
          classes: _extends({}, SelectProps.classes, {
            // TODO v5 remove `classes.input`
            root: clsx(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
            select: clsx(classes.select, (SelectProps.classes || {}).select),
            // TODO v5 remove `selectIcon`
            icon: clsx(classes.selectIcon, (SelectProps.classes || {}).icon)
          }),
          children: rowsPerPageOptions.map(rowsPerPageOption => /*#__PURE__*/React.createElement(MenuItemComponent, _extends({}, !isHostComponent(MenuItemComponent) && {
            ownerState
          }, {
            className: classes.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /*#__PURE__*/jsxRuntime_1(TablePaginationDisplayedRows, {
          className: classes.displayedRows,
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        }), /*#__PURE__*/jsxRuntime_1(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps: backIconButtonProps,
          count: count,
          nextIconButtonProps: nextIconButtonProps,
          onPageChange: onPageChange,
          page: page,
          rowsPerPage: rowsPerPage,
          showFirstButton: showFirstButton,
          showLastButton: showLastButton,
          getItemAriaLabel: getItemAriaLabel
        })]
      })
    }));
  });
  TablePagination.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The component used for displaying the actions.
     * Either a string to use a HTML element or a component.
     * @default TablePaginationActions
     */
    ActionsComponent: propTypes.elementType,

    /**
     * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.
     */
    backIconButtonProps: propTypes.object,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * @ignore
     */
    colSpan: propTypes.number,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: integerPropType.isRequired,

    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: propTypes.func,

    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }) {
     *   return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: propTypes.func,

    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: propTypes.node,

    /**
     * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.
     */
    nextIconButtonProps: propTypes.object,

    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: propTypes.func.isRequired,

    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: propTypes.func,

    /**
     * The zero-based index of the current page.
     */
    page: chainPropTypes(integerPropType.isRequired, props => {
      const {
        count,
        page,
        rowsPerPage
      } = props;

      if (count === -1) {
        return null;
      }

      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);

      if (page < 0 || page > newLastPage) {
        return new Error('MUI: The page prop of a TablePagination is out of range ' + `(0 to ${newLastPage}, but page is ${page}).`);
      }

      return null;
    }),

    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: integerPropType.isRequired,

    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: propTypes.arrayOf(propTypes.oneOfType([propTypes.number, propTypes.shape({
      label: propTypes.string.isRequired,
      value: propTypes.number.isRequired
    })]).isRequired),

    /**
     * Props applied to the rows per page [`Select`](/api/select/) element.
     * @default {}
     */
    SelectProps: propTypes.object,

    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: propTypes.bool,

    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TablePagination$1 = TablePagination;

  function getTableRowUtilityClass(slot) {
    return generateUtilityClass('MuiTableRow', slot);
  }
  const tableRowClasses = generateUtilityClasses('MuiTableRow', ['root', 'selected', 'hover', 'head', 'footer']);
  var tableRowClasses$1 = tableRowClasses;

  const _excluded$8 = ["className", "component", "hover", "selected"];

  const useUtilityClasses$6 = ownerState => {
    const {
      classes,
      selected,
      hover,
      head,
      footer
    } = ownerState;
    const slots = {
      root: ['root', selected && 'selected', hover && 'hover', head && 'head', footer && 'footer']
    };
    return composeClasses(slots, getTableRowUtilityClass, classes);
  };

  const TableRowRoot = styled$1('tr', {
    name: 'MuiTableRow',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];
    }
  })(({
    theme
  }) => ({
    color: 'inherit',
    display: 'table-row',
    verticalAlign: 'middle',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    [`&.${tableRowClasses$1.hover}:hover`]: {
      backgroundColor: theme.palette.action.hover
    },
    [`&.${tableRowClasses$1.selected}`]: {
      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      '&:hover': {
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      }
    }
  }));
  const defaultComponent = 'tr';
  /**
   * Will automatically set dynamic row height
   * based on the material table element parent (head, body, etc).
   */

  const TableRow = /*#__PURE__*/React__namespace.forwardRef(function TableRow(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableRow'
    });

    const {
      className,
      component = defaultComponent,
      hover = false,
      selected = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$8);

    const tablelvl2 = React__namespace.useContext(Tablelvl2Context$1);

    const ownerState = _extends({}, props, {
      component,
      hover,
      selected,
      head: tablelvl2 && tablelvl2.variant === 'head',
      footer: tablelvl2 && tablelvl2.variant === 'footer'
    });

    const classes = useUtilityClasses$6(ownerState);
    return /*#__PURE__*/jsxRuntime_1(TableRowRoot, _extends({
      as: component,
      ref: ref,
      className: clsx(classes.root, className),
      role: component === defaultComponent ? null : 'row',
      ownerState: ownerState
    }, other));
  });
  TableRow.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Should be valid <tr> children such as `TableCell`.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * If `true`, the table row will shade on hover.
     * @default false
     */
    hover: propTypes.bool,

    /**
     * If `true`, the table row will have the selected shading.
     * @default false
     */
    selected: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TableRow$1 = TableRow;

  var ArrowDownwardIcon = createSvgIcon( /*#__PURE__*/jsxRuntime_1("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), 'ArrowDownward');

  function getTableSortLabelUtilityClass(slot) {
    return generateUtilityClass('MuiTableSortLabel', slot);
  }
  const tableSortLabelClasses = generateUtilityClasses('MuiTableSortLabel', ['root', 'active', 'icon', 'iconDirectionDesc', 'iconDirectionAsc']);
  var tableSortLabelClasses$1 = tableSortLabelClasses;

  const _excluded$7 = ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"];

  const useUtilityClasses$5 = ownerState => {
    const {
      classes,
      direction,
      active
    } = ownerState;
    const slots = {
      root: ['root', active && 'active'],
      icon: ['icon', `iconDirection${capitalize(direction)}`]
    };
    return composeClasses(slots, getTableSortLabelUtilityClass, classes);
  };

  const TableSortLabelRoot = styled$1(ButtonBase$1, {
    name: 'MuiTableSortLabel',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.active && styles.active];
    }
  })(({
    theme
  }) => ({
    cursor: 'pointer',
    display: 'inline-flex',
    justifyContent: 'flex-start',
    flexDirection: 'inherit',
    alignItems: 'center',
    '&:focus': {
      color: theme.palette.text.secondary
    },
    '&:hover': {
      color: theme.palette.text.secondary,
      [`& .${tableSortLabelClasses$1.icon}`]: {
        opacity: 0.5
      }
    },
    [`&.${tableSortLabelClasses$1.active}`]: {
      color: theme.palette.text.primary,
      [`& .${tableSortLabelClasses$1.icon}`]: {
        opacity: 1,
        color: theme.palette.text.secondary
      }
    }
  }));
  const TableSortLabelIcon = styled$1('span', {
    name: 'MuiTableSortLabel',
    slot: 'Icon',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.icon, styles[`iconDirection${capitalize(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    fontSize: 18,
    marginRight: 4,
    marginLeft: 4,
    opacity: 0,
    transition: theme.transitions.create(['opacity', 'transform'], {
      duration: theme.transitions.duration.shorter
    }),
    userSelect: 'none'
  }, ownerState.direction === 'desc' && {
    transform: 'rotate(0deg)'
  }, ownerState.direction === 'asc' && {
    transform: 'rotate(180deg)'
  }));
  /**
   * A button based label for placing inside `TableCell` for column sorting.
   */

  const TableSortLabel = /*#__PURE__*/React__namespace.forwardRef(function TableSortLabel(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTableSortLabel'
    });

    const {
      active = false,
      children,
      className,
      direction = 'asc',
      hideSortIcon = false,
      IconComponent = ArrowDownwardIcon
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$7);

    const ownerState = _extends({}, props, {
      active,
      direction,
      hideSortIcon,
      IconComponent
    });

    const classes = useUtilityClasses$5(ownerState);
    return /*#__PURE__*/jsxRuntime_2(TableSortLabelRoot, _extends({
      className: clsx(classes.root, className),
      component: "span",
      disableRipple: true,
      ownerState: ownerState,
      ref: ref
    }, other, {
      children: [children, hideSortIcon && !active ? null : /*#__PURE__*/jsxRuntime_1(TableSortLabelIcon, {
        as: IconComponent,
        className: clsx(classes.icon),
        ownerState: ownerState
      })]
    }));
  });
  TableSortLabel.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * If `true`, the label will have the active styling (should be true for the sorted column).
     * @default false
     */
    active: propTypes.bool,

    /**
     * Label contents, the arrow will be appended automatically.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The current sort direction.
     * @default 'asc'
     */
    direction: propTypes.oneOf(['asc', 'desc']),

    /**
     * Hide sort icon when active is false.
     * @default false
     */
    hideSortIcon: propTypes.bool,

    /**
     * Sort icon to use.
     * @default ArrowDownwardIcon
     */
    IconComponent: propTypes.elementType,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TableSortLabel$1 = TableSortLabel;

  function easeInOutSin(time) {
    return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
  }

  function animate(property, element, to, options = {}, cb = () => {}) {
    const {
      ease = easeInOutSin,
      duration = 300 // standard

    } = options;
    let start = null;
    const from = element[property];
    let cancelled = false;

    const cancel = () => {
      cancelled = true;
    };

    const step = timestamp => {
      if (cancelled) {
        cb(new Error('Animation cancelled'));
        return;
      }

      if (start === null) {
        start = timestamp;
      }

      const time = Math.min(1, (timestamp - start) / duration);
      element[property] = ease(time) * (to - from) + from;

      if (time >= 1) {
        requestAnimationFrame(() => {
          cb(null);
        });
        return;
      }

      requestAnimationFrame(step);
    };

    if (from === to) {
      cb(new Error('Element already at target position'));
      return cancel;
    }

    requestAnimationFrame(step);
    return cancel;
  }

  const _excluded$6 = ["onChange"];
  const styles = {
    width: 99,
    height: 99,
    position: 'absolute',
    top: -9999,
    overflow: 'scroll'
  };
  /**
   * @ignore - internal component.
   * The component originates from https://github.com/STORIS/react-scrollbar-size.
   * It has been moved into the core in order to minimize the bundle size.
   */

  function ScrollbarSize(props) {
    const {
      onChange
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$6);

    const scrollbarHeight = React__namespace.useRef();
    const nodeRef = React__namespace.useRef(null);

    const setMeasurements = () => {
      scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
    };

    React__namespace.useEffect(() => {
      const handleResize = debounce$1(() => {
        const prevHeight = scrollbarHeight.current;
        setMeasurements();

        if (prevHeight !== scrollbarHeight.current) {
          onChange(scrollbarHeight.current);
        }
      });
      const containerWindow = ownerWindow(nodeRef.current);
      containerWindow.addEventListener('resize', handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener('resize', handleResize);
      };
    }, [onChange]);
    React__namespace.useEffect(() => {
      setMeasurements();
      onChange(scrollbarHeight.current);
    }, [onChange]);
    return /*#__PURE__*/jsxRuntime_1("div", _extends({
      style: styles,
      ref: nodeRef
    }, other));
  }
  ScrollbarSize.propTypes = {
    onChange: propTypes.func.isRequired
  } ;

  function getTabScrollButtonUtilityClass(slot) {
    return generateUtilityClass('MuiTabScrollButton', slot);
  }
  const tabScrollButtonClasses = generateUtilityClasses('MuiTabScrollButton', ['root', 'vertical', 'horizontal', 'disabled']);
  var tabScrollButtonClasses$1 = tabScrollButtonClasses;

  var _KeyboardArrowLeft, _KeyboardArrowRight;

  const _excluded$5 = ["className", "direction", "orientation", "disabled"];

  const useUtilityClasses$4 = ownerState => {
    const {
      classes,
      orientation,
      disabled
    } = ownerState;
    const slots = {
      root: ['root', orientation, disabled && 'disabled']
    };
    return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
  };

  const TabScrollButtonRoot = styled$1(ButtonBase$1, {
    name: 'MuiTabScrollButton',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.orientation && styles[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: 40,
    flexShrink: 0,
    opacity: 0.8,
    [`&.${tabScrollButtonClasses$1.disabled}`]: {
      opacity: 0
    }
  }, ownerState.orientation === 'vertical' && {
    width: '100%',
    height: 40,
    '& svg': {
      transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
    }
  }));
  const TabScrollButton = /*#__PURE__*/React__namespace.forwardRef(function TabScrollButton(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTabScrollButton'
    });

    const {
      className,
      direction
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$5);

    const theme = useTheme();
    const isRtl = theme.direction === 'rtl';

    const ownerState = _extends({
      isRtl
    }, props);

    const classes = useUtilityClasses$4(ownerState);
    return /*#__PURE__*/jsxRuntime_1(TabScrollButtonRoot, _extends({
      component: "div",
      className: clsx(classes.root, className),
      ref: ref,
      role: null,
      ownerState: ownerState,
      tabIndex: null
    }, other, {
      children: direction === 'left' ? _KeyboardArrowLeft || (_KeyboardArrowLeft = /*#__PURE__*/jsxRuntime_1(KeyboardArrowLeft, {
        fontSize: "small"
      })) : _KeyboardArrowRight || (_KeyboardArrowRight = /*#__PURE__*/jsxRuntime_1(KeyboardArrowRight, {
        fontSize: "small"
      }))
    }));
  });
  TabScrollButton.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The direction the button should indicate.
     */
    direction: propTypes.oneOf(['left', 'right']).isRequired,

    /**
     * If `true`, the component is disabled.
     */
    disabled: propTypes.bool,

    /**
     * The component orientation (layout flow direction).
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']).isRequired,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object])
  } ;
  var TabScrollButton$1 = TabScrollButton;

  function getTabsUtilityClass(slot) {
    return generateUtilityClass('MuiTabs', slot);
  }
  const tabsClasses = generateUtilityClasses('MuiTabs', ['root', 'vertical', 'flexContainer', 'flexContainerVertical', 'centered', 'scroller', 'fixed', 'scrollableX', 'scrollableY', 'hideScrollbar', 'scrollButtons', 'scrollButtonsHideMobile', 'indicator']);
  var tabsClasses$1 = tabsClasses;

  const _excluded$4 = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];

  const nextItem = (list, item) => {
    if (list === item) {
      return list.firstChild;
    }

    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }

    return list.firstChild;
  };

  const previousItem = (list, item) => {
    if (list === item) {
      return list.lastChild;
    }

    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }

    return list.lastChild;
  };

  const moveFocus = (list, currentFocus, traversalFunction) => {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus);

    while (nextFocus) {
      // Prevent infinite loop.
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }

        wrappedOnce = true;
      } // Same logic as useAutocomplete.js


      const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

      if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
        // Move to the next element.
        nextFocus = traversalFunction(list, nextFocus);
      } else {
        nextFocus.focus();
        return;
      }
    }
  };

  const useUtilityClasses$3 = ownerState => {
    const {
      vertical,
      fixed,
      hideScrollbar,
      scrollableX,
      scrollableY,
      centered,
      scrollButtonsHideMobile,
      classes
    } = ownerState;
    const slots = {
      root: ['root', vertical && 'vertical'],
      scroller: ['scroller', fixed && 'fixed', hideScrollbar && 'hideScrollbar', scrollableX && 'scrollableX', scrollableY && 'scrollableY'],
      flexContainer: ['flexContainer', vertical && 'flexContainerVertical', centered && 'centered'],
      indicator: ['indicator'],
      scrollButtons: ['scrollButtons', scrollButtonsHideMobile && 'scrollButtonsHideMobile'],
      scrollableX: [scrollableX && 'scrollableX'],
      hideScrollbar: [hideScrollbar && 'hideScrollbar']
    };
    return composeClasses(slots, getTabsUtilityClass, classes);
  };

  const TabsRoot = styled$1('div', {
    name: 'MuiTabs',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${tabsClasses$1.scrollButtons}`]: styles.scrollButtons
      }, {
        [`& .${tabsClasses$1.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles.scrollButtonsHideMobile
      }, styles.root, ownerState.vertical && styles.vertical];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    overflow: 'hidden',
    minHeight: 48,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: 'touch',
    display: 'flex'
  }, ownerState.vertical && {
    flexDirection: 'column'
  }, ownerState.scrollButtonsHideMobile && {
    [`& .${tabsClasses$1.scrollButtons}`]: {
      [theme.breakpoints.down('sm')]: {
        display: 'none'
      }
    }
  }));
  const TabsScroller = styled$1('div', {
    name: 'MuiTabs',
    slot: 'Scroller',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.scroller, ownerState.fixed && styles.fixed, ownerState.hideScrollbar && styles.hideScrollbar, ownerState.scrollableX && styles.scrollableX, ownerState.scrollableY && styles.scrollableY];
    }
  })(({
    ownerState
  }) => _extends({
    position: 'relative',
    display: 'inline-block',
    flex: '1 1 auto',
    whiteSpace: 'nowrap'
  }, ownerState.fixed && {
    overflowX: 'hidden',
    width: '100%'
  }, ownerState.hideScrollbar && {
    // Hide dimensionless scrollbar on MacOS
    scrollbarWidth: 'none',
    // Firefox
    '&::-webkit-scrollbar': {
      display: 'none' // Safari + Chrome

    }
  }, ownerState.scrollableX && {
    overflowX: 'auto',
    overflowY: 'hidden'
  }, ownerState.scrollableY && {
    overflowY: 'auto',
    overflowX: 'hidden'
  }));
  const FlexContainer = styled$1('div', {
    name: 'MuiTabs',
    slot: 'FlexContainer',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.flexContainer, ownerState.vertical && styles.flexContainerVertical, ownerState.centered && styles.centered];
    }
  })(({
    ownerState
  }) => _extends({
    display: 'flex'
  }, ownerState.vertical && {
    flexDirection: 'column'
  }, ownerState.centered && {
    justifyContent: 'center'
  }));
  const TabsIndicator = styled$1('span', {
    name: 'MuiTabs',
    slot: 'Indicator',
    overridesResolver: (props, styles) => styles.indicator
  })(({
    ownerState,
    theme
  }) => _extends({
    position: 'absolute',
    height: 2,
    bottom: 0,
    width: '100%',
    transition: theme.transitions.create()
  }, ownerState.indicatorColor === 'primary' && {
    backgroundColor: theme.palette.primary.main
  }, ownerState.indicatorColor === 'secondary' && {
    backgroundColor: theme.palette.secondary.main
  }, ownerState.vertical && {
    height: '100%',
    width: 2,
    right: 0
  }));
  const TabsScrollbarSize = styled$1(ScrollbarSize, {
    name: 'MuiTabs',
    slot: 'ScrollbarSize'
  })({
    overflowX: 'auto',
    overflowY: 'hidden',
    // Hide dimensionless scrollbar on MacOS
    scrollbarWidth: 'none',
    // Firefox
    '&::-webkit-scrollbar': {
      display: 'none' // Safari + Chrome

    }
  });
  const defaultIndicatorStyle = {};
  let warnedOnceTabPresent = false;
  const Tabs = /*#__PURE__*/React__namespace.forwardRef(function Tabs(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTabs'
    });
    const theme = useTheme();
    const isRtl = theme.direction === 'rtl';

    const {
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledBy,
      action,
      centered = false,
      children: childrenProp,
      className,
      component = 'div',
      allowScrollButtonsMobile = false,
      indicatorColor = 'primary',
      onChange,
      orientation = 'horizontal',
      ScrollButtonComponent = TabScrollButton$1,
      scrollButtons = 'auto',
      selectionFollowsFocus,
      TabIndicatorProps = {},
      TabScrollButtonProps = {},
      textColor = 'primary',
      value,
      variant = 'standard',
      visibleScrollbar = false
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$4);

    const scrollable = variant === 'scrollable';
    const vertical = orientation === 'vertical';
    const scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
    const start = vertical ? 'top' : 'left';
    const end = vertical ? 'bottom' : 'right';
    const clientSize = vertical ? 'clientHeight' : 'clientWidth';
    const size = vertical ? 'height' : 'width';

    const ownerState = _extends({}, props, {
      component,
      allowScrollButtonsMobile,
      indicatorColor,
      orientation,
      vertical,
      scrollButtons,
      textColor,
      variant,
      visibleScrollbar,
      fixed: !scrollable,
      hideScrollbar: scrollable && !visibleScrollbar,
      scrollableX: scrollable && !vertical,
      scrollableY: scrollable && vertical,
      centered: centered && !scrollable,
      scrollButtonsHideMobile: !allowScrollButtonsMobile
    });

    const classes = useUtilityClasses$3(ownerState);

    {
      if (centered && scrollable) {
        console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties ' + 'at the same time on a `Tabs` component.');
      }
    }

    const [mounted, setMounted] = React__namespace.useState(false);
    const [indicatorStyle, setIndicatorStyle] = React__namespace.useState(defaultIndicatorStyle);
    const [displayScroll, setDisplayScroll] = React__namespace.useState({
      start: false,
      end: false
    });
    const [scrollerStyle, setScrollerStyle] = React__namespace.useState({
      overflow: 'hidden',
      scrollbarWidth: 0
    });
    const valueToIndex = new Map();
    const tabsRef = React__namespace.useRef(null);
    const tabListRef = React__namespace.useRef(null);

    const getTabsMeta = () => {
      const tabsNode = tabsRef.current;
      let tabsMeta;

      if (tabsNode) {
        const rect = tabsNode.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft

        tabsMeta = {
          clientWidth: tabsNode.clientWidth,
          scrollLeft: tabsNode.scrollLeft,
          scrollTop: tabsNode.scrollTop,
          scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
          scrollWidth: tabsNode.scrollWidth,
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right
        };
      }

      let tabMeta;

      if (tabsNode && value !== false) {
        const children = tabListRef.current.children;

        if (children.length > 0) {
          const tab = children[valueToIndex.get(value)];

          {
            if (!tab) {
              console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(', ')}.` : null].join('\n'));
            }
          }

          tabMeta = tab ? tab.getBoundingClientRect() : null;

          {
            if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0) {
              tabsMeta = null;
              console.error(['MUI: The `value` provided to the Tabs component is invalid.', `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join('\n'));
              warnedOnceTabPresent = true;
            }
          }
        }
      }

      return {
        tabsMeta,
        tabMeta
      };
    };

    const updateIndicatorState = useEventCallback(() => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      let startValue = 0;
      let startIndicator;

      if (vertical) {
        startIndicator = 'top';

        if (tabMeta && tabsMeta) {
          startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
        }
      } else {
        startIndicator = isRtl ? 'right' : 'left';

        if (tabMeta && tabsMeta) {
          const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
          startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
        }
      }

      const newIndicatorStyle = {
        [startIndicator]: startValue,
        // May be wrong until the font is loaded.
        [size]: tabMeta ? tabMeta[size] : 0
      }; // IE11 support, replace with Number.isNaN
      // eslint-disable-next-line no-restricted-globals

      if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
        setIndicatorStyle(newIndicatorStyle);
      } else {
        const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
        const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);

        if (dStart >= 1 || dSize >= 1) {
          setIndicatorStyle(newIndicatorStyle);
        }
      }
    });

    const scroll = (scrollValue, {
      animation = true
    } = {}) => {
      if (animation) {
        animate(scrollStart, tabsRef.current, scrollValue, {
          duration: theme.transitions.duration.standard
        });
      } else {
        tabsRef.current[scrollStart] = scrollValue;
      }
    };

    const moveTabsScroll = delta => {
      let scrollValue = tabsRef.current[scrollStart];

      if (vertical) {
        scrollValue += delta;
      } else {
        scrollValue += delta * (isRtl ? -1 : 1); // Fix for Edge

        scrollValue *= isRtl && detectScrollType() === 'reverse' ? -1 : 1;
      }

      scroll(scrollValue);
    };

    const getScrollSize = () => {
      const containerSize = tabsRef.current[clientSize];
      let totalSize = 0;
      const children = Array.from(tabListRef.current.children);

      for (let i = 0; i < children.length; i += 1) {
        const tab = children[i];

        if (totalSize + tab[clientSize] > containerSize) {
          break;
        }

        totalSize += tab[clientSize];
      }

      return totalSize;
    };

    const handleStartScrollClick = () => {
      moveTabsScroll(-1 * getScrollSize());
    };

    const handleEndScrollClick = () => {
      moveTabsScroll(getScrollSize());
    }; // TODO Remove <ScrollbarSize /> as browser support for hidding the scrollbar
    // with CSS improves.


    const handleScrollbarSizeChange = React__namespace.useCallback(scrollbarWidth => {
      setScrollerStyle({
        overflow: null,
        scrollbarWidth
      });
    }, []);

    const getConditionalElements = () => {
      const conditionalElements = {};
      conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/jsxRuntime_1(TabsScrollbarSize, {
        onChange: handleScrollbarSizeChange,
        className: clsx(classes.scrollableX, classes.hideScrollbar)
      }) : null;
      const scrollButtonsActive = displayScroll.start || displayScroll.end;
      const showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === true);
      conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/jsxRuntime_1(ScrollButtonComponent, _extends({
        orientation: orientation,
        direction: isRtl ? 'right' : 'left',
        onClick: handleStartScrollClick,
        disabled: !displayScroll.start
      }, TabScrollButtonProps, {
        className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/jsxRuntime_1(ScrollButtonComponent, _extends({
        orientation: orientation,
        direction: isRtl ? 'left' : 'right',
        onClick: handleEndScrollClick,
        disabled: !displayScroll.end
      }, TabScrollButtonProps, {
        className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      return conditionalElements;
    };

    const scrollSelectedIntoView = useEventCallback(animation => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();

      if (!tabMeta || !tabsMeta) {
        return;
      }

      if (tabMeta[start] < tabsMeta[start]) {
        // left side of button is out of view
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
        scroll(nextScrollStart, {
          animation
        });
      } else if (tabMeta[end] > tabsMeta[end]) {
        // right side of button is out of view
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
        scroll(nextScrollStart, {
          animation
        });
      }
    });
    const updateScrollButtonState = useEventCallback(() => {
      if (scrollable && scrollButtons !== false) {
        const {
          scrollTop,
          scrollHeight,
          clientHeight,
          scrollWidth,
          clientWidth
        } = tabsRef.current;
        let showStartScroll;
        let showEndScroll;

        if (vertical) {
          showStartScroll = scrollTop > 1;
          showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
        } else {
          const scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction); // use 1 for the potential rounding error with browser zooms.

          showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
          showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
        }

        if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
          setDisplayScroll({
            start: showStartScroll,
            end: showEndScroll
          });
        }
      }
    });
    React__namespace.useEffect(() => {
      const handleResize = debounce$1(() => {
        updateIndicatorState();
        updateScrollButtonState();
      });
      const win = ownerWindow(tabsRef.current);
      win.addEventListener('resize', handleResize);
      let resizeObserver;

      if (typeof ResizeObserver !== 'undefined') {
        resizeObserver = new ResizeObserver(handleResize);
        Array.from(tabListRef.current.children).forEach(child => {
          resizeObserver.observe(child);
        });
      }

      return () => {
        handleResize.clear();
        win.removeEventListener('resize', handleResize);

        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [updateIndicatorState, updateScrollButtonState]);
    const handleTabsScroll = React__namespace.useMemo(() => debounce$1(() => {
      updateScrollButtonState();
    }), [updateScrollButtonState]);
    React__namespace.useEffect(() => {
      return () => {
        handleTabsScroll.clear();
      };
    }, [handleTabsScroll]);
    React__namespace.useEffect(() => {
      setMounted(true);
    }, []);
    React__namespace.useEffect(() => {
      updateIndicatorState();
      updateScrollButtonState();
    });
    React__namespace.useEffect(() => {
      // Don't animate on the first render.
      scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
    }, [scrollSelectedIntoView, indicatorStyle]);
    React__namespace.useImperativeHandle(action, () => ({
      updateIndicator: updateIndicatorState,
      updateScrollButtons: updateScrollButtonState
    }), [updateIndicatorState, updateScrollButtonState]);

    const indicator = /*#__PURE__*/jsxRuntime_1(TabsIndicator, _extends({}, TabIndicatorProps, {
      className: clsx(classes.indicator, TabIndicatorProps.className),
      ownerState: ownerState,
      style: _extends({}, indicatorStyle, TabIndicatorProps.style)
    }));

    let childIndex = 0;
    const children = React__namespace.Children.map(childrenProp, child => {
      if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
        return null;
      }

      {
        if (reactIs_2(child)) {
          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
        }
      }

      const childValue = child.props.value === undefined ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      const selected = childValue === value;
      childIndex += 1;
      return /*#__PURE__*/React__namespace.cloneElement(child, _extends({
        fullWidth: variant === 'fullWidth',
        indicator: selected && !mounted && indicator,
        selected,
        selectionFollowsFocus,
        onChange,
        textColor,
        value: childValue
      }, childIndex === 1 && value === false && !child.props.tabIndex ? {
        tabIndex: 0
      } : {}));
    });

    const handleKeyDown = event => {
      const list = tabListRef.current;
      const currentFocus = ownerDocument(list).activeElement; // Keyboard navigation assumes that [role="tab"] are siblings
      // though we might warn in the future about nested, interactive elements
      // as a a11y violation

      const role = currentFocus.getAttribute('role');

      if (role !== 'tab') {
        return;
      }

      let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
      let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';

      if (orientation === 'horizontal' && isRtl) {
        // swap previousItemKey with nextItemKey
        previousItemKey = 'ArrowRight';
        nextItemKey = 'ArrowLeft';
      }

      switch (event.key) {
        case previousItemKey:
          event.preventDefault();
          moveFocus(list, currentFocus, previousItem);
          break;

        case nextItemKey:
          event.preventDefault();
          moveFocus(list, currentFocus, nextItem);
          break;

        case 'Home':
          event.preventDefault();
          moveFocus(list, null, nextItem);
          break;

        case 'End':
          event.preventDefault();
          moveFocus(list, null, previousItem);
          break;
      }
    };

    const conditionalElements = getConditionalElements();
    return /*#__PURE__*/jsxRuntime_2(TabsRoot, _extends({
      className: clsx(classes.root, className),
      ownerState: ownerState,
      ref: ref,
      as: component
    }, other, {
      children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/jsxRuntime_2(TabsScroller, {
        className: classes.scroller,
        ownerState: ownerState,
        style: {
          overflow: scrollerStyle.overflow,
          [vertical ? `margin${isRtl ? 'Left' : 'Right'}` : 'marginBottom']: visibleScrollbar ? undefined : -scrollerStyle.scrollbarWidth
        },
        ref: tabsRef,
        onScroll: handleTabsScroll,
        children: [/*#__PURE__*/jsxRuntime_1(FlexContainer, {
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-orientation": orientation === 'vertical' ? 'vertical' : null,
          className: classes.flexContainer,
          ownerState: ownerState,
          onKeyDown: handleKeyDown,
          ref: tabListRef,
          role: "tablist",
          children: children
        }), mounted && indicator]
      }), conditionalElements.scrollButtonEnd]
    }));
  });
  Tabs.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * Callback fired when the component mounts.
     * This is useful when you want to trigger an action programmatically.
     * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
     *
     * @param {object} actions This object contains all possible actions
     * that can be triggered programmatically.
     */
    action: refType$1,

    /**
     * If `true`, the scroll buttons aren't forced hidden on mobile.
     * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
     * @default false
     */
    allowScrollButtonsMobile: propTypes.bool,

    /**
     * The label for the Tabs as a string.
     */
    'aria-label': propTypes.string,

    /**
     * An id or list of ids separated by a space that label the Tabs.
     */
    'aria-labelledby': propTypes.string,

    /**
     * If `true`, the tabs are centered.
     * This prop is intended for large views.
     * @default false
     */
    centered: propTypes.bool,

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: propTypes.elementType,

    /**
     * Determines the color of the indicator.
     * @default 'primary'
     */
    indicatorColor: propTypes.oneOf(['primary', 'secondary']),

    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child (number)
     */
    onChange: propTypes.func,

    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * The component used to render the scroll buttons.
     * @default TabScrollButton
     */
    ScrollButtonComponent: propTypes.elementType,

    /**
     * Determine behavior of scroll buttons when tabs are set to scroll:
     *
     * - `auto` will only present them when not all the items are visible.
     * - `true` will always present them.
     * - `false` will never present them.
     *
     * By default the scroll buttons are hidden on mobile.
     * This behavior can be disabled with `allowScrollButtonsMobile`.
     * @default 'auto'
     */
    scrollButtons: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOf(['auto', false, true]),

    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: propTypes.bool,

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Props applied to the tab indicator element.
     * @default  {}
     */
    TabIndicatorProps: propTypes.object,

    /**
     * Props applied to the [`TabScrollButton`](/api/tab-scroll-button/) element.
     * @default {}
     */
    TabScrollButtonProps: propTypes.object,

    /**
     * Determines the color of the `Tab`.
     * @default 'primary'
     */
    textColor: propTypes.oneOf(['inherit', 'primary', 'secondary']),

    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `false`.
     */
    value: propTypes.any,

    /**
     * Determines additional display behavior of the tabs:
     *
     *  - `scrollable` will invoke scrolling properties and allow for horizontally
     *  scrolling (or swiping) of the tab bar.
     *  -`fullWidth` will make the tabs grow to use all the available space,
     *  which should be used for small views, like on mobile.
     *  - `standard` will render the default state.
     * @default 'standard'
     */
    variant: propTypes.oneOf(['fullWidth', 'scrollable', 'standard']),

    /**
     * If `true`, the scrollbar is visible. It can be useful when displaying
     * a long vertical list of tabs.
     * @default false
     */
    visibleScrollbar: propTypes.bool
  } ;
  var Tabs$1 = Tabs;

  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass('MuiTextField', slot);
  }
  const textFieldClasses = generateUtilityClasses('MuiTextField', ['root']);
  var textFieldClasses$1 = textFieldClasses;

  const _excluded$3 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  const variantComponent = {
    standard: Input$1,
    filled: FilledInput$1,
    outlined: OutlinedInput$1
  };

  const useUtilityClasses$2 = ownerState => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ['root']
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };

  const TextFieldRoot = styled$1(FormControl$1, {
    name: 'MuiTextField',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  })({});
  /**
   * The `TextField` is a convenience wrapper for the most common cases (80%).
   * It cannot be all things to all people, otherwise the API would grow out of control.
   *
   * ## Advanced Configuration
   *
   * It's important to understand that the text field is a simple abstraction
   * on top of the following components:
   *
   * - [FormControl](/api/form-control/)
   * - [InputLabel](/api/input-label/)
   * - [FilledInput](/api/filled-input/)
   * - [OutlinedInput](/api/outlined-input/)
   * - [Input](/api/input/)
   * - [FormHelperText](/api/form-helper-text/)
   *
   * If you wish to alter the props applied to the `input` element, you can do so as follows:
   *
   * ```jsx
   * const inputProps = {
   *   step: 300,
   * };
   *
   * return <TextField id="time" type="time" inputProps={inputProps} />;
   * ```
   *
   * For advanced cases, please look at the source of TextField by clicking on the
   * "Edit this page" button above. Consider either:
   *
   * - using the upper case props for passing values directly to the components
   * - using the underlying components directly as shown in the demos
   */

  const TextField = /*#__PURE__*/React__namespace.forwardRef(function TextField(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiTextField'
    });

    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color = 'primary',
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = 'outlined'
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$3);

    const ownerState = _extends({}, props, {
      autoFocus,
      color,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });

    const classes = useUtilityClasses$2(ownerState);

    {
      if (select && !children) {
        console.error('MUI: `children` must be passed when using the `TextField` component with `select`.');
      }
    }

    const InputMore = {};

    if (variant === 'outlined') {
      if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
        InputMore.notched = InputLabelProps.shrink;
      }

      if (label) {
        var _InputLabelProps$requ;

        const displayRequired = (_InputLabelProps$requ = InputLabelProps == null ? void 0 : InputLabelProps.required) != null ? _InputLabelProps$requ : required;
        InputMore.label = /*#__PURE__*/jsxRuntime_2(React__namespace.Fragment, {
          children: [label, displayRequired && '\u00a0*']
        });
      }
    }

    if (select) {
      // unset defaults from textbox inputs
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = undefined;
      }

      InputMore['aria-describedby'] = undefined;
    }

    const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
    const inputLabelId = label && id ? `${id}-label` : undefined;
    const InputComponent = variantComponent[variant];

    const InputElement = /*#__PURE__*/jsxRuntime_1(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete: autoComplete,
      autoFocus: autoFocus,
      defaultValue: defaultValue,
      fullWidth: fullWidth,
      multiline: multiline,
      name: name,
      rows: rows,
      maxRows: maxRows,
      minRows: minRows,
      type: type,
      value: value,
      id: id,
      inputRef: inputRef,
      onBlur: onBlur,
      onChange: onChange,
      onFocus: onFocus,
      placeholder: placeholder,
      inputProps: inputProps
    }, InputMore, InputProps));

    return /*#__PURE__*/jsxRuntime_2(TextFieldRoot, _extends({
      className: clsx(classes.root, className),
      disabled: disabled,
      error: error,
      fullWidth: fullWidth,
      ref: ref,
      required: required,
      color: color,
      variant: variant,
      ownerState: ownerState
    }, other, {
      children: [label && /*#__PURE__*/jsxRuntime_1(InputLabel$1, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /*#__PURE__*/jsxRuntime_1(Select$1, _extends({
        "aria-describedby": helperTextId,
        id: id,
        labelId: inputLabelId,
        value: value,
        input: InputElement
      }, SelectProps, {
        children: children
      })) : InputElement, helperText && /*#__PURE__*/jsxRuntime_1(FormHelperText$1, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  TextField.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: propTypes.string,

    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: propTypes.bool,

    /**
     * @ignore
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'primary'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: propTypes.any,

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: propTypes.bool,

    /**
     * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
     */
    FormHelperTextProps: propTypes.object,

    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * The helper text content.
     */
    helperText: propTypes.node,

    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: propTypes.string,

    /**
     * Props applied to the [`InputLabel`](/api/input-label/) element.
     */
    InputLabelProps: propTypes.object,

    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: propTypes.object,

    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/api/filled-input/),
     * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: propTypes.object,

    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType$1,

    /**
     * The label content.
     */
    label: propTypes.node,

    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: propTypes.oneOf(['dense', 'none', 'normal']),

    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: propTypes.bool,

    /**
     * Name attribute of the `input` element.
     */
    name: propTypes.string,

    /**
     * @ignore
     */
    onBlur: propTypes.func,

    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onFocus: propTypes.func,

    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: propTypes.string,

    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: propTypes.bool,

    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

    /**
     * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: propTypes.bool,

    /**
     * Props applied to the [`Select`](/api/select/) element.
     */
    SelectProps: propTypes.object,

    /**
     * The size of the component.
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['medium', 'small']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: propTypes
    /* @typescript-to-proptypes-ignore */
    .string,

    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: propTypes.any,

    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
  } ;
  var TextField$1 = TextField;

  function getToggleButtonUtilityClass(slot) {
    return generateUtilityClass('MuiToggleButton', slot);
  }
  const toggleButtonClasses = generateUtilityClasses('MuiToggleButton', ['root', 'disabled', 'selected', 'standard', 'primary', 'secondary', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
  var toggleButtonClasses$1 = toggleButtonClasses;

  const _excluded$2 = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];

  const useUtilityClasses$1 = ownerState => {
    const {
      classes,
      fullWidth,
      selected,
      disabled,
      size,
      color
    } = ownerState;
    const slots = {
      root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize(size)}`, color]
    };
    return composeClasses(slots, getToggleButtonUtilityClass, classes);
  };

  const ToggleButtonRoot = styled$1(ButtonBase$1, {
    name: 'MuiToggleButton',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`size${capitalize(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;
    return _extends({}, theme.typography.button, {
      borderRadius: theme.shape.borderRadius,
      padding: 11,
      border: `1px solid ${theme.palette.divider}`,
      color: theme.palette.action.active
    }, ownerState.fullWidth && {
      width: '100%'
    }, {
      [`&.${toggleButtonClasses$1.disabled}`]: {
        color: theme.palette.action.disabled,
        border: `1px solid ${theme.palette.action.disabledBackground}`
      },
      '&:hover': {
        textDecoration: 'none',
        // Reset on mouse devices
        backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        }
      },
      [`&.${toggleButtonClasses$1.selected}`]: {
        color: selectedColor,
        backgroundColor: alpha(selectedColor, theme.palette.action.selectedOpacity),
        '&:hover': {
          backgroundColor: alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: alpha(selectedColor, theme.palette.action.selectedOpacity)
          }
        }
      }
    }, ownerState.size === 'small' && {
      padding: 7,
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === 'large' && {
      padding: 15,
      fontSize: theme.typography.pxToRem(15)
    });
  });
  const ToggleButton = /*#__PURE__*/React__namespace.forwardRef(function ToggleButton(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiToggleButton'
    });

    const {
      children,
      className,
      color = 'standard',
      disabled = false,
      disableFocusRipple = false,
      fullWidth = false,
      onChange,
      onClick,
      selected,
      size = 'medium',
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$2);

    const ownerState = _extends({}, props, {
      color,
      disabled,
      disableFocusRipple,
      fullWidth,
      size
    });

    const classes = useUtilityClasses$1(ownerState);

    const handleChange = event => {
      if (onClick) {
        onClick(event, value);

        if (event.defaultPrevented) {
          return;
        }
      }

      if (onChange) {
        onChange(event, value);
      }
    };

    return /*#__PURE__*/jsxRuntime_1(ToggleButtonRoot, _extends({
      className: clsx(classes.root, className),
      disabled: disabled,
      focusRipple: !disableFocusRipple,
      ref: ref,
      onClick: handleChange,
      onChange: onChange,
      value: value,
      ownerState: ownerState,
      "aria-pressed": selected
    }, other, {
      children: children
    }));
  });
  ToggleButton.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of the button when it is in an active state.
     * @default 'standard'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: propTypes.bool,

    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: propTypes.bool,

    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * @ignore
     */
    onChange: propTypes.func,

    /**
     * @ignore
     */
    onClick: propTypes.func,

    /**
     * If `true`, the button is rendered in an active state.
     */
    selected: propTypes.bool,

    /**
     * The size of the component.
     * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The value to associate with the button when selected in a
     * ToggleButtonGroup.
     */
    value: propTypes.any.isRequired
  } ;
  var ToggleButton$1 = ToggleButton;

  // Determine if the toggle button value matches, or is contained in, the
  // candidate group value.
  function isValueSelected(value, candidate) {
    if (candidate === undefined || value === undefined) {
      return false;
    }

    if (Array.isArray(candidate)) {
      return candidate.indexOf(value) >= 0;
    }

    return value === candidate;
  }

  function getToggleButtonGroupUtilityClass(slot) {
    return generateUtilityClass('MuiToggleButtonGroup', slot);
  }
  const toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical']);
  var toggleButtonGroupClasses$1 = toggleButtonGroupClasses;

  const _excluded$1 = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];

  const useUtilityClasses = ownerState => {
    const {
      classes,
      orientation,
      fullWidth,
      disabled
    } = ownerState;
    const slots = {
      root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],
      grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled']
    };
    return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);
  };

  const ToggleButtonGroupRoot = styled$1('div', {
    name: 'MuiToggleButtonGroup',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${toggleButtonGroupClasses$1.grouped}`]: styles.grouped
      }, {
        [`& .${toggleButtonGroupClasses$1.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]
      }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: 'inline-flex',
    borderRadius: theme.shape.borderRadius
  }, ownerState.orientation === 'vertical' && {
    flexDirection: 'column'
  }, ownerState.fullWidth && {
    width: '100%'
  }, {
    [`& .${toggleButtonGroupClasses$1.grouped}`]: _extends({}, ownerState.orientation === 'horizontal' ? {
      '&:not(:first-of-type)': {
        marginLeft: -1,
        borderLeft: '1px solid transparent',
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      },
      '&:not(:last-of-type)': {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      },
      [`&.${toggleButtonGroupClasses$1.selected} + .${toggleButtonGroupClasses$1.grouped}.${toggleButtonGroupClasses$1.selected}`]: {
        borderLeft: 0,
        marginLeft: 0
      }
    } : {
      '&:not(:first-of-type)': {
        marginTop: -1,
        borderTop: '1px solid transparent',
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0
      },
      '&:not(:last-of-type)': {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0
      },
      [`&.${toggleButtonGroupClasses$1.selected} + .${toggleButtonGroupClasses$1.grouped}.${toggleButtonGroupClasses$1.selected}`]: {
        borderTop: 0,
        marginTop: 0
      }
    })
  }));
  const ToggleButtonGroup = /*#__PURE__*/React__namespace.forwardRef(function ToggleButtonGroup(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: 'MuiToggleButtonGroup'
    });

    const {
      children,
      className,
      color = 'standard',
      disabled = false,
      exclusive = false,
      fullWidth = false,
      onChange,
      orientation = 'horizontal',
      size = 'medium',
      value
    } = props,
          other = _objectWithoutPropertiesLoose(props, _excluded$1);

    const ownerState = _extends({}, props, {
      disabled,
      fullWidth,
      orientation,
      size
    });

    const classes = useUtilityClasses(ownerState);

    const handleChange = (event, buttonValue) => {
      if (!onChange) {
        return;
      }

      const index = value && value.indexOf(buttonValue);
      let newValue;

      if (value && index >= 0) {
        newValue = value.slice();
        newValue.splice(index, 1);
      } else {
        newValue = value ? value.concat(buttonValue) : [buttonValue];
      }

      onChange(event, newValue);
    };

    const handleExclusiveChange = (event, buttonValue) => {
      if (!onChange) {
        return;
      }

      onChange(event, value === buttonValue ? null : buttonValue);
    };

    return /*#__PURE__*/jsxRuntime_1(ToggleButtonGroupRoot, _extends({
      role: "group",
      className: clsx(classes.root, className),
      ref: ref,
      ownerState: ownerState
    }, other, {
      children: React__namespace.Children.map(children, child => {
        if (! /*#__PURE__*/React__namespace.isValidElement(child)) {
          return null;
        }

        {
          if (reactIs_2(child)) {
            console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
          }
        }

        return /*#__PURE__*/React__namespace.cloneElement(child, {
          className: clsx(classes.grouped, child.props.className),
          onChange: exclusive ? handleExclusiveChange : handleChange,
          selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,
          size: child.props.size || size,
          fullWidth,
          color: child.props.color || color,
          disabled: child.props.disabled || disabled
        });
      })
    }));
  });
  ToggleButtonGroup.propTypes
  /* remove-proptypes */
  = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------

    /**
     * The content of the component.
     */
    children: propTypes.node,

    /**
     * Override or extend the styles applied to the component.
     */
    classes: propTypes.object,

    /**
     * @ignore
     */
    className: propTypes.string,

    /**
     * The color of a button when it is selected.
     * @default 'standard'
     */
    color: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), propTypes.string]),

    /**
     * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
     * @default false
     */
    disabled: propTypes.bool,

    /**
     * If `true`, only allow one of the child ToggleButton values to be selected.
     * @default false
     */
    exclusive: propTypes.bool,

    /**
     * If `true`, the button group will take up the full width of its container.
     * @default false
     */
    fullWidth: propTypes.bool,

    /**
     * Callback fired when the value changes.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected buttons. When `exclusive` is true
     * this is a single value; when false an array of selected values. If no value
     * is selected and `exclusive` is true the value is null; when false an empty array.
     */
    onChange: propTypes.func,

    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: propTypes.oneOf(['horizontal', 'vertical']),

    /**
     * The size of the component.
     * @default 'medium'
     */
    size: propTypes
    /* @typescript-to-proptypes-ignore */
    .oneOfType([propTypes.oneOf(['small', 'medium', 'large']), propTypes.string]),

    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: propTypes.oneOfType([propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.object])), propTypes.func, propTypes.object]),

    /**
     * The currently selected value within the group or an array of selected
     * values when `exclusive` is false.
     *
     * The value must have reference equality with the option in order to be selected.
     */
    value: propTypes.any
  } ;
  var ToggleButtonGroup$1 = ToggleButtonGroup;

  const _excluded = ["getTrigger", "target"];

  function defaultTrigger(store, options) {
    const {
      disableHysteresis = false,
      threshold = 100,
      target
    } = options;
    const previous = store.current;

    if (target) {
      // Get vertical scroll
      store.current = target.pageYOffset !== undefined ? target.pageYOffset : target.scrollTop;
    }

    if (!disableHysteresis && previous !== undefined) {
      if (store.current < previous) {
        return false;
      }
    }

    return store.current > threshold;
  }

  const defaultTarget = typeof window !== 'undefined' ? window : null;
  function useScrollTrigger(options = {}) {
    const {
      getTrigger = defaultTrigger,
      target = defaultTarget
    } = options,
          other = _objectWithoutPropertiesLoose(options, _excluded);

    const store = React__namespace.useRef();
    const [trigger, setTrigger] = React__namespace.useState(() => getTrigger(store, other));
    React__namespace.useEffect(() => {
      const handleScroll = () => {
        setTrigger(getTrigger(store, _extends({
          target
        }, other)));
      };

      handleScroll(); // Re-evaluate trigger when dependencies change

      target.addEventListener('scroll', handleScroll);
      return () => {
        target.removeEventListener('scroll', handleScroll);
      }; // See Option 3. https://github.com/facebook/react/issues/14476#issuecomment-471199055
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [target, getTrigger, JSON.stringify(other)]);
    return trigger;
  }

  exports.Accordion = Accordion$1;
  exports.AccordionActions = AccordionActions$1;
  exports.AccordionDetails = AccordionDetails$1;
  exports.AccordionSummary = AccordionSummary$1;
  exports.Alert = Alert$1;
  exports.AlertTitle = AlertTitle$1;
  exports.AppBar = AppBar$1;
  exports.Autocomplete = Autocomplete$1;
  exports.Avatar = Avatar$1;
  exports.AvatarGroup = AvatarGroup$1;
  exports.Backdrop = Backdrop$1;
  exports.BackdropUnstyled = BackdropUnstyled$1;
  exports.Badge = Badge$1;
  exports.BadgeUnstyled = BadgeUnstyled$1;
  exports.BottomNavigation = BottomNavigation$1;
  exports.BottomNavigationAction = BottomNavigationAction$1;
  exports.Box = Box$1;
  exports.Breadcrumbs = Breadcrumbs$1;
  exports.Button = Button$1;
  exports.ButtonBase = ButtonBase$1;
  exports.ButtonGroup = ButtonGroup$1;
  exports.ButtonUnstyled = ButtonUnstyled$1;
  exports.Card = Card$1;
  exports.CardActionArea = CardActionArea$1;
  exports.CardActions = CardActions$1;
  exports.CardContent = CardContent$1;
  exports.CardHeader = CardHeader$1;
  exports.CardMedia = CardMedia$1;
  exports.Checkbox = Checkbox$1;
  exports.Chip = Chip$1;
  exports.CircularProgress = CircularProgress$1;
  exports.ClickAwayListener = ClickAwayListener;
  exports.Collapse = Collapse$1;
  exports.Container = Container$1;
  exports.CssBaseline = CssBaseline;
  exports.Dialog = Dialog$1;
  exports.DialogActions = DialogActions$1;
  exports.DialogContent = DialogContent$1;
  exports.DialogContentText = DialogContentText$1;
  exports.DialogTitle = DialogTitle$1;
  exports.Divider = Divider$1;
  exports.Drawer = Drawer$1;
  exports.Fab = Fab$1;
  exports.Fade = Fade$1;
  exports.FilledInput = FilledInput$1;
  exports.FormControl = FormControl$1;
  exports.FormControlLabel = FormControlLabel$1;
  exports.FormControlUnstyled = FormControlUnstyled$1;
  exports.FormControlUnstyledContext = FormControlUnstyledContext$1;
  exports.FormGroup = FormGroup$1;
  exports.FormHelperText = FormHelperText$1;
  exports.FormLabel = FormLabel$1;
  exports.FormLabelRoot = FormLabelRoot;
  exports.GlobalStyles = GlobalStyles;
  exports.Grid = Grid$1;
  exports.Grow = Grow$1;
  exports.Hidden = Hidden;
  exports.Icon = Icon$1;
  exports.IconButton = IconButton$1;
  exports.ImageList = ImageList$1;
  exports.ImageListItem = ImageListItem$1;
  exports.ImageListItemBar = ImageListItemBar$1;
  exports.Input = Input$1;
  exports.InputAdornment = InputAdornment$1;
  exports.InputBase = InputBase$1;
  exports.InputLabel = InputLabel$1;
  exports.InputUnstyled = InputUnstyled$1;
  exports.LinearProgress = LinearProgress$1;
  exports.Link = Link$1;
  exports.List = List$1;
  exports.ListItem = ListItem$1;
  exports.ListItemAvatar = ListItemAvatar$1;
  exports.ListItemButton = ListItemButton$1;
  exports.ListItemIcon = ListItemIcon$1;
  exports.ListItemSecondaryAction = ListItemSecondaryAction$1;
  exports.ListItemText = ListItemText$1;
  exports.ListSubheader = ListSubheader$1;
  exports.Menu = Menu$1;
  exports.MenuItem = MenuItem$1;
  exports.MenuList = MenuList$1;
  exports.MobileStepper = MobileStepper$1;
  exports.Modal = Modal$1;
  exports.ModalManager = ModalManager;
  exports.ModalUnstyled = ModalUnstyled$1;
  exports.NativeSelect = NativeSelect$1;
  exports.NoSsr = NoSsr;
  exports.OutlinedInput = OutlinedInput$1;
  exports.Pagination = Pagination$1;
  exports.PaginationItem = PaginationItem$1;
  exports.Paper = Paper$1;
  exports.Popover = Popover$1;
  exports.Popper = Popper$1;
  exports.Portal = Portal$1;
  exports.Radio = Radio$1;
  exports.RadioGroup = RadioGroup$1;
  exports.Rating = Rating$1;
  exports.ScopedCssBaseline = ScopedCssBaseline$1;
  exports.Select = Select$1;
  exports.Skeleton = Skeleton$1;
  exports.Slide = Slide$1;
  exports.Slider = Slider$1;
  exports.SliderMark = SliderMark;
  exports.SliderMarkLabel = SliderMarkLabel;
  exports.SliderRail = SliderRail;
  exports.SliderRoot = SliderRoot;
  exports.SliderThumb = SliderThumb;
  exports.SliderTrack = SliderTrack;
  exports.SliderUnstyled = SliderUnstyled$1;
  exports.SliderValueLabel = SliderValueLabel;
  exports.SliderValueLabelUnstyled = SliderValueLabelUnstyled;
  exports.Snackbar = Snackbar$1;
  exports.SnackbarContent = SnackbarContent$1;
  exports.SpeedDial = SpeedDial$1;
  exports.SpeedDialAction = SpeedDialAction$1;
  exports.SpeedDialIcon = SpeedDialIcon$1;
  exports.Stack = Stack$1;
  exports.Step = Step$1;
  exports.StepButton = StepButton$1;
  exports.StepConnector = StepConnector$1;
  exports.StepContent = StepContent$1;
  exports.StepIcon = StepIcon$1;
  exports.StepLabel = StepLabel$1;
  exports.Stepper = Stepper$1;
  exports.StyledEngineProvider = StyledEngineProvider;
  exports.SvgIcon = SvgIcon$1;
  exports.SwipeableDrawer = SwipeableDrawer$1;
  exports.Switch = Switch$1;
  exports.SwitchUnstyled = SwitchUnstyled$1;
  exports.Tab = Tab$1;
  exports.TabScrollButton = TabScrollButton$1;
  exports.Table = Table$1;
  exports.TableBody = TableBody$1;
  exports.TableCell = TableCell$1;
  exports.TableContainer = TableContainer$1;
  exports.TableFooter = TableFooter$1;
  exports.TableHead = TableHead$1;
  exports.TablePagination = TablePagination$1;
  exports.TableRow = TableRow$1;
  exports.TableSortLabel = TableSortLabel$1;
  exports.Tabs = Tabs$1;
  exports.TextField = TextField$1;
  exports.TextareaAutosize = TextareaAutosize$1;
  exports.ThemeProvider = ThemeProvider;
  exports.ToggleButton = ToggleButton$1;
  exports.ToggleButtonGroup = ToggleButtonGroup$1;
  exports.Toolbar = Toolbar$1;
  exports.Tooltip = Tooltip$1;
  exports.Typography = Typography$1;
  exports.Unstable_TrapFocus = Unstable_TrapFocus;
  exports.Zoom = Zoom$1;
  exports.accordionActionsClasses = accordionActionsClasses$1;
  exports.accordionClasses = accordionClasses$1;
  exports.accordionDetailsClasses = accordionDetailsClasses$1;
  exports.accordionSummaryClasses = accordionSummaryClasses$1;
  exports.adaptV4Theme = adaptV4Theme;
  exports.alertClasses = alertClasses$1;
  exports.alertTitleClasses = alertTitleClasses$1;
  exports.alpha = alpha;
  exports.appBarClasses = appBarClasses$1;
  exports.appendOwnerState = appendOwnerState;
  exports.autocompleteClasses = autocompleteClasses$1;
  exports.avatarClasses = avatarClasses$1;
  exports.avatarGroupClasses = avatarGroupClasses$1;
  exports.backdropClasses = backdropClasses;
  exports.backdropUnstyledClasses = backdropUnstyledClasses$1;
  exports.badgeClasses = badgeClasses;
  exports.badgeUnstyledClasses = badgeUnstyledClasses$1;
  exports.bottomNavigationActionClasses = bottomNavigationActionClasses$1;
  exports.bottomNavigationClasses = bottomNavigationClasses$1;
  exports.breadcrumbsClasses = breadcrumbsClasses$1;
  exports.buttonBaseClasses = buttonBaseClasses$1;
  exports.buttonClasses = buttonClasses$1;
  exports.buttonGroupClasses = buttonGroupClasses$1;
  exports.buttonUnstyledClasses = buttonUnstyledClasses$1;
  exports.capitalize = capitalize;
  exports.cardActionAreaClasses = cardActionAreaClasses$1;
  exports.cardActionsClasses = cardActionsClasses$1;
  exports.cardClasses = cardClasses$1;
  exports.cardContentClasses = cardContentClasses$1;
  exports.cardHeaderClasses = cardHeaderClasses$1;
  exports.cardMediaClasses = cardMediaClasses$1;
  exports.checkboxClasses = checkboxClasses$1;
  exports.chipClasses = chipClasses$1;
  exports.circularProgressClasses = circularProgressClasses$1;
  exports.collapseClasses = collapseClasses$1;
  exports.colors = index;
  exports.containerClasses = containerClasses$1;
  exports.createChainedFunction = createChainedFunction;
  exports.createFilterOptions = createFilterOptions;
  exports.createMuiTheme = createMuiTheme;
  exports.createStyles = createStyles;
  exports.createSvgIcon = createSvgIcon;
  exports.createTheme = createTheme;
  exports.css = css;
  exports.darkScrollbar = darkScrollbar;
  exports.darken = darken;
  exports.debounce = debounce$1;
  exports.decomposeColor = decomposeColor;
  exports.deprecatedPropType = deprecatedPropType;
  exports.dialogActionsClasses = dialogActionsClasses$1;
  exports.dialogClasses = dialogClasses$1;
  exports.dialogContentClasses = dialogContentClasses$1;
  exports.dialogContentTextClasses = dialogContentTextClasses$1;
  exports.dialogTitleClasses = dialogTitleClasses$1;
  exports.dividerClasses = dividerClasses$1;
  exports.drawerClasses = drawerClasses$1;
  exports.duration = duration;
  exports.easing = easing;
  exports.emphasize = emphasize;
  exports.experimentalStyled = styled$1;
  exports.extractEventHandlers = extractEventHandlers;
  exports.fabClasses = fabClasses$1;
  exports.filledInputClasses = filledInputClasses$1;
  exports.formControlClasses = formControlClasses$1;
  exports.formControlLabelClasses = formControlLabelClasses$1;
  exports.formControlUnstyledClasses = classes$2;
  exports.formGroupClasses = formGroupClasses$1;
  exports.formHelperTextClasses = formHelperTextClasses$1;
  exports.formLabelClasses = formLabelClasses$1;
  exports.generateUtilityClass = generateUtilityClass;
  exports.generateUtilityClasses = generateUtilityClasses;
  exports.getAccordionActionsUtilityClass = getAccordionActionsUtilityClass;
  exports.getAccordionDetailsUtilityClass = getAccordionDetailsUtilityClass;
  exports.getAccordionSummaryUtilityClass = getAccordionSummaryUtilityClass;
  exports.getAccordionUtilityClass = getAccordionUtilityClass;
  exports.getAlertTitleUtilityClass = getAlertTitleUtilityClass;
  exports.getAlertUtilityClass = getAlertUtilityClass;
  exports.getAppBarUtilityClass = getAppBarUtilityClass;
  exports.getAutocompleteUtilityClass = getAutocompleteUtilityClass;
  exports.getAvatarGroupUtilityClass = getAvatarGroupUtilityClass;
  exports.getAvatarUtilityClass = getAvatarUtilityClass;
  exports.getBackdropUtilityClass = getBackdropUtilityClass;
  exports.getBadgeUtilityClass = getBadgeUtilityClass;
  exports.getBottomNavigationActionUtilityClass = getBottomNavigationActionUtilityClass;
  exports.getBottomNavigationUtilityClass = getBottomNavigationUtilityClass;
  exports.getBreadcrumbsUtilityClass = getBreadcrumbsUtilityClass;
  exports.getButtonBaseUtilityClass = getButtonBaseUtilityClass;
  exports.getButtonGroupUtilityClass = getButtonGroupUtilityClass;
  exports.getButtonUnstyledUtilityClass = getButtonUnstyledUtilityClass;
  exports.getButtonUtilityClass = getButtonUtilityClass;
  exports.getCardActionAreaUtilityClass = getCardActionAreaUtilityClass;
  exports.getCardActionsUtilityClass = getCardActionsUtilityClass;
  exports.getCardContentUtilityClass = getCardContentUtilityClass;
  exports.getCardHeaderUtilityClass = getCardHeaderUtilityClass;
  exports.getCardMediaUtilityClass = getCardMediaUtilityClass;
  exports.getCardUtilityClass = getCardUtilityClass;
  exports.getCheckboxUtilityClass = getCheckboxUtilityClass;
  exports.getChipUtilityClass = getChipUtilityClass;
  exports.getCircularProgressUtilityClass = getCircularProgressUtilityClass;
  exports.getCollapseUtilityClass = getCollapseUtilityClass;
  exports.getContainerUtilityClass = getContainerUtilityClass;
  exports.getContrastRatio = getContrastRatio;
  exports.getDialogActionsUtilityClass = getDialogActionsUtilityClass;
  exports.getDialogContentTextUtilityClass = getDialogContentTextUtilityClass;
  exports.getDialogContentUtilityClass = getDialogContentUtilityClass;
  exports.getDialogTitleUtilityClass = getDialogTitleUtilityClass;
  exports.getDialogUtilityClass = getDialogUtilityClass;
  exports.getDividerUtilityClass = getDividerUtilityClass;
  exports.getDrawerUtilityClass = getDrawerUtilityClass;
  exports.getFabUtilityClass = getFabUtilityClass;
  exports.getFilledInputUtilityClass = getFilledInputUtilityClass;
  exports.getFormControlLabelUtilityClasses = getFormControlLabelUtilityClasses;
  exports.getFormControlUnstyledUtilityClasses = getFormControlUnstyledUtilityClasses;
  exports.getFormControlUtilityClasses = getFormControlUtilityClasses;
  exports.getFormGroupUtilityClass = getFormGroupUtilityClass;
  exports.getFormHelperTextUtilityClasses = getFormHelperTextUtilityClasses;
  exports.getFormLabelUtilityClasses = getFormLabelUtilityClasses;
  exports.getGridUtilityClass = getGridUtilityClass;
  exports.getIconButtonUtilityClass = getIconButtonUtilityClass;
  exports.getIconUtilityClass = getIconUtilityClass;
  exports.getImageListItemBarUtilityClass = getImageListItemBarUtilityClass;
  exports.getImageListItemUtilityClass = getImageListItemUtilityClass;
  exports.getImageListUtilityClass = getImageListUtilityClass;
  exports.getInputAdornmentUtilityClass = getInputAdornmentUtilityClass;
  exports.getInputBaseUtilityClass = getInputBaseUtilityClass;
  exports.getInputLabelUtilityClasses = getInputLabelUtilityClasses;
  exports.getInputUnstyledUtilityClass = getInputUnstyledUtilityClass;
  exports.getInputUtilityClass = getInputUtilityClass;
  exports.getLinearProgressUtilityClass = getLinearProgressUtilityClass;
  exports.getLinkUtilityClass = getLinkUtilityClass;
  exports.getListItemAvatarUtilityClass = getListItemAvatarUtilityClass;
  exports.getListItemButtonUtilityClass = getListItemButtonUtilityClass;
  exports.getListItemIconUtilityClass = getListItemIconUtilityClass;
  exports.getListItemSecondaryActionClassesUtilityClass = getListItemSecondaryActionClassesUtilityClass;
  exports.getListItemTextUtilityClass = getListItemTextUtilityClass;
  exports.getListItemUtilityClass = getListItemUtilityClass;
  exports.getListSubheaderUtilityClass = getListSubheaderUtilityClass;
  exports.getListUtilityClass = getListUtilityClass;
  exports.getLuminance = getLuminance;
  exports.getMenuItemUtilityClass = getMenuItemUtilityClass;
  exports.getMenuUtilityClass = getMenuUtilityClass;
  exports.getMobileStepperUtilityClass = getMobileStepperUtilityClass;
  exports.getModalUtilityClass = getModalUtilityClass;
  exports.getNativeSelectUtilityClasses = getNativeSelectUtilityClasses;
  exports.getOutlinedInputUtilityClass = getOutlinedInputUtilityClass;
  exports.getPaginationItemUtilityClass = getPaginationItemUtilityClass;
  exports.getPaginationUtilityClass = getPaginationUtilityClass;
  exports.getPaperUtilityClass = getPaperUtilityClass;
  exports.getPopoverUtilityClass = getPopoverUtilityClass;
  exports.getRadioUtilityClass = getRadioUtilityClass;
  exports.getRatingUtilityClass = getRatingUtilityClass;
  exports.getScopedCssBaselineUtilityClass = getScopedCssBaselineUtilityClass;
  exports.getSelectUtilityClasses = getSelectUtilityClasses;
  exports.getSkeletonUtilityClass = getSkeletonUtilityClass;
  exports.getSliderUtilityClass = getSliderUtilityClass;
  exports.getSnackbarContentUtilityClass = getSnackbarContentUtilityClass;
  exports.getSnackbarUtilityClass = getSnackbarUtilityClass;
  exports.getSpeedDialActionUtilityClass = getSpeedDialActionUtilityClass;
  exports.getSpeedDialIconUtilityClass = getSpeedDialIconUtilityClass;
  exports.getSpeedDialUtilityClass = getSpeedDialUtilityClass;
  exports.getStepButtonUtilityClass = getStepButtonUtilityClass;
  exports.getStepConnectorUtilityClass = getStepConnectorUtilityClass;
  exports.getStepContentUtilityClass = getStepContentUtilityClass;
  exports.getStepIconUtilityClass = getStepIconUtilityClass;
  exports.getStepLabelUtilityClass = getStepLabelUtilityClass;
  exports.getStepUtilityClass = getStepUtilityClass;
  exports.getStepperUtilityClass = getStepperUtilityClass;
  exports.getSvgIconUtilityClass = getSvgIconUtilityClass;
  exports.getSwitchUnstyledUtilityClass = getSwitchUnstyledUtilityClass;
  exports.getSwitchUtilityClass = getSwitchUtilityClass;
  exports.getTabScrollButtonUtilityClass = getTabScrollButtonUtilityClass;
  exports.getTabUtilityClass = getTabUtilityClass;
  exports.getTableBodyUtilityClass = getTableBodyUtilityClass;
  exports.getTableCellUtilityClass = getTableCellUtilityClass;
  exports.getTableContainerUtilityClass = getTableContainerUtilityClass;
  exports.getTableFooterUtilityClass = getTableFooterUtilityClass;
  exports.getTableHeadUtilityClass = getTableHeadUtilityClass;
  exports.getTablePaginationUtilityClass = getTablePaginationUtilityClass;
  exports.getTableRowUtilityClass = getTableRowUtilityClass;
  exports.getTableSortLabelUtilityClass = getTableSortLabelUtilityClass;
  exports.getTableUtilityClass = getTableUtilityClass;
  exports.getTabsUtilityClass = getTabsUtilityClass;
  exports.getTextFieldUtilityClass = getTextFieldUtilityClass;
  exports.getToggleButtonGroupUtilityClass = getToggleButtonGroupUtilityClass;
  exports.getToggleButtonUtilityClass = getToggleButtonUtilityClass;
  exports.getToolbarUtilityClass = getToolbarUtilityClass;
  exports.getTooltipUtilityClass = getTooltipUtilityClass;
  exports.getTouchRippleUtilityClass = getTouchRippleUtilityClass;
  exports.getTypographyUtilityClass = getTypographyUtilityClass;
  exports.gridClasses = gridClasses$1;
  exports.hexToRgb = hexToRgb;
  exports.hslToRgb = hslToRgb;
  exports.iconButtonClasses = iconButtonClasses$1;
  exports.iconClasses = iconClasses$1;
  exports.imageListClasses = imageListClasses$1;
  exports.imageListItemBarClasses = imageListItemBarClasses$1;
  exports.imageListItemClasses = imageListItemClasses$1;
  exports.inputAdornmentClasses = inputAdornmentClasses$1;
  exports.inputBaseClasses = inputBaseClasses$1;
  exports.inputClasses = inputClasses$1;
  exports.inputLabelClasses = inputLabelClasses$1;
  exports.inputUnstyledClasses = classes$1;
  exports.isHostComponent = isHostComponent;
  exports.isMuiElement = isMuiElement;
  exports.keyframes = keyframes;
  exports.lighten = lighten;
  exports.linearProgressClasses = linearProgressClasses$1;
  exports.linkClasses = linkClasses$1;
  exports.listClasses = listClasses$1;
  exports.listItemAvatarClasses = listItemAvatarClasses$1;
  exports.listItemButtonClasses = listItemButtonClasses$1;
  exports.listItemClasses = listItemClasses$1;
  exports.listItemIconClasses = listItemIconClasses$1;
  exports.listItemSecondaryActionClasses = listItemSecondaryActionClasses$1;
  exports.listItemTextClasses = listItemTextClasses$1;
  exports.listSubheaderClasses = listSubheaderClasses$1;
  exports.makeStyles = makeStyles;
  exports.menuClasses = menuClasses$1;
  exports.menuItemClasses = menuItemClasses$1;
  exports.mobileStepperClasses = mobileStepperClasses$1;
  exports.modalClasses = modalClasses;
  exports.modalUnstyledClasses = modalUnstyledClasses$1;
  exports.nativeSelectClasses = nativeSelectClasses$1;
  exports.outlinedInputClasses = outlinedInputClasses$1;
  exports.ownerDocument = ownerDocument;
  exports.ownerWindow = ownerWindow;
  exports.paginationClasses = paginationClasses$1;
  exports.paginationItemClasses = paginationItemClasses$1;
  exports.paperClasses = paperClasses$1;
  exports.popoverClasses = popoverClasses$1;
  exports.radioClasses = radioClasses$1;
  exports.ratingClasses = ratingClasses$1;
  exports.recomposeColor = recomposeColor;
  exports.requirePropFactory = requirePropFactory;
  exports.responsiveFontSizes = responsiveFontSizes;
  exports.rgbToHex = rgbToHex;
  exports.scopedCssBaselineClasses = scopedCssBaselineClasses$1;
  exports.selectClasses = selectClasses$1;
  exports.setRef = setRef;
  exports.skeletonClasses = skeletonClasses$1;
  exports.sliderClasses = sliderClasses;
  exports.sliderUnstyledClasses = sliderUnstyledClasses$1;
  exports.snackbarClasses = snackbarClasses$1;
  exports.snackbarContentClasses = snackbarContentClasses$1;
  exports.speedDialActionClasses = speedDialActionClasses$1;
  exports.speedDialClasses = speedDialClasses$1;
  exports.speedDialIconClasses = speedDialIconClasses$1;
  exports.stepButtonClasses = stepButtonClasses$1;
  exports.stepClasses = stepClasses$1;
  exports.stepConnectorClasses = stepConnectorClasses$1;
  exports.stepContentClasses = stepContentClasses$1;
  exports.stepIconClasses = stepIconClasses$1;
  exports.stepLabelClasses = stepLabelClasses$1;
  exports.stepperClasses = stepperClasses$1;
  exports.styled = styled$1;
  exports.svgIconClasses = svgIconClasses$1;
  exports.switchClasses = switchClasses$1;
  exports.switchUnstyledClasses = classes;
  exports.tabClasses = tabClasses$1;
  exports.tabScrollButtonClasses = tabScrollButtonClasses$1;
  exports.tableBodyClasses = tableBodyClasses$1;
  exports.tableCellClasses = tableCellClasses$1;
  exports.tableClasses = tableClasses$1;
  exports.tableContainerClasses = tableContainerClasses$1;
  exports.tableFooterClasses = tableFooterClasses$1;
  exports.tableHeadClasses = tableHeadClasses$1;
  exports.tablePaginationClasses = tablePaginationClasses$1;
  exports.tableRowClasses = tableRowClasses$1;
  exports.tableSortLabelClasses = tableSortLabelClasses$1;
  exports.tabsClasses = tabsClasses$1;
  exports.textFieldClasses = textFieldClasses$1;
  exports.toggleButtonClasses = toggleButtonClasses$1;
  exports.toggleButtonGroupClasses = toggleButtonGroupClasses$1;
  exports.toolbarClasses = toolbarClasses$1;
  exports.tooltipClasses = tooltipClasses$1;
  exports.touchRippleClasses = touchRippleClasses$1;
  exports.typographyClasses = typographyClasses$1;
  exports.unstable_ClassNameGenerator = ClassNameGenerator$1;
  exports.unstable_composeClasses = composeClasses;
  exports.unstable_createMuiStrictModeTheme = createMuiStrictModeTheme;
  exports.unstable_getUnit = getUnit;
  exports.unstable_toUnitless = toUnitless;
  exports.unstable_useEnhancedEffect = useEnhancedEffect$1;
  exports.unstable_useId = useId;
  exports.unsupportedProp = unsupportedProp;
  exports.useAutocomplete = useAutocomplete;
  exports.useButton = useButton;
  exports.useControlled = useControlled;
  exports.useEventCallback = useEventCallback;
  exports.useForkRef = useForkRef;
  exports.useFormControl = useFormControl;
  exports.useFormControlUnstyled = useFormControlUnstyled;
  exports.useInput = useInput;
  exports.useIsFocusVisible = useIsFocusVisible;
  exports.useMediaQuery = useMediaQuery;
  exports.usePagination = usePagination;
  exports.useRadioGroup = useRadioGroup;
  exports.useScrollTrigger = useScrollTrigger;
  exports.useSwitch = useSwitch;
  exports.useTheme = useTheme;
  exports.useThemeProps = useThemeProps;
  exports.withStyles = withStyles;
  exports.withTheme = withTheme;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
