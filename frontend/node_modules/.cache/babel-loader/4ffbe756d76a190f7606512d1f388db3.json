{"ast":null,"code":"import getNodeName from \"../dom-utils/getNodeName.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@popperjs/core/lib/modifiers/applyStyles.js"],"names":["getNodeName","isHTMLElement","applyStyles","_ref","state","Object","keys","elements","forEach","name","style","styles","attributes","element","assign","value","removeAttribute","setAttribute","effect","_ref2","initialStyles","popper","position","options","strategy","left","top","margin","arrow","reference","styleProperties","hasOwnProperty","reduce","property","attribute","enabled","phase","fn","requires"],"mappings":"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","sourcesContent":["import getNodeName from \"../dom-utils/getNodeName.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};"]},"metadata":{},"sourceType":"module"}