{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport withWidth, { isWidthDown, isWidthUp } from './withWidth';\nimport useTheme from '../styles/useTheme';\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenJs(props) {\n  const {\n    children,\n    only,\n    width\n  } = props;\n  const theme = useTheme();\n  let visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[`${breakpoint}Up`];\n      const breakpointDown = props[`${breakpoint}Down`];\n\n      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  xsUp: PropTypes.bool\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/material/Hidden/HiddenJs.js"],"names":["PropTypes","exactProp","withWidth","isWidthDown","isWidthUp","useTheme","HiddenJs","props","children","only","width","theme","visible","Array","isArray","i","length","breakpoint","breakpoints","keys","breakpointUp","breakpointDown","propTypes","node","className","string","implementation","oneOf","initialWidth","lgDown","bool","lgUp","mdDown","mdUp","oneOfType","arrayOf","smDown","smUp","isRequired","xlDown","xlUp","xsDown","xsUp","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport withWidth, { isWidthDown, isWidthUp } from './withWidth';\nimport useTheme from '../styles/useTheme';\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenJs(props) {\n  const {\n    children,\n    only,\n    width\n  } = props;\n  const theme = useTheme();\n  let visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (let i = 0; i < only.length; i += 1) {\n        const breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {\n      const breakpoint = theme.breakpoints.keys[i];\n      const breakpointUp = props[`${breakpoint}Up`];\n      const breakpointDown = props[`${breakpoint}Down`];\n\n      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  xsUp: PropTypes.bool\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);"]},"metadata":{},"sourceType":"module"}