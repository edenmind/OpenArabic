{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js"],"names":["_extends","React","PropTypes","exactProp","ThemeContext","useTheme","nested","jsx","_jsx","mergeOuterLocalTheme","outerTheme","localTheme","mergedTheme","process","env","NODE_ENV","console","error","join","ThemeProvider","props","children","theme","useMemo","output","Provider","value","propTypes","node","oneOfType","object","func","isRequired"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAA+B;;AAE/B,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,UAA1C,EAAsD;AACpD,MAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpC,UAAMC,WAAW,GAAGD,UAAU,CAACD,UAAD,CAA9B;;AAEA,QAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,CAACH,WAAL,EAAkB;AAChBI,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,iEAAD,EAAoE,sCAApE,EAA4GC,IAA5G,CAAiH,IAAjH,CAAd;AACD;AACF;;AAED,WAAON,WAAP;AACD;;AAED,SAAOZ,QAAQ,CAAC,EAAD,EAAKU,UAAL,EAAiBC,UAAjB,CAAf;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASQ,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,KAAK,EAAEX;AAFH,MAGFS,KAHJ;AAIA,QAAMV,UAAU,GAAGL,QAAQ,EAA3B;;AAEA,MAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIL,UAAU,KAAK,IAAf,IAAuB,OAAOC,UAAP,KAAsB,UAAjD,EAA6D;AAC3DK,MAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,8EAAD,EAAiF,oDAAjF,EAAuI,EAAvI,EAA2I,qCAA3I,EAAkL,oEAAoE,4BAAtP,EAAoRC,IAApR,CAAyR,IAAzR,CAAd;AACD;AACF;;AAED,QAAMI,KAAK,GAAGrB,KAAK,CAACsB,OAAN,CAAc,MAAM;AAChC,UAAMC,MAAM,GAAGd,UAAU,KAAK,IAAf,GAAsBC,UAAtB,GAAmCF,oBAAoB,CAACC,UAAD,EAAaC,UAAb,CAAtE;;AAEA,QAAIa,MAAM,IAAI,IAAd,EAAoB;AAClBA,MAAAA,MAAM,CAAClB,MAAD,CAAN,GAAiBI,UAAU,KAAK,IAAhC;AACD;;AAED,WAAOc,MAAP;AACD,GARa,EAQX,CAACb,UAAD,EAAaD,UAAb,CARW,CAAd;AASA,SAAO,aAAaF,IAAI,CAACJ,YAAY,CAACqB,QAAd,EAAwB;AAC9CC,IAAAA,KAAK,EAAEJ,KADuC;AAE9CD,IAAAA,QAAQ,EAAEA;AAFoC,GAAxB,CAAxB;AAID;;AAEDR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCI,aAAa,CAACQ,SAAd,GAA0B;AAChE;AACF;AACA;AACEN,EAAAA,QAAQ,EAAEnB,SAAS,CAAC0B,IAJ4C;;AAMhE;AACF;AACA;AACEN,EAAAA,KAAK,EAAEpB,SAAS,CAAC2B,SAAV,CAAoB,CAAC3B,SAAS,CAAC4B,MAAX,EAAmB5B,SAAS,CAAC6B,IAA7B,CAApB,EAAwDC;AATC,CAAlE,GAUI,KAAK,CAVT;;AAYA,IAAInB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCI,aAAa,CAACQ,SAAd,GAA0BxB,SAAS,CAACgB,aAAa,CAACQ,SAAf,CAA3E,GAAuG,KAAK,CAA5G;AACD;;AAED,eAAeR,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@mui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/_jsx(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}