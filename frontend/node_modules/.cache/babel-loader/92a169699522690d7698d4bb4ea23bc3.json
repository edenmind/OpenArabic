{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"BackdropProps\"],\n      _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/core';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { duration } from '../styles/createTransitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\n\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\n\nfunction computeHasNativeHandler(_ref) {\n  let {\n    domTreeShapes,\n    start,\n    current,\n    anchor\n  } = _ref;\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback(function (translate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","elementTypeAcceptingRef","useThemeProps","NoSsr","Drawer","getAnchor","isHorizontal","ownerDocument","ownerWindow","useEventCallback","useEnhancedEffect","duration","useTheme","getTransitionProps","SwipeArea","jsx","_jsx","jsxs","_jsxs","UNCERTAINTY_THRESHOLD","DRAG_STARTED_SIGNAL","claimedSwipeInstance","reset","calculateCurrentX","anchor","touches","doc","body","offsetWidth","pageX","calculateCurrentY","containerWindow","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","parentElement","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","computeHasNativeHandler","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","round","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","transitionDurationDefault","enter","enteringScreen","exit","leavingScreen","SwipeableDrawer","forwardRef","inProps","ref","props","name","theme","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","BackdropProps","onClose","onOpen","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant","ModalPropsProp","other","maybeSwiping","setMaybeSwiping","useState","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","mode","changeTransition","anchorRtl","rtlTranslateMultiplier","indexOf","transform","drawerStyle","webkitTransform","transition","transitions","create","easing","undefined","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","nativeEvent","horizontal","changedTouches","currentTarget","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","hasNativeHandler","dx","dy","definitelySwiping","cancelable","preventDefault","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","defaultMuiPrevented","useEffect","addEventListener","passive","removeEventListener","Fragment","children","pointerEvents","width","process","env","NODE_ENV","propTypes","oneOf","node","bool","number","component","func","isRequired","object","oneOfType","appear"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"BackdropProps\"],\n      _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/core';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { duration } from '../styles/createTransitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\n\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\n\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"]},"metadata":{},"sourceType":"module"}