{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"mode\", \"contrastThreshold\", \"tonalOffset\"];\nimport { deepmerge } from '@mui/utils';\nimport { darken, getContrastRatio, lighten } from '@mui/system';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport purple from '../colors/purple';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport lightBlue from '../colors/lightBlue';\nimport green from '../colors/green';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.6)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: common.white\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: '#121212',\n    default: '#121212'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nfunction getDefaultPrimary() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';\n\n  if (mode === 'dark') {\n    return {\n      main: blue[200],\n      light: blue[50],\n      dark: blue[400]\n    };\n  }\n\n  return {\n    main: blue[700],\n    light: blue[400],\n    dark: blue[800]\n  };\n}\n\nfunction getDefaultSecondary() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';\n\n  if (mode === 'dark') {\n    return {\n      main: purple[200],\n      light: purple[50],\n      dark: purple[400]\n    };\n  }\n\n  return {\n    main: purple[500],\n    light: purple[300],\n    dark: purple[700]\n  };\n}\n\nfunction getDefaultError() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';\n\n  if (mode === 'dark') {\n    return {\n      main: red[500],\n      light: red[300],\n      dark: red[700]\n    };\n  }\n\n  return {\n    main: red[700],\n    light: red[400],\n    dark: red[800]\n  };\n}\n\nfunction getDefaultInfo() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';\n\n  if (mode === 'dark') {\n    return {\n      main: lightBlue[400],\n      light: lightBlue[300],\n      dark: lightBlue[700]\n    };\n  }\n\n  return {\n    main: lightBlue[700],\n    light: lightBlue[500],\n    dark: lightBlue[900]\n  };\n}\n\nfunction getDefaultSuccess() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';\n\n  if (mode === 'dark') {\n    return {\n      main: green[400],\n      light: green[300],\n      dark: green[700]\n    };\n  }\n\n  return {\n    main: green[800],\n    light: green[500],\n    dark: green[900]\n  };\n}\n\nfunction getDefaultWarning() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';\n\n  if (mode === 'dark') {\n    return {\n      main: orange[400],\n      light: orange[300],\n      dark: orange[700]\n    };\n  }\n\n  return {\n    main: '#ed6c02',\n    // closest to orange[800] that pass 3:1.\n    light: orange[500],\n    dark: orange[900]\n  };\n}\n\nexport default function createPalette(palette) {\n  const {\n    mode = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2\n  } = palette,\n        other = _objectWithoutPropertiesLoose(palette, _excluded);\n\n  const primary = palette.primary || getDefaultPrimary(mode);\n  const secondary = palette.secondary || getDefaultSecondary(mode);\n  const error = palette.error || getDefaultError(mode);\n  const info = palette.info || getDefaultInfo(mode);\n  const success = palette.success || getDefaultSuccess(mode);\n  const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n  function getContrastText(background) {\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  const augmentColor = _ref => {\n    let {\n      color,\n      name,\n      mainShade = 500,\n      lightShade = 300,\n      darkShade = 700\n    } = _ref;\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.hasOwnProperty('main')) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.` : _formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from \"@mui/material/colors\";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });` : _formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  const modes = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!modes[mode]) {\n      console.error(`MUI: The palette mode \\`${mode}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common,\n    // The palette mode, can be light or dark.\n    mode,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor({\n      color: primary,\n      name: 'primary'\n    }),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor({\n      color: secondary,\n      name: 'secondary',\n      mainShade: 'A400',\n      lightShade: 'A200',\n      darkShade: 'A700'\n    }),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor({\n      color: error,\n      name: 'error'\n    }),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor({\n      color: warning,\n      name: 'warning'\n    }),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor({\n      color: info,\n      name: 'info'\n    }),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor({\n      color: success,\n      name: 'success'\n    }),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, modes[mode]), other);\n  return paletteOutput;\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/material/styles/createPalette.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","deepmerge","darken","getContrastRatio","lighten","common","grey","purple","red","orange","blue","lightBlue","green","light","text","primary","secondary","disabled","divider","background","paper","white","default","action","active","hover","hoverOpacity","selected","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","activatedOpacity","dark","icon","addLightOrDark","intent","direction","shade","tonalOffset","tonalOffsetLight","tonalOffsetDark","hasOwnProperty","main","getDefaultPrimary","mode","getDefaultSecondary","getDefaultError","getDefaultInfo","getDefaultSuccess","getDefaultWarning","createPalette","palette","contrastThreshold","other","error","info","success","warning","getContrastText","contrastText","process","env","NODE_ENV","contrast","console","join","augmentColor","color","name","mainShade","lightShade","darkShade","Error","JSON","stringify","modes","paletteOutput"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"mode\", \"contrastThreshold\", \"tonalOffset\"];\nimport { deepmerge } from '@mui/utils';\nimport { darken, getContrastRatio, lighten } from '@mui/system';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport purple from '../colors/purple';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport lightBlue from '../colors/lightBlue';\nimport green from '../colors/green';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.6)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: common.white\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: '#121212',\n    default: '#121212'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nfunction getDefaultPrimary(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: blue[200],\n      light: blue[50],\n      dark: blue[400]\n    };\n  }\n\n  return {\n    main: blue[700],\n    light: blue[400],\n    dark: blue[800]\n  };\n}\n\nfunction getDefaultSecondary(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: purple[200],\n      light: purple[50],\n      dark: purple[400]\n    };\n  }\n\n  return {\n    main: purple[500],\n    light: purple[300],\n    dark: purple[700]\n  };\n}\n\nfunction getDefaultError(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: red[500],\n      light: red[300],\n      dark: red[700]\n    };\n  }\n\n  return {\n    main: red[700],\n    light: red[400],\n    dark: red[800]\n  };\n}\n\nfunction getDefaultInfo(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: lightBlue[400],\n      light: lightBlue[300],\n      dark: lightBlue[700]\n    };\n  }\n\n  return {\n    main: lightBlue[700],\n    light: lightBlue[500],\n    dark: lightBlue[900]\n  };\n}\n\nfunction getDefaultSuccess(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: green[400],\n      light: green[300],\n      dark: green[700]\n    };\n  }\n\n  return {\n    main: green[800],\n    light: green[500],\n    dark: green[900]\n  };\n}\n\nfunction getDefaultWarning(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: orange[400],\n      light: orange[300],\n      dark: orange[700]\n    };\n  }\n\n  return {\n    main: '#ed6c02',\n    // closest to orange[800] that pass 3:1.\n    light: orange[500],\n    dark: orange[900]\n  };\n}\n\nexport default function createPalette(palette) {\n  const {\n    mode = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2\n  } = palette,\n        other = _objectWithoutPropertiesLoose(palette, _excluded);\n\n  const primary = palette.primary || getDefaultPrimary(mode);\n  const secondary = palette.secondary || getDefaultSecondary(mode);\n  const error = palette.error || getDefaultError(mode);\n  const info = palette.info || getDefaultInfo(mode);\n  const success = palette.success || getDefaultSuccess(mode);\n  const warning = palette.warning || getDefaultWarning(mode); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n  function getContrastText(background) {\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  const augmentColor = ({\n    color,\n    name,\n    mainShade = 500,\n    lightShade = 300,\n    darkShade = 700\n  }) => {\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.hasOwnProperty('main')) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.` : _formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from \"@mui/material/colors\";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });` : _formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  const modes = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!modes[mode]) {\n      console.error(`MUI: The palette mode \\`${mode}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common,\n    // The palette mode, can be light or dark.\n    mode,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor({\n      color: primary,\n      name: 'primary'\n    }),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor({\n      color: secondary,\n      name: 'secondary',\n      mainShade: 'A400',\n      lightShade: 'A200',\n      darkShade: 'A700'\n    }),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor({\n      color: error,\n      name: 'error'\n    }),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor({\n      color: warning,\n      name: 'warning'\n    }),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor({\n      color: info,\n      name: 'info'\n    }),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor({\n      color: success,\n      name: 'success'\n    }),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, modes[mode]), other);\n  return paletteOutput;\n}"]},"metadata":{},"sourceType":"module"}