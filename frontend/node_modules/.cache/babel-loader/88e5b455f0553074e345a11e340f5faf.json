{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction resolveValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n  } catch (e) {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = resolveValue(modeStorageKey, defaultMode);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme: resolveValue(`${colorSchemeStorageKey}-light`) || defaultLightColorScheme,\n      darkColorScheme: resolveValue(`${colorSchemeStorageKey}-dark`) || defaultDarkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      const newMode = !mode ? defaultMode : mode;\n\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(modeStorageKey, newMode);\n      }\n\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value || typeof value === 'string') {\n      if (value && !supportedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n\n          if (!value) {\n            // reset to default color scheme\n            newState.lightColorScheme = defaultLightColorScheme;\n            newState.darkColorScheme = defaultDarkColorScheme;\n            return newState;\n          }\n\n          processState(currentState, mode => {\n            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else if (value.light && !supportedColorSchemes.includes(value.light) || value.dark && !supportedColorSchemes.includes(value.dark)) {\n      console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n\n        if (value.light || value.light === null) {\n          newState.lightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        }\n\n        if (value.dark || value.dark === null) {\n          newState.darkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        }\n\n        return newState;\n      });\n\n      if (value.light) {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, value.light);\n      }\n\n      if (value.dark) {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, value.dark);\n      }\n    }\n  }, [colorSchemeStorageKey, supportedColorSchemes, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(e => {\n    if (state.mode === 'system') {\n      setState(currentState => _extends({}, currentState, {\n        systemMode: e.matches ? 'dark' : 'light'\n      }));\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = function () {\n      return mediaListener.current(...arguments);\n    }; // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => media.removeListener(handler);\n  }, []); // Save mode, lightColorScheme & darkColorScheme to localStorage\n\n  React.useEffect(() => {\n    if (state.mode) {\n      localStorage.setItem(modeStorageKey, state.mode);\n    }\n\n    processState(state, mode => {\n      if (mode === 'light') {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, state.lightColorScheme);\n      }\n\n      if (mode === 'dark') {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, state.darkColorScheme);\n      }\n    });\n  }, [state, colorSchemeStorageKey, modeStorageKey]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    const handleStorage = event => {\n      const value = event.newValue;\n\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"names":["_extends","React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","mql","matchMedia","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","resolveValue","key","defaultValue","value","localStorage","getItem","e","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","joinedColorSchemes","join","setState","useState","initialMode","colorScheme","setMode","useCallback","currentState","newMode","setItem","setColorScheme","includes","console","error","newState","light","dark","handleMediaQuery","mediaListener","useRef","current","useEffect","handler","media","addListener","removeListener","handleStorage","event","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction resolveValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n  } catch (e) {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = resolveValue(modeStorageKey, defaultMode);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme: resolveValue(`${colorSchemeStorageKey}-light`) || defaultLightColorScheme,\n      darkColorScheme: resolveValue(`${colorSchemeStorageKey}-dark`) || defaultDarkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      const newMode = !mode ? defaultMode : mode;\n\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(modeStorageKey, newMode);\n      }\n\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value || typeof value === 'string') {\n      if (value && !supportedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n\n          if (!value) {\n            // reset to default color scheme\n            newState.lightColorScheme = defaultLightColorScheme;\n            newState.darkColorScheme = defaultDarkColorScheme;\n            return newState;\n          }\n\n          processState(currentState, mode => {\n            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else if (value.light && !supportedColorSchemes.includes(value.light) || value.dark && !supportedColorSchemes.includes(value.dark)) {\n      console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n\n        if (value.light || value.light === null) {\n          newState.lightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        }\n\n        if (value.dark || value.dark === null) {\n          newState.darkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        }\n\n        return newState;\n      });\n\n      if (value.light) {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, value.light);\n      }\n\n      if (value.dark) {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, value.dark);\n      }\n    }\n  }, [colorSchemeStorageKey, supportedColorSchemes, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(e => {\n    if (state.mode === 'system') {\n      setState(currentState => _extends({}, currentState, {\n        systemMode: e.matches ? 'dark' : 'light'\n      }));\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = (...args) => mediaListener.current(...args); // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => media.removeListener(handler);\n  }, []); // Save mode, lightColorScheme & darkColorScheme to localStorage\n\n  React.useEffect(() => {\n    if (state.mode) {\n      localStorage.setItem(modeStorageKey, state.mode);\n    }\n\n    processState(state, mode => {\n      if (mode === 'light') {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, state.lightColorScheme);\n      }\n\n      if (mode === 'dark') {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, state.darkColorScheme);\n      }\n    });\n  }, [state, colorSchemeStorageKey, modeStorageKey]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    const handleStorage = event => {\n      const value = event.newValue;\n\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}"]},"metadata":{},"sourceType":"module"}