{"ast":null,"code":"import { modifierPhases } from \"../enums.js\"; // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@popperjs/core/lib/utils/orderModifiers.js"],"names":["modifierPhases","order","modifiers","map","Map","visited","Set","result","forEach","modifier","set","name","sort","add","requires","concat","requiresIfExists","dep","has","depModifier","get","push","orderModifiers","orderedModifiers","reduce","acc","phase","filter"],"mappings":"AAAA,SAASA,cAAT,QAA+B,aAA/B,C,CAA8C;;AAE9C,SAASC,KAAT,CAAeC,SAAf,EAA0B;AACxB,MAAIC,GAAG,GAAG,IAAIC,GAAJ,EAAV;AACA,MAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd;AACA,MAAIC,MAAM,GAAG,EAAb;AACAL,EAAAA,SAAS,CAACM,OAAV,CAAkB,UAAUC,QAAV,EAAoB;AACpCN,IAAAA,GAAG,CAACO,GAAJ,CAAQD,QAAQ,CAACE,IAAjB,EAAuBF,QAAvB;AACD,GAFD,EAJwB,CAMpB;;AAEJ,WAASG,IAAT,CAAcH,QAAd,EAAwB;AACtBJ,IAAAA,OAAO,CAACQ,GAAR,CAAYJ,QAAQ,CAACE,IAArB;AACA,QAAIG,QAAQ,GAAG,GAAGC,MAAH,CAAUN,QAAQ,CAACK,QAAT,IAAqB,EAA/B,EAAmCL,QAAQ,CAACO,gBAAT,IAA6B,EAAhE,CAAf;AACAF,IAAAA,QAAQ,CAACN,OAAT,CAAiB,UAAUS,GAAV,EAAe;AAC9B,UAAI,CAACZ,OAAO,CAACa,GAAR,CAAYD,GAAZ,CAAL,EAAuB;AACrB,YAAIE,WAAW,GAAGhB,GAAG,CAACiB,GAAJ,CAAQH,GAAR,CAAlB;;AAEA,YAAIE,WAAJ,EAAiB;AACfP,UAAAA,IAAI,CAACO,WAAD,CAAJ;AACD;AACF;AACF,KARD;AASAZ,IAAAA,MAAM,CAACc,IAAP,CAAYZ,QAAZ;AACD;;AAEDP,EAAAA,SAAS,CAACM,OAAV,CAAkB,UAAUC,QAAV,EAAoB;AACpC,QAAI,CAACJ,OAAO,CAACa,GAAR,CAAYT,QAAQ,CAACE,IAArB,CAAL,EAAiC;AAC/B;AACAC,MAAAA,IAAI,CAACH,QAAD,CAAJ;AACD;AACF,GALD;AAMA,SAAOF,MAAP;AACD;;AAED,eAAe,SAASe,cAAT,CAAwBpB,SAAxB,EAAmC;AAChD;AACA,MAAIqB,gBAAgB,GAAGtB,KAAK,CAACC,SAAD,CAA5B,CAFgD,CAEP;;AAEzC,SAAOF,cAAc,CAACwB,MAAf,CAAsB,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AACjD,WAAOD,GAAG,CAACV,MAAJ,CAAWQ,gBAAgB,CAACI,MAAjB,CAAwB,UAAUlB,QAAV,EAAoB;AAC5D,aAAOA,QAAQ,CAACiB,KAAT,KAAmBA,KAA1B;AACD,KAFiB,CAAX,CAAP;AAGD,GAJM,EAIJ,EAJI,CAAP;AAKD","sourcesContent":["import { modifierPhases } from \"../enums.js\"; // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}