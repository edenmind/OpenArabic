{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.\n\n    if (computedStyle.width === '0px') {\n      return;\n    }\n\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content\n\n    let outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(prevState => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [maxRows, minRows, props.placeholder]);\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n    const containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    let resizeObserver;\n\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(inputRef.current);\n    }\n\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = event => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : null\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/core/TextareaAutosize/TextareaAutosize.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_debounce","debounce","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","jsx","_jsx","jsxs","_jsxs","getStyleValue","computedStyle","property","parseInt","styles","shadow","visibility","position","overflow","height","top","left","transform","TextareaAutosize","forwardRef","props","ref","onChange","maxRows","minRows","style","value","other","current","isControlled","useRef","inputRef","handleRef","shadowRef","renders","state","setState","useState","syncHeight","useCallback","input","containerWindow","getComputedStyle","width","inputShallow","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","prevState","process","env","NODE_ENV","console","error","join","useEffect","handleResize","addEventListener","resizeObserver","ResizeObserver","observe","clear","removeEventListener","disconnect","handleChange","event","Fragment","children","rows","className","readOnly","tabIndex","propTypes","string","oneOfType","number","func","object","arrayOf"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,OAA5C,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,iBAAiB,IAAIC,QAA9B,EAAwCC,mBAAmB,IAAIC,UAA/D,EAA2EC,0BAA0B,IAAIC,iBAAzG,EAA4HC,oBAAoB,IAAIC,WAApJ,QAAuK,YAAvK;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;;AAEA,SAASC,aAAT,CAAuBC,aAAvB,EAAsCC,QAAtC,EAAgD;AAC9C,SAAOC,QAAQ,CAACF,aAAa,CAACC,QAAD,CAAd,EAA0B,EAA1B,CAAR,IAAyC,CAAhD;AACD;;AAED,MAAME,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE;AACN;AACAC,IAAAA,UAAU,EAAE,QAFN;AAGN;AACAC,IAAAA,QAAQ,EAAE,UAJJ;AAKN;AACAC,IAAAA,QAAQ,EAAE,QANJ;AAONC,IAAAA,MAAM,EAAE,CAPF;AAQNC,IAAAA,GAAG,EAAE,CARC;AASNC,IAAAA,IAAI,EAAE,CATA;AAUN;AACAC,IAAAA,SAAS,EAAE;AAXL;AADK,CAAf;AAeA,MAAMC,gBAAgB,GAAG,aAAa3B,KAAK,CAAC4B,UAAN,CAAiB,SAASD,gBAAT,CAA0BE,KAA1B,EAAiCC,GAAjC,EAAsC;AAC3F,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,OAAO,GAAG,CAHN;AAIJC,IAAAA,KAJI;AAKJC,IAAAA;AALI,MAMFN,KANJ;AAAA,QAOMO,KAAK,GAAGtC,6BAA6B,CAAC+B,KAAD,EAAQ9B,SAAR,CAP3C;;AASA,QAAM;AACJsC,IAAAA,OAAO,EAAEC;AADL,MAEFtC,KAAK,CAACuC,MAAN,CAAaJ,KAAK,IAAI,IAAtB,CAFJ;AAGA,QAAMK,QAAQ,GAAGxC,KAAK,CAACuC,MAAN,CAAa,IAAb,CAAjB;AACA,QAAME,SAAS,GAAGpC,UAAU,CAACyB,GAAD,EAAMU,QAAN,CAA5B;AACA,QAAME,SAAS,GAAG1C,KAAK,CAACuC,MAAN,CAAa,IAAb,CAAlB;AACA,QAAMI,OAAO,GAAG3C,KAAK,CAACuC,MAAN,CAAa,CAAb,CAAhB;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoB7C,KAAK,CAAC8C,QAAN,CAAe,EAAf,CAA1B;AACA,QAAMC,UAAU,GAAG/C,KAAK,CAACgD,WAAN,CAAkB,MAAM;AACzC,UAAMC,KAAK,GAAGT,QAAQ,CAACH,OAAvB;AACA,UAAMa,eAAe,GAAGzC,WAAW,CAACwC,KAAD,CAAnC;AACA,UAAMlC,aAAa,GAAGmC,eAAe,CAACC,gBAAhB,CAAiCF,KAAjC,CAAtB,CAHyC,CAGsB;;AAE/D,QAAIlC,aAAa,CAACqC,KAAd,KAAwB,KAA5B,EAAmC;AACjC;AACD;;AAED,UAAMC,YAAY,GAAGX,SAAS,CAACL,OAA/B;AACAgB,IAAAA,YAAY,CAACnB,KAAb,CAAmBkB,KAAnB,GAA2BrC,aAAa,CAACqC,KAAzC;AACAC,IAAAA,YAAY,CAAClB,KAAb,GAAqBc,KAAK,CAACd,KAAN,IAAeN,KAAK,CAACyB,WAArB,IAAoC,GAAzD;;AAEA,QAAID,YAAY,CAAClB,KAAb,CAAmBoB,KAAnB,CAAyB,CAAC,CAA1B,MAAiC,IAArC,EAA2C;AACzC;AACA;AACA;AACAF,MAAAA,YAAY,CAAClB,KAAb,IAAsB,GAAtB;AACD;;AAED,UAAMqB,SAAS,GAAGzC,aAAa,CAAC,YAAD,CAA/B;AACA,UAAM0C,OAAO,GAAG3C,aAAa,CAACC,aAAD,EAAgB,gBAAhB,CAAb,GAAiDD,aAAa,CAACC,aAAD,EAAgB,aAAhB,CAA9E;AACA,UAAM2C,MAAM,GAAG5C,aAAa,CAACC,aAAD,EAAgB,qBAAhB,CAAb,GAAsDD,aAAa,CAACC,aAAD,EAAgB,kBAAhB,CAAlF,CAtByC,CAsB8E;;AAEvH,UAAM4C,WAAW,GAAGN,YAAY,CAACO,YAAjC,CAxByC,CAwBM;;AAE/CP,IAAAA,YAAY,CAAClB,KAAb,GAAqB,GAArB;AACA,UAAM0B,eAAe,GAAGR,YAAY,CAACO,YAArC,CA3ByC,CA2BU;;AAEnD,QAAIE,WAAW,GAAGH,WAAlB;;AAEA,QAAI1B,OAAJ,EAAa;AACX6B,MAAAA,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASC,MAAM,CAAChC,OAAD,CAAN,GAAkB4B,eAA3B,EAA4CC,WAA5C,CAAd;AACD;;AAED,QAAI9B,OAAJ,EAAa;AACX8B,MAAAA,WAAW,GAAGC,IAAI,CAACG,GAAL,CAASD,MAAM,CAACjC,OAAD,CAAN,GAAkB6B,eAA3B,EAA4CC,WAA5C,CAAd;AACD;;AAEDA,IAAAA,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASF,WAAT,EAAsBD,eAAtB,CAAd,CAvCyC,CAuCa;;AAEtD,UAAMM,gBAAgB,GAAGL,WAAW,IAAIN,SAAS,KAAK,YAAd,GAA6BC,OAAO,GAAGC,MAAvC,GAAgD,CAApD,CAApC;AACA,UAAMpC,QAAQ,GAAGyC,IAAI,CAACK,GAAL,CAASN,WAAW,GAAGH,WAAvB,KAAuC,CAAxD;AACAd,IAAAA,QAAQ,CAACwB,SAAS,IAAI;AACpB;AACA;AACA,UAAI1B,OAAO,CAACN,OAAR,GAAkB,EAAlB,KAAyB8B,gBAAgB,GAAG,CAAnB,IAAwBJ,IAAI,CAACK,GAAL,CAAS,CAACC,SAAS,CAACF,gBAAV,IAA8B,CAA/B,IAAoCA,gBAA7C,IAAiE,CAAzF,IAA8FE,SAAS,CAAC/C,QAAV,KAAuBA,QAA9I,CAAJ,EAA6J;AAC3JqB,QAAAA,OAAO,CAACN,OAAR,IAAmB,CAAnB;AACA,eAAO;AACLf,UAAAA,QADK;AAEL6C,UAAAA;AAFK,SAAP;AAID;;AAED,UAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAI7B,OAAO,CAACN,OAAR,KAAoB,EAAxB,EAA4B;AAC1BoC,UAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,mDAAD,EAAsD,4EAAtD,EAAoIC,IAApI,CAAyI,IAAzI,CAAd;AACD;AACF;;AAED,aAAON,SAAP;AACD,KAlBO,CAAR;AAmBD,GA9DkB,EA8DhB,CAACrC,OAAD,EAAUC,OAAV,EAAmBJ,KAAK,CAACyB,WAAzB,CA9DgB,CAAnB;AA+DAtD,EAAAA,KAAK,CAAC4E,SAAN,CAAgB,MAAM;AACpB,UAAMC,YAAY,GAAG1E,QAAQ,CAAC,MAAM;AAClCwC,MAAAA,OAAO,CAACN,OAAR,GAAkB,CAAlB;AACAU,MAAAA,UAAU;AACX,KAH4B,CAA7B;AAIA,UAAMG,eAAe,GAAGzC,WAAW,CAAC+B,QAAQ,CAACH,OAAV,CAAnC;AACAa,IAAAA,eAAe,CAAC4B,gBAAhB,CAAiC,QAAjC,EAA2CD,YAA3C;AACA,QAAIE,cAAJ;;AAEA,QAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACzCD,MAAAA,cAAc,GAAG,IAAIC,cAAJ,CAAmBH,YAAnB,CAAjB;AACAE,MAAAA,cAAc,CAACE,OAAf,CAAuBzC,QAAQ,CAACH,OAAhC;AACD;;AAED,WAAO,MAAM;AACXwC,MAAAA,YAAY,CAACK,KAAb;AACAhC,MAAAA,eAAe,CAACiC,mBAAhB,CAAoC,QAApC,EAA8CN,YAA9C;;AAEA,UAAIE,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACK,UAAf;AACD;AACF,KAPD;AAQD,GAtBD,EAsBG,CAACrC,UAAD,CAtBH;AAuBAxC,EAAAA,iBAAiB,CAAC,MAAM;AACtBwC,IAAAA,UAAU;AACX,GAFgB,CAAjB;AAGA/C,EAAAA,KAAK,CAAC4E,SAAN,CAAgB,MAAM;AACpBjC,IAAAA,OAAO,CAACN,OAAR,GAAkB,CAAlB;AACD,GAFD,EAEG,CAACF,KAAD,CAFH;;AAIA,QAAMkD,YAAY,GAAGC,KAAK,IAAI;AAC5B3C,IAAAA,OAAO,CAACN,OAAR,GAAkB,CAAlB;;AAEA,QAAI,CAACC,YAAL,EAAmB;AACjBS,MAAAA,UAAU;AACX;;AAED,QAAIhB,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACuD,KAAD,CAAR;AACD;AACF,GAVD;;AAYA,SAAO,aAAazE,KAAK,CAACb,KAAK,CAACuF,QAAP,EAAiB;AACxCC,IAAAA,QAAQ,EAAE,CAAC,aAAa7E,IAAI,CAAC,UAAD,EAAad,QAAQ,CAAC;AAChDsC,MAAAA,KAAK,EAAEA,KADyC;AAEhDJ,MAAAA,QAAQ,EAAEsD,YAFsC;AAGhDvD,MAAAA,GAAG,EAAEW,SAH2C,CAGjC;AAHiC;AAKhDgD,MAAAA,IAAI,EAAExD,OAL0C;AAMhDC,MAAAA,KAAK,EAAErC,QAAQ,CAAC;AACd0B,QAAAA,MAAM,EAAEqB,KAAK,CAACuB,gBADA;AAEd;AACA;AACA7C,QAAAA,QAAQ,EAAEsB,KAAK,CAACtB,QAAN,GAAiB,QAAjB,GAA4B;AAJxB,OAAD,EAKZY,KALY;AANiC,KAAD,EAY9CE,KAZ8C,CAArB,CAAlB,EAYE,aAAazB,IAAI,CAAC,UAAD,EAAa;AACxC,qBAAe,IADyB;AAExC+E,MAAAA,SAAS,EAAE7D,KAAK,CAAC6D,SAFuB;AAGxCC,MAAAA,QAAQ,EAAE,IAH8B;AAIxC7D,MAAAA,GAAG,EAAEY,SAJmC;AAKxCkD,MAAAA,QAAQ,EAAE,CAAC,CAL6B;AAMxC1D,MAAAA,KAAK,EAAErC,QAAQ,CAAC,EAAD,EAAKqB,MAAM,CAACC,MAAZ,EAAoBe,KAApB,EAA2B;AACxCuB,QAAAA,OAAO,EAAE;AAD+B,OAA3B;AANyB,KAAb,CAZnB;AAD8B,GAAjB,CAAzB;AAwBD,CAnJqC,CAAtC;AAoJAa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7C,gBAAgB,CAACkE;AACzD;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACEH,EAAAA,SAAS,EAAEzF,SAAS,CAAC6F,MATrB;;AAWA;AACF;AACA;AACE9D,EAAAA,OAAO,EAAE/B,SAAS,CAAC8F,SAAV,CAAoB,CAAC9F,SAAS,CAAC+F,MAAX,EAAmB/F,SAAS,CAAC6F,MAA7B,CAApB,CAdT;;AAgBA;AACF;AACA;AACA;AACE7D,EAAAA,OAAO,EAAEhC,SAAS,CAAC8F,SAAV,CAAoB,CAAC9F,SAAS,CAAC+F,MAAX,EAAmB/F,SAAS,CAAC6F,MAA7B,CAApB,CApBT;;AAsBA;AACF;AACA;AACE/D,EAAAA,QAAQ,EAAE9B,SAAS,CAACgG,IAzBpB;;AA2BA;AACF;AACA;AACE3C,EAAAA,WAAW,EAAErD,SAAS,CAAC6F,MA9BvB;;AAgCA;AACF;AACA;AACE5D,EAAAA,KAAK,EAAEjC,SAAS,CAACiG,MAnCjB;;AAqCA;AACF;AACA;AACE/D,EAAAA,KAAK,EAAElC,SAAS,CAAC8F,SAAV,CAAoB,CAAC9F,SAAS,CAACkG,OAAV,CAAkBlG,SAAS,CAAC6F,MAA5B,CAAD,EAAsC7F,SAAS,CAAC+F,MAAhD,EAAwD/F,SAAS,CAAC6F,MAAlE,CAApB;AAxCP,CAFF,GA2CI,KAAK,CA3CT;AA4CA,eAAenE,gBAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n    onChange,\n    maxRows,\n    minRows = 1,\n    style,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input); // If input's width is shrunk and it's not visible, don't sync height.\n\n    if (computedStyle.width === '0px') {\n      return;\n    }\n\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    const innerHeight = inputShallow.scrollHeight; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight; // The height of the outer content\n\n    let outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(prevState => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [maxRows, minRows, props.placeholder]);\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n    const containerWindow = ownerWindow(inputRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    let resizeObserver;\n\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(inputRef.current);\n    }\n\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = event => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: _extends({\n        height: state.outerHeightStyle,\n        // Need a large enough difference to allow scrolling.\n        // This prevents infinite rendering loop.\n        overflow: state.overflow ? 'hidden' : null\n      }, style)\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        padding: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"]},"metadata":{},"sourceType":"module"}