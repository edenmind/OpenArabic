{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n\n  const theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  const typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/material/styles/responsiveFontSizes.js"],"names":["_extends","formatMuiErrorMessage","_formatMuiErrorMessage","isUnitless","convertLength","responsiveProperty","alignProperty","fontGrid","responsiveFontSizes","themeInput","options","breakpoints","disableAlign","factor","variants","theme","typography","convert","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","maxFontSize","minFontSize","lineHeight","Error","process","env","NODE_ENV","transform","value","size","grid","pixels","cssProperty","min","max","unit"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n\n  const theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  const typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = convertLength(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => alignProperty({\n        size: value,\n        grid: fontGrid({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}"]},"metadata":{},"sourceType":"module"}