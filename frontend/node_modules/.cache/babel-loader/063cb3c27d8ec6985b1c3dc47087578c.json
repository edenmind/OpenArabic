{"ast":null,"code":"/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled(_ref) {\n  let {\n    controlled,\n    default: defaultProp,\n    name,\n    state = 'value'\n  } = _ref;\n  // isControlled is ignored in the hook dependency lists as it should never change.\n  const {\n    current: isControlled\n  } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [state, name, controlled]);\n    const {\n      current: defaultValue\n    } = React.useRef(defaultProp);\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n\n  const setValueIfUncontrolled = React.useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/utils/esm/useControlled.js"],"names":["React","useControlled","controlled","default","defaultProp","name","state","current","isControlled","useRef","undefined","valueState","setValue","useState","value","process","env","NODE_ENV","useEffect","console","error","join","defaultValue","JSON","stringify","setValueIfUncontrolled","useCallback","newValue"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,aAAT,OAKZ;AAAA,MALmC;AACpCC,IAAAA,UADoC;AAEpCC,IAAAA,OAAO,EAAEC,WAF2B;AAGpCC,IAAAA,IAHoC;AAIpCC,IAAAA,KAAK,GAAG;AAJ4B,GAKnC;AACD;AACA,QAAM;AACJC,IAAAA,OAAO,EAAEC;AADL,MAEFR,KAAK,CAACS,MAAN,CAAaP,UAAU,KAAKQ,SAA5B,CAFJ;AAGA,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBZ,KAAK,CAACa,QAAN,CAAeT,WAAf,CAA/B;AACA,QAAMU,KAAK,GAAGN,YAAY,GAAGN,UAAH,GAAgBS,UAA1C;;AAEA,MAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCjB,IAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,UAAIV,YAAY,MAAMN,UAAU,KAAKQ,SAArB,CAAhB,EAAiD;AAC/CS,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAE,oCAAmCZ,YAAY,GAAG,EAAH,GAAQ,IAAK,cAAaF,KAAM,aAAYD,IAAK,UAASG,YAAY,GAAG,IAAH,GAAU,EAAG,aAApI,EAAkJ,6EAAlJ,EAAkO,qDAAoDH,IAAK,GAA1D,GAA+D,4CAAhS,EAA8U,4HAA9U,EAA4c,sDAA5c,EAAogBgB,IAApgB,CAAygB,IAAzgB,CAAd;AACD;AACF,KAJD,EAIG,CAACf,KAAD,EAAQD,IAAR,EAAcH,UAAd,CAJH;AAKA,UAAM;AACJK,MAAAA,OAAO,EAAEe;AADL,QAEFtB,KAAK,CAACS,MAAN,CAAaL,WAAb,CAFJ;AAGAJ,IAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,UAAI,CAACV,YAAD,IAAiBc,YAAY,KAAKlB,WAAtC,EAAmD;AACjDe,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAE,4CAA2Cd,KAAM,6BAA4BD,IAAK,4BAAnF,GAAkH,oDAAmDA,IAAK,GAA3K,EAA+KgB,IAA/K,CAAoL,IAApL,CAAd;AACD;AACF,KAJD,EAIG,CAACE,IAAI,CAACC,SAAL,CAAepB,WAAf,CAAD,CAJH;AAKD;;AAED,QAAMqB,sBAAsB,GAAGzB,KAAK,CAAC0B,WAAN,CAAkBC,QAAQ,IAAI;AAC3D,QAAI,CAACnB,YAAL,EAAmB;AACjBI,MAAAA,QAAQ,CAACe,QAAD,CAAR;AACD;AACF,GAJ8B,EAI5B,EAJ4B,CAA/B;AAKA,SAAO,CAACb,KAAD,EAAQW,sBAAR,CAAP;AACD","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled({\n  controlled,\n  default: defaultProp,\n  name,\n  state = 'value'\n}) {\n  // isControlled is ignored in the hook dependency lists as it should never change.\n  const {\n    current: isControlled\n  } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [state, name, controlled]);\n    const {\n      current: defaultValue\n    } = React.useRef(defaultProp);\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n\n  const setValueIfUncontrolled = React.useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}"]},"metadata":{},"sourceType":"module"}