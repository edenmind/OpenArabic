{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"variant\"];\nimport { unstable_capitalize as capitalize } from '@mui/utils';\n\nfunction isEmpty(string) {\n  return string.length === 0;\n}\n/**\n * Generates string classKey based on the properties provided. It starts with the\n * variant if defined, and then it appends all other properties in alphabetical order.\n * @param {object} props - the properties for which the classKey should be created.\n */\n\n\nexport default function propsToClassKey(props) {\n  const {\n    variant\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  let classKey = variant || '';\n  Object.keys(other).sort().forEach(key => {\n    if (key === 'color') {\n      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);\n    } else {\n      classKey += `${isEmpty(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;\n    }\n  });\n  return classKey;\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/system/esm/propsToClassKey.js"],"names":["_objectWithoutPropertiesLoose","_excluded","unstable_capitalize","capitalize","isEmpty","string","length","propsToClassKey","props","variant","other","classKey","Object","keys","sort","forEach","key","toString"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,SAAD,CAAlB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOA,MAAM,CAACC,MAAP,KAAkB,CAAzB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC7C,QAAM;AACJC,IAAAA;AADI,MAEFD,KAFJ;AAAA,QAGME,KAAK,GAAGV,6BAA6B,CAACQ,KAAD,EAAQP,SAAR,CAH3C;;AAKA,MAAIU,QAAQ,GAAGF,OAAO,IAAI,EAA1B;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,IAAnB,GAA0BC,OAA1B,CAAkCC,GAAG,IAAI;AACvC,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnBL,MAAAA,QAAQ,IAAIP,OAAO,CAACO,QAAD,CAAP,GAAoBH,KAAK,CAACQ,GAAD,CAAzB,GAAiCb,UAAU,CAACK,KAAK,CAACQ,GAAD,CAAN,CAAvD;AACD,KAFD,MAEO;AACLL,MAAAA,QAAQ,IAAK,GAAEP,OAAO,CAACO,QAAD,CAAP,GAAoBK,GAApB,GAA0Bb,UAAU,CAACa,GAAD,CAAM,GAAEb,UAAU,CAACK,KAAK,CAACQ,GAAD,CAAL,CAAWC,QAAX,EAAD,CAAwB,EAA7F;AACD;AACF,GAND;AAOA,SAAON,QAAP;AACD","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"variant\"];\nimport { unstable_capitalize as capitalize } from '@mui/utils';\n\nfunction isEmpty(string) {\n  return string.length === 0;\n}\n/**\n * Generates string classKey based on the properties provided. It starts with the\n * variant if defined, and then it appends all other properties in alphabetical order.\n * @param {object} props - the properties for which the classKey should be created.\n */\n\n\nexport default function propsToClassKey(props) {\n  const {\n    variant\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  let classKey = variant || '';\n  Object.keys(other).sort().forEach(key => {\n    if (key === 'color') {\n      classKey += isEmpty(classKey) ? props[key] : capitalize(props[key]);\n    } else {\n      classKey += `${isEmpty(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;\n    }\n  });\n  return classKey;\n}"]},"metadata":{},"sourceType":"module"}