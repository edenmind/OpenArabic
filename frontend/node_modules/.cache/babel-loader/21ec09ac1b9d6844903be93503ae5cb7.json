{"ast":null,"code":"/**\n * React Router v6.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\n\n\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\n\n\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\n\n\nfunction Outlet(_props) {\n  return useOutlet();\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\n\n\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\n\n\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, // TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children;\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };","map":{"version":3,"sources":["../../../packages/react-router/index.tsx"],"names":["console","alreadyWarned","NavigationContext","React","LocationContext","RouteContext","outlet","matches","initialIndex","historyRef","createMemoryHistory","history","action","location","state","useInRouterContext","navigate","useNavigate","useOutlet","basename","basenameProp","children","navigationType","NavigationType","static","staticProp","normalizePathname","navigationContext","locationProp","parsePath","pathname","search","hash","key","trailingPathname","stripBasename","useRoutes","createRoutesFromChildren","navigator","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","joinPaths","matchPath","useLocation","locationPathname","routePathnamesJson","JSON","match","activeRef","options","path","resolveTo","routeMatch","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","parentPath","warningOnce","locationFromContext","parsedLocationArg","remainingPathname","matchRoutes","_renderMatches","params","Object","pathnameBase","routes","element","route","caseSensitive","index","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","score","computeScore","b","a","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","initialScore","segment","siblings","n","matchedParams","matchedPathname","end","React.createElement","pattern","compilePath","captureGroups","paramName","splatValue","memo","safelyDecodeURIComponent","paramNames","regexpSource","matcher","decodeURIComponent","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","to","toArg","from","routePathnameIndex","routePathnames","toSegments","resolvePath","nextChar","paths"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type {\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To\n} from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath\n} from \"history\";\n\nexport type { Location, Path, To, NavigationType };\n\nfunction invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Omit<\n  History,\n  \"action\" | \"location\" | \"back\" | \"forward\" | \"listen\" | \"block\"\n>;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nconst NavigationContext = React.createContext<NavigationContextObject>(null!);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LocationContext = React.createContext<LocationContextObject>(null!);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nconst RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: []\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(_props: OutletProps): React.ReactElement | null {\n  return useOutlet();\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactElement | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<ParamKey extends string = string>(\n  pattern: PathPattern | string\n): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  return matchPath(pattern, useLocation().pathname);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: { replace?: boolean; state?: any } = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(): React.ReactElement | null {\n  return React.useContext(RouteContext).outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<Key extends string = string>(): Readonly<\n  Params<Key>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath}/*\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map(match =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase])\n        })\n      ),\n    parentMatches\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, _ =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map(meta => meta.childrenIndex),\n          b.routesMeta.map(meta => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  // TODO: attach original route object inside routesMeta so we don't need this arg\n  routesArg: RouteObject[],\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let routes = routesArg;\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = routes[meta.childrenIndex];\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children!;\n  }\n\n  return matches;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : <Outlet />\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1))\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: string;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<ParamKey extends string = string>(\n  pattern: PathPattern | string,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, at least match a word boundary. This restricts parent\n        // routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nfunction stripBasename(pathname: string, basename: string): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext\n};\n"]},"metadata":{},"sourceType":"module"}