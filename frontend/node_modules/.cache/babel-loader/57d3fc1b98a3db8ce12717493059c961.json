{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"name\", \"slot\", \"skipVariantsResolver\", \"skipSx\", \"overridesResolver\"],\n      _excluded2 = [\"theme\"],\n      _excluded3 = [\"theme\"];\nimport styledEngineStyled from '@mui/styled-engine';\nimport { getDisplayName } from '@mui/utils';\nimport createTheme from './createTheme';\nimport styleFunctionSx from './styleFunctionSx';\nimport propsToClassKey from './propsToClassKey';\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nconst getStyleOverrides = (name, theme) => {\n  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {\n    return theme.components[name].styleOverrides;\n  }\n\n  return null;\n};\n\nconst getVariantStyles = (name, theme) => {\n  let variants = [];\n\n  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {\n    variants = theme.components[name].variants;\n  }\n\n  const variantsStyles = {};\n  variants.forEach(definition => {\n    const key = propsToClassKey(definition.props);\n    variantsStyles[key] = definition.style;\n  });\n  return variantsStyles;\n};\n\nconst variantsResolver = (props, styles, theme, name) => {\n  var _theme$components, _theme$components$nam;\n\n  const {\n    ownerState = {}\n  } = props;\n  const variantsStyles = [];\n  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;\n\n  if (themeVariants) {\n    themeVariants.forEach(themeVariant => {\n      let isMatch = true;\n      Object.keys(themeVariant.props).forEach(key => {\n        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {\n          isMatch = false;\n        }\n      });\n\n      if (isMatch) {\n        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);\n      }\n    });\n  }\n\n  return variantsStyles;\n};\n\nexport function shouldForwardProp(prop) {\n  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';\n}\nexport const systemDefaultTheme = createTheme();\n\nconst lowercaseFirstLetter = string => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nexport default function createStyled() {\n  let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultTheme = systemDefaultTheme,\n    rootShouldForwardProp = shouldForwardProp,\n    slotShouldForwardProp = shouldForwardProp\n  } = input;\n  return function (tag) {\n    let inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const {\n      name: componentName,\n      slot: componentSlot,\n      skipVariantsResolver: inputSkipVariantsResolver,\n      skipSx: inputSkipSx,\n      overridesResolver\n    } = inputOptions,\n          options = _objectWithoutPropertiesLoose(inputOptions, _excluded); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.\n\n\n    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;\n    const skipSx = inputSkipSx || false;\n    let label;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (componentName) {\n        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;\n      }\n    }\n\n    let shouldForwardPropOption = shouldForwardProp;\n\n    if (componentSlot === 'Root') {\n      shouldForwardPropOption = rootShouldForwardProp;\n    } else if (componentSlot) {\n      // any other slot specified\n      shouldForwardPropOption = slotShouldForwardProp;\n    }\n\n    const defaultStyledResolver = styledEngineStyled(tag, _extends({\n      shouldForwardProp: shouldForwardPropOption,\n      label\n    }, options));\n\n    const muiStyledResolver = function (styleArg) {\n      for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        expressions[_key - 1] = arguments[_key];\n      }\n\n      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {\n        // On the server emotion doesn't use React.forwardRef for creating components, so the created\n        // component stays as a function. This condition makes sure that we do not interpolate functions\n        // which are basically components used as a selectors.\n        // eslint-disable-next-line no-underscore-dangle\n        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {\n          let {\n            theme: themeInput\n          } = _ref,\n              other = _objectWithoutPropertiesLoose(_ref, _excluded2);\n\n          return stylesArg(_extends({\n            theme: isEmpty(themeInput) ? defaultTheme : themeInput\n          }, other));\n        } : stylesArg;\n      }) : [];\n      let transformedStyleArg = styleArg;\n\n      if (componentName && overridesResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n          const styleOverrides = getStyleOverrides(componentName, theme);\n\n          if (styleOverrides) {\n            return overridesResolver(props, styleOverrides);\n          }\n\n          return null;\n        });\n      }\n\n      if (componentName && !skipVariantsResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);\n        });\n      }\n\n      if (!skipSx) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n          return styleFunctionSx(_extends({}, props, {\n            theme\n          }));\n        });\n      }\n\n      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;\n\n      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {\n        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.\n\n        transformedStyleArg = [...styleArg, ...placeholders];\n        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];\n      } else if (typeof styleArg === 'function') {\n        // If the type is function, we need to define the default theme.\n        transformedStyleArg = _ref2 => {\n          let {\n            theme: themeInput\n          } = _ref2,\n              other = _objectWithoutPropertiesLoose(_ref2, _excluded3);\n\n          return styleArg(_extends({\n            theme: isEmpty(themeInput) ? defaultTheme : themeInput\n          }, other));\n        };\n      }\n\n      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);\n\n      if (process.env.NODE_ENV !== 'production') {\n        let displayName;\n\n        if (componentName) {\n          displayName = `${componentName}${componentSlot || ''}`;\n        }\n\n        if (displayName === undefined) {\n          displayName = `Styled(${getDisplayName(tag)})`;\n        }\n\n        Component.displayName = displayName;\n      }\n\n      return Component;\n    };\n\n    return muiStyledResolver;\n  };\n}","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/system/esm/createStyled.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","_excluded3","styledEngineStyled","getDisplayName","createTheme","styleFunctionSx","propsToClassKey","isEmpty","obj","Object","keys","length","getStyleOverrides","name","theme","components","styleOverrides","getVariantStyles","variants","variantsStyles","forEach","definition","key","props","style","variantsResolver","styles","_theme$components","_theme$components$nam","ownerState","themeVariants","themeVariant","isMatch","push","shouldForwardProp","prop","systemDefaultTheme","lowercaseFirstLetter","string","charAt","toLowerCase","slice","createStyled","input","defaultTheme","rootShouldForwardProp","slotShouldForwardProp","tag","inputOptions","componentName","slot","componentSlot","skipVariantsResolver","inputSkipVariantsResolver","skipSx","inputSkipSx","overridesResolver","options","undefined","label","process","env","NODE_ENV","shouldForwardPropOption","defaultStyledResolver","muiStyledResolver","styleArg","expressions","expressionsWithDefaultTheme","map","stylesArg","__emotion_real","_ref","themeInput","other","transformedStyleArg","numOfCustomFnsApplied","Array","isArray","placeholders","fill","raw","_ref2","Component","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"name\", \"slot\", \"skipVariantsResolver\", \"skipSx\", \"overridesResolver\"],\n      _excluded2 = [\"theme\"],\n      _excluded3 = [\"theme\"];\nimport styledEngineStyled from '@mui/styled-engine';\nimport { getDisplayName } from '@mui/utils';\nimport createTheme from './createTheme';\nimport styleFunctionSx from './styleFunctionSx';\nimport propsToClassKey from './propsToClassKey';\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nconst getStyleOverrides = (name, theme) => {\n  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {\n    return theme.components[name].styleOverrides;\n  }\n\n  return null;\n};\n\nconst getVariantStyles = (name, theme) => {\n  let variants = [];\n\n  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {\n    variants = theme.components[name].variants;\n  }\n\n  const variantsStyles = {};\n  variants.forEach(definition => {\n    const key = propsToClassKey(definition.props);\n    variantsStyles[key] = definition.style;\n  });\n  return variantsStyles;\n};\n\nconst variantsResolver = (props, styles, theme, name) => {\n  var _theme$components, _theme$components$nam;\n\n  const {\n    ownerState = {}\n  } = props;\n  const variantsStyles = [];\n  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;\n\n  if (themeVariants) {\n    themeVariants.forEach(themeVariant => {\n      let isMatch = true;\n      Object.keys(themeVariant.props).forEach(key => {\n        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {\n          isMatch = false;\n        }\n      });\n\n      if (isMatch) {\n        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);\n      }\n    });\n  }\n\n  return variantsStyles;\n};\n\nexport function shouldForwardProp(prop) {\n  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';\n}\nexport const systemDefaultTheme = createTheme();\n\nconst lowercaseFirstLetter = string => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nexport default function createStyled(input = {}) {\n  const {\n    defaultTheme = systemDefaultTheme,\n    rootShouldForwardProp = shouldForwardProp,\n    slotShouldForwardProp = shouldForwardProp\n  } = input;\n  return (tag, inputOptions = {}) => {\n    const {\n      name: componentName,\n      slot: componentSlot,\n      skipVariantsResolver: inputSkipVariantsResolver,\n      skipSx: inputSkipSx,\n      overridesResolver\n    } = inputOptions,\n          options = _objectWithoutPropertiesLoose(inputOptions, _excluded); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.\n\n\n    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;\n    const skipSx = inputSkipSx || false;\n    let label;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (componentName) {\n        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;\n      }\n    }\n\n    let shouldForwardPropOption = shouldForwardProp;\n\n    if (componentSlot === 'Root') {\n      shouldForwardPropOption = rootShouldForwardProp;\n    } else if (componentSlot) {\n      // any other slot specified\n      shouldForwardPropOption = slotShouldForwardProp;\n    }\n\n    const defaultStyledResolver = styledEngineStyled(tag, _extends({\n      shouldForwardProp: shouldForwardPropOption,\n      label\n    }, options));\n\n    const muiStyledResolver = (styleArg, ...expressions) => {\n      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {\n        // On the server emotion doesn't use React.forwardRef for creating components, so the created\n        // component stays as a function. This condition makes sure that we do not interpolate functions\n        // which are basically components used as a selectors.\n        // eslint-disable-next-line no-underscore-dangle\n        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {\n          let {\n            theme: themeInput\n          } = _ref,\n              other = _objectWithoutPropertiesLoose(_ref, _excluded2);\n\n          return stylesArg(_extends({\n            theme: isEmpty(themeInput) ? defaultTheme : themeInput\n          }, other));\n        } : stylesArg;\n      }) : [];\n      let transformedStyleArg = styleArg;\n\n      if (componentName && overridesResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n          const styleOverrides = getStyleOverrides(componentName, theme);\n\n          if (styleOverrides) {\n            return overridesResolver(props, styleOverrides);\n          }\n\n          return null;\n        });\n      }\n\n      if (componentName && !skipVariantsResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);\n        });\n      }\n\n      if (!skipSx) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n          return styleFunctionSx(_extends({}, props, {\n            theme\n          }));\n        });\n      }\n\n      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;\n\n      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {\n        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.\n\n        transformedStyleArg = [...styleArg, ...placeholders];\n        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];\n      } else if (typeof styleArg === 'function') {\n        // If the type is function, we need to define the default theme.\n        transformedStyleArg = _ref2 => {\n          let {\n            theme: themeInput\n          } = _ref2,\n              other = _objectWithoutPropertiesLoose(_ref2, _excluded3);\n\n          return styleArg(_extends({\n            theme: isEmpty(themeInput) ? defaultTheme : themeInput\n          }, other));\n        };\n      }\n\n      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);\n\n      if (process.env.NODE_ENV !== 'production') {\n        let displayName;\n\n        if (componentName) {\n          displayName = `${componentName}${componentSlot || ''}`;\n        }\n\n        if (displayName === undefined) {\n          displayName = `Styled(${getDisplayName(tag)})`;\n        }\n\n        Component.displayName = displayName;\n      }\n\n      return Component;\n    };\n\n    return muiStyledResolver;\n  };\n}"]},"metadata":{},"sourceType":"module"}