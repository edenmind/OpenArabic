{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"lg\", \"md\", \"rowSpacing\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"]; // A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nfunction generateGrid(globalStyles, theme, breakpoint, ownerState) {\n  const size = ownerState[breakpoint];\n\n  if (!size) {\n    return;\n  }\n\n  let styles = {};\n\n  if (size === true) {\n    // For the auto layouting\n    styles = {\n      flexBasis: 0,\n      flexGrow: 1,\n      maxWidth: '100%'\n    };\n  } else if (size === 'auto') {\n    styles = {\n      flexBasis: 'auto',\n      flexGrow: 0,\n      flexShrink: 0,\n      maxWidth: 'none',\n      width: 'auto'\n    };\n  } else {\n    const columnsBreakpointValues = resolveBreakpointValues({\n      values: ownerState.columns,\n      breakpoints: theme.breakpoints.values\n    });\n    const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues; // Keep 7 significant numbers.\n\n    const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n    let more = {};\n\n    if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n      const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n      if (themeSpacing !== '0px') {\n        const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n        more = {\n          flexBasis: fullWidth,\n          maxWidth: fullWidth\n        };\n      }\n    } // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n    styles = _extends({\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width\n    }, more);\n  } // No need for a media query for the first size.\n\n\n  if (theme.breakpoints.values[breakpoint] === 0) {\n    Object.assign(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\n\nexport function generateDirection(_ref) {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\nexport function generateRowGap(_ref2) {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap(_ref3) {\n  let {\n    theme,\n    ownerState\n  } = _ref3;\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      container,\n      direction,\n      item,\n      lg,\n      md,\n      sm,\n      spacing,\n      wrap,\n      xl,\n      xs,\n      zeroMinWidth\n    } = props.ownerState;\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, container && spacing !== 0 && styles[`spacing-xs-${String(spacing)}`], direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];\n  }\n})(_ref4 => {\n  let {\n    ownerState\n  } = _ref4;\n  return _extends({\n    boxSizing: 'border-box'\n  }, ownerState.container && {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%'\n  }, ownerState.item && {\n    margin: 0 // For instance, it's useful when used with a `figure` element.\n\n  }, ownerState.zeroMinWidth && {\n    minWidth: 0\n  }, ownerState.wrap === 'nowrap' && {\n    flexWrap: 'nowrap'\n  }, ownerState.wrap === 'reverse' && {\n    flexWrap: 'wrap-reverse'\n  });\n}, generateDirection, generateRowGap, generateColumnGap, _ref5 => {\n  let {\n    theme,\n    ownerState\n  } = _ref5;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    generateGrid(globalStyles, theme, breakpoint, ownerState);\n    return globalStyles;\n  }, {});\n});\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    spacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', container && spacing !== 0 && `spacing-xs-${String(spacing)}`, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    lg = false,\n    md = false,\n    rowSpacing: rowSpacingProp,\n    sm = false,\n    spacing = 0,\n    wrap = 'wrap',\n    xl = false,\n    xs = false,\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // setting prop before context to accomodate nesting\n  // colums set with default breakpoint unit of 12\n\n  const columns = columnsProp || columnsContext || 12;\n\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const wrapChild = element => columns !== 12 ? /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: element\n  }) : element;\n\n  return wrapChild( /*#__PURE__*/_jsx(GridRoot, _extends({\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/jonas/Documents/GitHub/OpenArabic/frontend/node_modules/@mui/material/Grid/Grid.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","clsx","unstable_extendSxProp","extendSxProp","handleBreakpoints","unstable_resolveBreakpointValues","resolveBreakpointValues","unstable_composeClasses","composeClasses","requirePropFactory","styled","useThemeProps","GridContext","gridClasses","getGridUtilityClass","jsx","_jsx","getOffset","val","parse","parseFloat","String","replace","generateGrid","globalStyles","theme","breakpoint","ownerState","size","styles","flexBasis","flexGrow","maxWidth","flexShrink","width","columnsBreakpointValues","values","columns","breakpoints","columnValue","Math","round","more","container","item","columnSpacing","themeSpacing","spacing","fullWidth","Object","assign","up","generateDirection","directionValues","direction","propValue","output","flexDirection","indexOf","generateRowGap","rowSpacing","rowSpacingValues","marginTop","paddingTop","generateColumnGap","columnSpacingValues","marginLeft","paddingLeft","GridRoot","name","slot","overridesResolver","props","lg","md","sm","wrap","xl","xs","zeroMinWidth","root","boxSizing","display","flexWrap","margin","minWidth","keys","reduce","useUtilityClasses","classes","slots","Grid","forwardRef","inProps","ref","themeProps","className","columnsProp","columnSpacingProp","component","rowSpacingProp","other","columnsContext","useContext","wrapChild","element","Provider","value","children","as","process","env","NODE_ENV","propTypes","node","object","string","oneOfType","arrayOf","number","elementType","bool","oneOf","sx","func","requireProp"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"lg\", \"md\", \"rowSpacing\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nfunction generateGrid(globalStyles, theme, breakpoint, ownerState) {\n  const size = ownerState[breakpoint];\n\n  if (!size) {\n    return;\n  }\n\n  let styles = {};\n\n  if (size === true) {\n    // For the auto layouting\n    styles = {\n      flexBasis: 0,\n      flexGrow: 1,\n      maxWidth: '100%'\n    };\n  } else if (size === 'auto') {\n    styles = {\n      flexBasis: 'auto',\n      flexGrow: 0,\n      flexShrink: 0,\n      maxWidth: 'none',\n      width: 'auto'\n    };\n  } else {\n    const columnsBreakpointValues = resolveBreakpointValues({\n      values: ownerState.columns,\n      breakpoints: theme.breakpoints.values\n    });\n    const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues; // Keep 7 significant numbers.\n\n    const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n    let more = {};\n\n    if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n      const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n      if (themeSpacing !== '0px') {\n        const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n        more = {\n          flexBasis: fullWidth,\n          maxWidth: fullWidth\n        };\n      }\n    } // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n    styles = _extends({\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width\n    }, more);\n  } // No need for a media query for the first size.\n\n\n  if (theme.breakpoints.values[breakpoint] === 0) {\n    Object.assign(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\n\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      return {};\n    });\n  }\n\n  return styles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      container,\n      direction,\n      item,\n      lg,\n      md,\n      sm,\n      spacing,\n      wrap,\n      xl,\n      xs,\n      zeroMinWidth\n    } = props.ownerState;\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, container && spacing !== 0 && styles[`spacing-xs-${String(spacing)}`], direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap === 'nowrap' && {\n  flexWrap: 'nowrap'\n}, ownerState.wrap === 'reverse' && {\n  flexWrap: 'wrap-reverse'\n}), generateDirection, generateRowGap, generateColumnGap, ({\n  theme,\n  ownerState\n}) => theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n  // Use side effect over immutability for better performance.\n  generateGrid(globalStyles, theme, breakpoint, ownerState);\n  return globalStyles;\n}, {}));\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    spacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', container && spacing !== 0 && `spacing-xs-${String(spacing)}`, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    lg = false,\n    md = false,\n    rowSpacing: rowSpacingProp,\n    sm = false,\n    spacing = 0,\n    wrap = 'wrap',\n    xl = false,\n    xs = false,\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // setting prop before context to accomodate nesting\n  // colums set with default breakpoint unit of 12\n\n  const columns = columnsProp || columnsContext || 12;\n\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const wrapChild = element => columns !== 12 ? /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: element\n  }) : element;\n\n  return wrapChild( /*#__PURE__*/_jsx(GridRoot, _extends({\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}