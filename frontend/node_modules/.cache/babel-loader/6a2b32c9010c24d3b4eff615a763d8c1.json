{"ast":null,"code":"/**\n * React Router DOM v6.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { useRef, useState, useLayoutEffect, createElement, forwardRef, useCallback, useMemo } from 'react';\nimport { createBrowserHistory, createHashHistory, createPath } from 'history';\nimport { Router, useHref, useLocation, useResolvedPath, useNavigate } from 'react-router';\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes } from 'react-router';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst _excluded = [\"onClick\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\"],\n      _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\"];\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n} ////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> for use in web browsers. Provides the cleanest URLs.\n */\n\n\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A <Router> for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\n\n\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref2;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nconst Link = /*#__PURE__*/forwardRef(function LinkWithRef(_ref3, ref) {\n  let {\n    onClick,\n    reloadDocument,\n    replace = false,\n    state,\n    target,\n    to\n  } = _ref3,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded);\n\n  let href = useHref(to);\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target\n  });\n\n  function handleClick(event) {\n    if (onClick) onClick(event);\n\n    if (!event.defaultPrevented && !reloadDocument) {\n      internalOnClick(event);\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    createElement(\"a\", _extends({}, rest, {\n      href: href,\n      onClick: handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nconst NavLink = /*#__PURE__*/forwardRef(function NavLinkWithRef(_ref4, ref) {\n  let {\n    \"aria-current\": ariaCurrentProp = \"page\",\n    caseSensitive = false,\n    className: classNameProp = \"\",\n    end = false,\n    style: styleProp,\n    to\n  } = _ref4,\n      rest = _objectWithoutPropertiesLoose(_ref4, _excluded2);\n\n  let location = useLocation();\n  let path = useResolvedPath(to);\n  let locationPathname = location.pathname;\n  let toPathname = path.pathname;\n\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    toPathname = toPathname.toLowerCase();\n  }\n\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null].filter(Boolean).join(\" \");\n  }\n\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive\n  }) : styleProp;\n  return /*#__PURE__*/createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n} ////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\n\n\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n  return useCallback(event => {\n    if (event.button === 0 && ( // Ignore everything but left clicks\n    !target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n    ) {\n      event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here.\n\n      let replace = !!replaceProp || createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\n\n\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = useRef(createSearchParams(defaultInit));\n  let location = useLocation();\n  let searchParams = useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = useCallback((nextInit, navigateOptions) => {\n    navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n  }, [navigate]);\n  return [searchParams, setSearchParams];\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\n\n\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\n\nexport { BrowserRouter, HashRouter, Link, NavLink, createSearchParams, useLinkClickHandler, useSearchParams };","map":{"version":3,"sources":["../../../packages/react-router-dom/index.tsx"],"names":["console","window","historyRef","React","createBrowserHistory","history","action","location","state","createHashHistory","event","Link","replace","to","rest","href","useHref","internalOnClick","useLinkClickHandler","target","onClick","NavLink","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","useLocation","path","useResolvedPath","locationPathname","toPathname","isActive","ariaCurrent","styleProp","navigate","useNavigate","isModifiedEvent","createPath","defaultSearchParamsRef","createSearchParams","searchParams","value","setSearchParams","init","Array","memo","v"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type { BrowserHistory, HashHistory } from \"history\";\nimport { createBrowserHistory, createHashHistory, createPath } from \"history\";\nimport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes\n} from \"react-router\";\nimport type { To } from \"react-router\";\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  renderMatches,\n  resolvePath,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes\n};\n\nexport type {\n  Location,\n  Path,\n  To,\n  NavigationType,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigator,\n  OutletProps,\n  Params,\n  PathMatch,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext\n} from \"react-router\";\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A <Router> for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A <Router> for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps extends Omit<LinkProps, \"className\" | \"style\"> {\n  caseSensitive?: boolean;\n  className?: string | ((props: { isActive: boolean }) => string);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      ...rest\n    },\n    ref\n  ) {\n    let location = useLocation();\n    let path = useResolvedPath(to);\n\n    let locationPathname = location.pathname;\n    let toPathname = path.pathname;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [classNameProp, isActive ? \"active\" : null]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp({ isActive }) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (\n        event.button === 0 && // Ignore everything but left clicks\n        (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n        !isModifiedEvent(event) // Ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here.\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(defaultInit?: URLSearchParamsInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback(\n    (\n      nextInit: URLSearchParamsInit,\n      navigateOptions?: { replace?: boolean; state?: any }\n    ) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams] as const;\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n"]},"metadata":{},"sourceType":"module"}