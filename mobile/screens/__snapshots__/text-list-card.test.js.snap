// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CategoryCard /> renders correctly 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "texts": {
            "arabic": "someArabic",
            "english": "someEnglish",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no arabic text 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "texts": {
            "english": "someEnglish",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no author 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "",
          "category": "someCategory",
          "id": "someId",
          "texts": {
            "arabic": "someArabic",
            "english": "someEnglish",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no category 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "",
          "id": "someId",
          "texts": {
            "arabic": "someArabic",
            "english": "someEnglish",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no english text 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "texts": {
            "arabic": "someArabic",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no image 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "image": "",
          "texts": {
            "arabic": "someArabic",
            "english": "someEnglish",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no source 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "source": "",
          "texts": {
            "arabic": "someArabic",
            "english": "someEnglish",
          },
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no texts 1`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "texts": {},
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;

exports[`<CategoryCard /> renders correctly with no texts 2`] = `
<Context.Provider
  value={
    {
      "getServerState": undefined,
      "store": {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": {
        "addNestedSub": [Function],
        "getListeners": [Function],
        "handleChangeWrapper": [Function],
        "isSubscribed": [Function],
        "notifyNestedSubs": [Function],
        "trySubscribe": [Function],
        "tryUnsubscribe": [Function],
      },
    }
  }
>
  <ForwardRef(NavigationContainerInner)>
    <TextListCard
      setShouldReload={[Function]}
      text={
        {
          "author": "someAuthor",
          "category": "someCategory",
          "id": "someId",
          "texts": {},
          "title": "someTitle",
        }
      }
    />
  </ForwardRef(NavigationContainerInner)>
</Context.Provider>
`;
